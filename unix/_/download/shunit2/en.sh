#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfVVJMPSJVUkwiCl9NU0dfRVJST1I9IkVycm9yIgpfTVNHX0VSUk9SX0NPREU9IkVycm9yIGNvZGUiCl9NU0dfRVJST1JfUkVUUklFVklOR19TSFVOSVRfUkVMRUFTRVNfSU5GTz0iQW4gZXJyb3IgaGFwcGVuIHJldHJpZXZpbmcgc2h1bml0MiByZWxlYXNlcyBpbmZvcm1hdGlvbiBmcm9tIEdpdGh1YiBBUEkuIgpfTVNHX0NIRUNLSU5HX1NIVU5JVD0iQ2hlY2tpbmcgc2h1bml0Mi4uLiIKX01TR19SRVRSSUVWSU5HX1NIVU5JVF9MQVNURVNUX1ZFUlNJT049IlJldHJpZXZpbmcgbGFzdGVzdCB2ZXJzaW9uLi4uIgpfTVNHX0VSUk9SX1BBUlNJTkdfTEFTVEVTVF9TSFVOSVRfUkVMRUFTRT0iQW4gZXJyb3IgaGFwcGVuIHBhcnNpbmcgbGFzdGVzdCBzaHVuaXQyIHJlbGVhc2UgdmVyc2lvbiBmcm9tIEdpdGh1YiBBUEkuIgpfTVNHX0RPV05MT0FESU5HX1NIVU5JVD0iRG93bmxvYWRpbmcgc2h1bml0MiIKX01TR19FUlJPUl9ET1dOTE9BRElOR19TSFVOSVQ9IkFuIGVycm9yIGhhcHBlbiBkb3dubG9hZGluZyBzaHVuaXQyIgpfTVNHX1VOWklQUElOR19TSFVOSVQ9IlVuemlwcGluZy4uLiIKX01TR19ERVNUX0VYSVNUUz0iRGVzdGluYXRpb24gZmlsZSBleGlzdHMiCl9NU0dfSU5ESUNBVEVfQU5PVEhFUl9ERVNUX1dJVEhfUEFSQU09IkluZGljYXRlIGFub3RoZXIgZGVzdGluYXRpb24gZm9yIHNodW5pdDIgd2l0aCBwYXJhbWV0ZXIiCkdJVEhVQl9BUElfQ1VSTF9BVVRIPSIiCmlmIFsgLW4gIiRHSVRIVUJfVVNFUk5BTUUiIF0gJiYgWyAtbiAiJEdJVEhVQl9UT0tFTiIgXTsgdGhlbgogIEdJVEhVQl9BUElfQ1VSTF9BVVRIPSIkR0lUSFVCX1VTRVJOQU1FOiRHSVRIVUJfVE9LRU4iCmZpOwpJTkRFTlRfU1RSSU5HPSIiClNFVFg9MApfREVTVF9QQVRIPSIkUFdEL3NodW5pdDIiCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvXy9kb3dubG9hZC9zaHVuaXQyLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gWy0tZGVzdC1wYXRoXQoKICBEb3dubG9hZHMgc2h1bml0Mi4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC0tc2V0LXggICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRzIHRoZSAteCBvcHRpb24gaW4gQmFzaCB0byBwcmludCBvdXQgdGhlIHN0YXRlbWVudHMgYXMgdGhleSBhcmUgYmVpbmcgZXhlY3V0ZWQuIFVzZWZ1bCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgogIC0tZGVzdC1wYXRoIEZJTEVQQVRIICAgICAgICAgICAgICBEZXN0aW5hdGlvbiBwYXRoIG9mIHRoZSBkb3dubG9hZGVkIGJpbmFyeS4gQnkgZGVmYXVsdCAnJF9ERVNUX1BBVEgnLgoKSEVMUF9VU0FHRQogICAgZXhpdCAxCn0KZm9yIGFyZyBpbiAiJEAiOyBkbwogIGNhc2UgJGFyZyBpbgogICAgLWl8LS1pbmRlbnQpCiAgICBJTkRFTlRfU1RSSU5HPSIkMiIKICAgIHNoaWZ0IDIKICAgIDs7CiAgICAtaHwtLWhlbHApCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7ICAgIC0tc2V0LXgpCiAgICBTRVRYPTEKICAgIHNoaWZ0CiAgICA7OyAgICAKICAgIC0tZGVzdC1wYXRoKQogICAgc2hpZnQKICAgIF9ERVNUX1BBVEg9JDEKICAgIHNoaWZ0CiAgICA7OwogIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KaWYgWyAiJFNFVFgiIC1lcSAxIF07IHRoZW4gc2V0IC14OyBmaQpfREVTVF9ESVJQQVRIPSIkKGRpcm5hbWUgIiRfREVTVF9QQVRIIikiCmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxTY3JpcHREZXBlbmRlbmNpZXMoKSB7CiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgSU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFUz0oCiAgICAianEiCiAgKQogIGZvciBERVAgaW4gIiR7SU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFU1tAXX0iOyBkbwogICAgaWYgW1sgIiQoc3VkbyBwYWNtYW4gLVFpICIkREVQIiAyPiAvZGV2L251bGwgfCBncmVwIFN0YXR1cykiICE9ICJTdGF0dXM6IGluc3RhbGwgb2sgaW5zdGFsbGVkIiBdXTsgdGhlbgogICAgICBzdWRvIHBhY21hbiAtUyAtLSAteSAiJERFUCIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogICAgZmk7CiAgZG9uZTsKfQpfR0VUX1NIVU5JVF9SRUxFQVNFU19VUkw9Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3Mva3dhcmQvc2h1bml0Mi9yZWxlYXNlcyIKZnVuY3Rpb24gZ2V0U2h1bml0TGFzdGVzdFZlcnNpb24oKSB7CiAgX1NIVU5JVF9SRUxFQVNFU19JTkZPPSIkKGN1cmwgLXNMICIkR0lUSFVCX0FQSV9DVVJMX0FVVEgiICIkX0dFVF9TSFVOSVRfUkVMRUFTRVNfVVJMIiAyPiYxKSIKICBfU0hVTklUX1JFTEVBU0VTX0lORk9fTUVTU0FHRT0iJChlY2hvICIkX1NIVU5JVF9SRUxFQVNFU19JTkZPIiB8IGpxIC1yICcubWVzc2FnZScgMj4mMSkiCiAgX1NIVU5JVF9SRUxFQVNFU19JTkZPX01FU1NBR0VfRVhJVF9DT0RFPSQ/CiAgaWYgWyAkX1NIVU5JVF9SRUxFQVNFU19JTkZPX01FU1NBR0VfRVhJVF9DT0RFIC1lcSAwIF07IHRoZW4KICAgIHByaW50ZiAiXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzXG4iICIkX01TR19FUlJPUl9SRVRSSUVWSU5HX1NIVU5JVF9SRUxFQVNFU19JTkZPIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19VUkwiICIkX0dFVF9TSFVOSVRfUkVMRUFTRVNfVVJMIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FUlJPUiIgIiRfU0hVTklUX1JFTEVBU0VTX0lORk9fTUVTU0FHRSIgPiYyCiAgICBleGl0ICRfU0hVTklUX1JFTEVBU0VTX0lORk9fTUVTU0FHRV9FWElUX0NPREUKICBmaTsKICBfUEFSU0VfU0hVTklUX0xBU1RFU1RfVkVSU0lPTj0kKAogICAgZWNobyAiJF9TSFVOSVRfUkVMRUFTRVNfSU5GTyIgfCAgICAganEgLXIgIi5bMF0ubmFtZSIgMj4mMQogICkKICBfUEFSU0VfU0hVTklUX0xBU1RFU1RfVkVSU0lPTl9FWElUX0NPREU9JD8KICBpZiBbICRfUEFSU0VfU0hVTklUX0xBU1RFU1RfVkVSU0lPTl9FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICJcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBwcmludGYgIlxuJXNcbiIgIiRfTVNHX0VSUk9SX1BBUlNJTkdfTEFTVEVTVF9TSFVOSVRfUkVMRUFTRSIgPiYyCiAgICBwcmludGYgIiVzOiAlc1xuIiAiJF9NU0dfVVJMIiAiJF9HRVRfU0hVTklUX0xBVEVTVF9WRVJTSU9OX1VSTCIgPiYyCiAgICBwcmludGYgIiVzOiAlZFxuIiAiJF9NU0dfRVJST1JfQ09ERSIgIiRfUEFSU0VfU0hVTklUX0xBU1RFU1RfVkVSU0lPTl9FWElUX0NPREUiID4mMgogICAgcHJpbnRmICIlczogJXMiICIkX01TR19FUlJPUiIgIiRfUEFSU0VfU0hVTklUX0xBU1RFU1RfVkVSU0lPTiIgPiYyCiAgICBleGl0ICRfUEFSU0VfU0hVTklUX0xBU1RFU1RfVkVSU0lPTl9FWElUX0NPREUKICBmaTsKICBfU0hVTklUX0xBU1RFU1RfVkVSU0lPTj0iJChwcmludGYgIiVzIiAiJF9QQVJTRV9TSFVOSVRfTEFTVEVTVF9WRVJTSU9OIiB8IGN1dCAtZCcgJyAtZjIpIgp9CmZ1bmN0aW9uIGRvd25sb2FkU2h1bml0KCkgewogIF9ET1dOTE9BRF9TSFVOSVRfVVJMPSJodHRwczovL2dpdGh1Yi5jb20va3dhcmQvc2h1bml0Mi9hcmNoaXZlL3YkMS50YXIuZ3oiCiAgX0RPV05MT0FEX1NIVU5JVF9PVVRQVVQ9IiQoY3VybCAtc0wgIiRfRE9XTkxPQURfU0hVTklUX1VSTCIgLW8gIiQyIiAyPiYxKSIKICBfRE9XTkxPQURfU0hVTklUX0VYSVRfQ09ERT0kPwogIGlmICBbICRfRE9XTkxPQURfU0hVTklUX0VYSVRfQ09ERSAtbmUgMCBdOyB0aGVuCiAgICBwcmludGYgIlxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgIHByaW50ZiAiXG4lcyB2JXNcbiIgIiRfTVNHX0VSUk9SX0RPV05MT0FESU5HX1NIVU5JVCIgIiRfU0hVTklUX0xBU1RFU1RfVkVSU0lPTiIgPiYyCiAgICBwcmludGYgIiVzOiAlc1xuIiAiJF9NU0dfVVJMIiAiJF9ET1dOTE9BRF9TSFVOSVRfVVJMIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FUlJPUiIgIiRfRE9XTkxPQURfU0hVTklUX09VVFBVVCIgPiYyCiAgICBleGl0ICRfRE9XTkxPQURfU0hVTklUX0VYSVRfQ09ERQogIGZpOwp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgaWYgWyAtZiAiJF9ERVNUX1BBVEgiIF0gfHwgWyAtZCAiJF9ERVNUX1BBVEgiIF07IHRoZW4KICAgIHByaW50ZiAiJXMgKCVzKVxuIiAiJF9NU0dfREVTVF9FWElTVFMiICIkX0RFU1RfUEFUSCIgPiYyCiAgICBwcmludGYgIiVzICctLWRlc3QtcGF0aCcuXG4iICIkX01TR19JTkRJQ0FURV9BTk9USEVSX0RFU1RfV0lUSF9QQVJBTSIgPiYyCiAgICBleGl0IDEKICBmaTsKICBpbnN0YWxsU2NyaXB0RGVwZW5kZW5jaWVzCiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiVzXG4iICIkX01TR19DSEVDS0lOR19TSFVOSVQiCiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiAgJXMiICIkX01TR19SRVRSSUVWSU5HX1NIVU5JVF9MQVNURVNUX1ZFUlNJT04iCiAgZ2V0U2h1bml0TGFzdGVzdFZlcnNpb24KICBwcmludGYgIiAodiVzKSIgIiRfU0hVTklUX0xBU1RFU1RfVkVSU0lPTiIKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICBwcmludEluZGVudAogIHByaW50ZiAiICAlcyAodiVzKSIgIiRfTVNHX0RPV05MT0FESU5HX1NIVU5JVCIgIiRfU0hVTklUX0xBU1RFU1RfVkVSU0lPTiIKICBkb3dubG9hZFNodW5pdCAiJF9TSFVOSVRfTEFTVEVTVF9WRVJTSU9OIiAiJF9ERVNUX0RJUlBBVEgvc2h1bml0Mi50YXIuZ3oiCiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiAgJXMiICIkX01TR19VTlpJUFBJTkdfU0hVTklUIgogIHRhciB4emYgIiRfREVTVF9ESVJQQVRIL3NodW5pdDIudGFyLmd6IiAtQyAiJF9ERVNUX0RJUlBBVEgiIHx8IGV4aXQgJD8KICBtdiAiJF9ERVNUX0RJUlBBVEgvc2h1bml0Mi0kX1NIVU5JVF9MQVNURVNUX1ZFUlNJT04vc2h1bml0MiIgIiRfREVTVF9QQVRIIgogIHJtIC1yZiAiJF9ERVNUX0RJUlBBVEgvc2h1bml0Mi0kX1NIVU5JVF9MQVNURVNUX1ZFUlNJT04iCiAgcm0gLWYgIiRfREVTVF9ESVJQQVRIL3NodW5pdDIudGFyLmd6IgogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9CmlmIChyZXR1cm4gMCAyPi9kZXYvbnVsbCk7IHRoZW4KICBleHBvcnRWYXJpYWJsZXMKZWxzZQogIG1haW4KZmk7CmlmIFsgIiRTRVRYIiAtZXEgMSBdOyB0aGVuIHNldCAreDsgZmk='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
