#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfTVVTVF9TUEVDSUZZX0FERFJFU1M9IkRlYmVzIGVzcGVjaWZpY2FyIHVuYSBkaXJlY2Npw7NuIGNvbiBlbCBwYXLDoW1ldHJvIgpJTkRFTlRfU1RSSU5HPSIiClNFVFg9MApfQUREUkVTUz0iIgpfTUFYX0FUVEVNUFRTPTQwCl9TTEVFUD0xCl9QUklOVEZfQkVUV0VFTl9TTEVFUFM9IiIKX0lOU0VDVVJFPSIiCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvXy91dGlsL3RjcC9jaGVjay1hZGRyZXNzLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gWy1rXSBbLWEgQUREUkVTU10gWy1tIE1BWF9BVFRFTVBUU10gWy1zIFNFQ09ORFNdIFstcCBQUklOVF9CRVRXRUVOX1NMRUVQU10KCiAgQ29tcHJ1ZWJhIHNpIHVuYSBkaXJlY2Npw7NuIFRDUCBlc3TDoSBvcGVyYXRpdmEgbWVkaWFudGUgSFRUUCB1c2FuZG8gY3VybC4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC0tc2V0LXggICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRzIHRoZSAteCBvcHRpb24gaW4gQmFzaCB0byBwcmludCBvdXQgdGhlIHN0YXRlbWVudHMgYXMgdGhleSBhcmUgYmVpbmcgZXhlY3V0ZWQuIFVzZWZ1bCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgogIC1hIEFERFJFU1MsIC0tYWRkcmVzcyBBRERSRVNTICAgICBVUkwgdG8gY2hlY2sgaWYgaXQgaXMgb3BlcmF0aXZlLgogIC1tIEFUVEVNUFRTLCAtLW1heC1hdHRlbXB0cyBBVFRFTVBUUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXhpbXVtIG51bWJlciBvZiBhdHRlbXBzIGNoZWNraW5nIGlmIHRoZSBwcm92aWRlZCBhZGRyZXNzIGlzIG9wZXJhdGl2ZS4gQXMgZGVmYXVsdCA0MC4KICAtcyBTRUNPTkRTLCAtLXNsZWVwIFNFQ09ORFMgICAgICAgTnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdCBiZXR3ZWVuIGF0dGVtcHRzLiBBcyBkZWZhdWx0IDEuCiAgLXAsIC0tcHJpbnQtYmV0d2Vlbi1zbGVlcHMgICAgICAgIFN0cmluZyBvdXRwdXR0ZWQgcGFzc2luZyBpdCB0byBwcmludGYgYmV0d2VlbiBhdHRlbXBzIChiZWZvcmUgd2FpdCkuCiAgLWssIC0taW5zZWN1cmUgICAgICAgICAgICAgICAgICAgIFBlcmZvcm0gaW5zZWN1cmUgU1NMIGNvbm5lY3Rpb24gKHBhc3NlcyB0aGUgb3B0aW9uICctLWluc2VjdXJlJyB0byB0aGUgY3VybCBjb21tYW5kKS4KCkhFTFBfVVNBR0UKICAgIGV4aXQgMQp9CmZvciBhcmcgaW4gIiRAIjsgZG8KICBjYXNlICRhcmcgaW4KICAgIC1pfC0taW5kZW50KQogICAgSU5ERU5UX1NUUklORz0iJDIiCiAgICBzaGlmdCAyCiAgICA7OwogICAgLWh8LS1oZWxwKQogICAgc2hpZnQKICAgIHVzYWdlCiAgICA7OyAgICAtLXNldC14KQogICAgU0VUWD0xCiAgICBzaGlmdAogICAgOzsgICAgCiAgICAtYXwtLWFkZHJlc3MpCiAgICBzaGlmdAogICAgX0FERFJFU1M9JDEKICAgIHNoaWZ0CiAgICA7OwogICAgLW18LS1tYXgtYXR0ZW1wdHMpCiAgICBzaGlmdAogICAgX01BWF9BVFRFTVBUUz0kMQogICAgc2hpZnQKICAgIDs7CiAgICAtc3wtLXNsZWVwKQogICAgc2hpZnQKICAgIF9TTEVFUD0kMQogICAgc2hpZnQKICAgIDs7CiAgICAtcHwtLXByaW50LWJldHdlZW4tc2xlZXBzKQogICAgc2hpZnQKICAgIF9QUklOVEZfQkVUV0VFTl9TTEVFUFM9JDEKICAgIHNoaWZ0CiAgICA7OwogICAgLS1pbnNlY3VyZSkKICAgIF9JTlNFQ1VSRT0iLS1pbnNlY3VyZSIKICAgIHNoaWZ0CiAgICA7OwogIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KaWYgWyAiJFNFVFgiIC1lcSAxIF07IHRoZW4gc2V0IC14OyBmaQpmdW5jdGlvbiBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQoKSB7CiAgaWYgWyAiJChjb21tYW5kIC12IHBhY21hbikiID0gIiIgXTsgdGhlbgogICAgdXJsPSJodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vZG93bmxvYWQvcGFjYXB0LyRfU0NSSVBUX0ZJTEVOQU1FIgogICAgY3VybCAtc0wgIiR1cmwiIHwgc3VkbyBiYXNoIC0gPiAvZGV2L251bGwKICBmaTsKfQpmdW5jdGlvbiBpbnN0YWxsU2NyaXB0RGVwZW5kZW5jaWVzKCkgewogIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZAogIGlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSBjdXJsIDI+IC9kZXYvbnVsbCB8IGdyZXAgU3RhdHVzKSIgIT0gIlN0YXR1czogaW5zdGFsbCBvayBpbnN0YWxsZWQiIF1dOyB0aGVuCiAgICBzdWRvIHBhY21hbiAtUyAtLSAteSBjdXJsID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICBmaTsKfQpmdW5jdGlvbiBtYWluKCkgewogIGlmIFsgLXogIiRfQUREUkVTUyIgXTsgdGhlbgogICAgcHJpbnRJbmRlbnQgPiYyCiAgICBwcmludGYgIiVzIC0tYWRkcmVzcyIgIiRfTVNHX01VU1RfU1BFQ0lGWV9BRERSRVNTIiA+JjIKICAgIGV4aXQgMQogIGZpOwogIGluc3RhbGxTY3JpcHREZXBlbmRlbmNpZXMKICB1bnRpbCBjdXJsIC1zTCAtLW91dHB1dCAvZGV2L251bGwgIiRfSU5TRUNVUkUiIC0taGVhZCAtLWZhaWwgIiRfQUREUkVTUyI7IGRvCiAgICBwcmludGYgIiVzIiAiJF9QUklOVEZfQkVUV0VFTl9TTEVFUFMiCiAgICBzbGVlcCAiJF9TTEVFUCIKICAgIF9BVFRFTVBUUz0iJCgoIiRfQVRURU1QVFMiICsgMSkpIgogICAgaWYgWyAiJF9BVFRFTVBUUyIgLWd0ICIkX01BWF9BVFRFTVBUUyIgXTsgdGhlbgogICAgICBleGl0IDEKICAgIGZpOwogIGRvbmUKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOwppZiBbICIkU0VUWCIgLWVxIDEgXTsgdGhlbiBzZXQgK3g7IGZp'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
