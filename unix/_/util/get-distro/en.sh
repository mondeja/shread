#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfTVVTVF9CRV9TT1VSQ0VEPSJUaGlzIHNjcmlwdCBtdXN0IGJlIGV4ZWN1dGVkIHdpdGggJ3NvdXJjZScuIgpJTkRFTlRfU1RSSU5HPSIiClNFVFg9MApmdW5jdGlvbiB1c2FnZSB7CiAgICBjYXQgPDxIRUxQX1VTQUdFClVzYWdlOiB1bml4L18vdXRpbC9nZXQtZGlzdHJvLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gCgogIEV4cG9zZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGRpc3RpYnV0aW9uIG9mIHRoZSBzeXN0ZW0uIFRoaXMgc2NyaXB0IG11c3QgYmUgc291cmNlZC4KICBZb3UgY2FuIGNoZWNrIHRoZSBpbmZvcm1hdGlvbiBvZiB0aGUgZGlzdHJpYnV0aW9uIGluIHRoZSBuZXh0IGV4cG9zZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzOgoKICAtICdVTklYX0RJU1RSTyc6IExvd2VyY2FzZWQgZGlzdHJpYnV0aW9uIGlkZW50aWZpY2F0b3IgbmFtZS4gRm9yIGV4YW1wbGU6ICd1YnVudHUnLgogIC0gJ1VOSVhfRElTVFJPX0NBUElUQUxJWkVEJzogQ2FwaXRhbGl6ZWQgZGlzdHJpYnV0aW9uIGlkZW50aWZpY2F0b3IgbmFtZS4gRm9yIGV4YW1wbGU6ICdVYnVudHUnLgogIC0gJ1VOSVhfRElTVFJPX1ZFUlNJT05fTkFNRSc6IExvd2VyY2FzZWQgZGlzdHJpYnV0aW9uIHZlcnNpb24gbmFtZS4gRm9yIGV4YW1wbGU6ICdmb2NhbCcuCiAgLSAnVU5JWF9ESVNUUk9fVkVSU0lPTl9OVU1CRVInOiBEZXN0cmlidXRpb24gdmVyc2lvbiBudW1iZXIuIEZvciBleGFtcGxlOiAnMjAuMDQnLgogIC0gJ1VOSVhfRElTVFJPX1ZFUlNJT05fTlVNQkVSX01BSk9SJzogRGlzdHJpYnV0aW9uIG1ham9yIHZlcnNpb24gbnVtYmVyLiBGb3IgZXhhbXBsZTogJzIwJy4KICAtICdVTklYX0RJU1RST19WRVJTSU9OX05VTUJFUl9NSU5PUic6IERpc3RyaWJ1dGlvbiBtaW5vciB2ZXJzaW9uIG51bWJlci4gRm9yIGV4YW1wbGU6ICcwNCcuCgpPcHRpb25zOgogIC1oLCAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0LgogIC1pIFNUUklORywgLS1pbmRlbnQgU1RSSU5HICAgICAgICBFYWNoIGxpbmUgb2YgdGhlIHNjcmlwdCBvdXRwdXQgd2lsbCBiZSBwcmVjZWRlZCB3aXRoIHRoZSBzdHJpbmcgZGVmaW5lZCBpbiB0aGlzIHBhcmFtZXRlci4KICAtLXNldC14ICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0cyB0aGUgLXggb3B0aW9uIGluIEJhc2ggdG8gcHJpbnQgb3V0IHRoZSBzdGF0ZW1lbnRzIGFzIHRoZXkgYXJlIGJlaW5nIGV4ZWN1dGVkLiBVc2VmdWwgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy4KSEVMUF9VU0FHRQogICAgZXhpdCAxCn0KZm9yIGFyZyBpbiAiJEAiOyBkbwogIGNhc2UgJGFyZyBpbgogICAgLWl8LS1pbmRlbnQpCiAgICBJTkRFTlRfU1RSSU5HPSIkMiIKICAgIHNoaWZ0IDIKICAgIDs7CiAgICAtaHwtLWhlbHApCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7ICAgIC0tc2V0LXgpCiAgICBTRVRYPTEKICAgIHNoaWZ0CiAgICA7OyAgICAgIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KaWYgWyAiJFNFVFgiIC1lcSAxIF07IHRoZW4gc2V0IC14OyBmaQpmdW5jdGlvbiBleHBvcnRWYXJpYWJsZXMgewogIGlmIFsgIiQoY29tbWFuZCAtdiBsc2JfcmVsZWFzZSkiID0gIiIgXTsgdGhlbgogICAgc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgLXFxcSBsc2ItcmVsZWFzZSA+IC9kZXYvbnVsbAogIGZpOwogIGlmIFsgLWYgL2V0Yy9sc2ItcmVsZWFzZSBdIHx8IFsgLWQgL2V0Yy9sc2ItcmVsZWFzZS5kIF07IHRoZW4KICAgIFVOSVhfRElTVFJPPSQobHNiX3JlbGVhc2UgLWkgfCBjdXQgLWQ6IC1mMiB8IHNlZCBzLydeXHQnLy8pCiAgZWxzZQogICAgVU5JWF9ESVNUUk89JChscyAtZCAvZXRjL1tBLVphLXpdKltfLV1bcnZdZVtscl0qIHwgZ3JlcCAtdiAibHNiIiB8IGN1dCAtZCcvJyAtZjMgfCBjdXQgLWQnLScgLWYxIHwgY3V0IC1kJ18nIC1mMSkKICBmaQogIGlmIFsgIiQoZWNobyAiJFVOSVhfRElTVFJPIiB8IGhlYWQgLW4gMSkiID0gImRlYmlhbiIgXTsgdGhlbgogICAgVU5JWF9ESVNUUk89ImRlYmlhbiIKICBlbGlmIFsgIiRVTklYX0RJU1RSTyIgPSAiVWJ1bnR1IiBdOyB0aGVuCiAgICBVTklYX0RJU1RSTz0idWJ1bnR1IgogIGZpOwogIFVOSVhfRElTVFJPX1ZFUlNJT05fTkFNRT0iJChsc2JfcmVsZWFzZSAtY3MpIgogIFVOSVhfRElTVFJPX1ZFUlNJT05fTlVNQkVSPSIkKGxzYl9yZWxlYXNlIC1ycykiCiAgVU5JWF9ESVNUUk9fVkVSU0lPTl9OVU1CRVJfTUFKT1I9JCgKICAgIHByaW50ZiAiJXMiICIkVU5JWF9ESVNUUk9fVkVSU0lPTl9OVU1CRVIiIHwgY3V0IC1kJy4nIC1mMSkKICBVTklYX0RJU1RST19WRVJTSU9OX05VTUJFUl9NSU5PUj0iIgogIGlmIFtbICRVTklYX0RJU1RST19WRVJTSU9OX05VTUJFUiA9PSAqIi4iKiBdXTsgdGhlbgogICAgVU5JWF9ESVNUUk9fVkVSU0lPTl9OVU1CRVJfTUlOT1I9JCgKICAgICAgcHJpbnRmICIlcyIgIiRVTklYX0RJU1RST19WRVJTSU9OX05VTUJFUiIgfCBjdXQgLWQnLicgLWYyKQogIGZpOwogIFVOSVhfRElTVFJPX0NBUElUQUxJWkVEPSIkKHRyICdbOmxvd2VyOl0nICdbOnVwcGVyOl0nIDw8PCAke1VOSVhfRElTVFJPOjA6MX0pJHtVTklYX0RJU1RSTzoxfSIKICBleHBvcnQgVU5JWF9ESVNUUk8KICBleHBvcnQgVU5JWF9ESVNUUk9fQ0FQSVRBTElaRUQKICBleHBvcnQgVU5JWF9ESVNUUk9fVkVSU0lPTl9OQU1FCiAgZXhwb3J0IFVOSVhfRElTVFJPX1ZFUlNJT05fTlVNQkVSCiAgZXhwb3J0IFVOSVhfRElTVFJPX1ZFUlNJT05fTlVNQkVSX01BSk9SCiAgZXhwb3J0IFVOSVhfRElTVFJPX1ZFUlNJT05fTlVNQkVSX01JTk9SCn0KZnVuY3Rpb24gbWFpbigpIHsKICBwcmludGYgIiVzXG4iICIkX01TR19NVVNUX0JFX1NPVVJDRUQiID4mMgogIGV4aXQgMQp9CmlmIChyZXR1cm4gMCAyPi9kZXYvbnVsbCk7IHRoZW4KICBleHBvcnRWYXJpYWJsZXMKZWxzZQogIG1haW4KZmk7CmlmIFsgIiRTRVRYIiAtZXEgMSBdOyB0aGVuIHNldCAreDsgZmk='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
