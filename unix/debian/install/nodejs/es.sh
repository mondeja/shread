#!/bin/bash
source <(printf 'IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfTVNHX0VYRUNVVEVEX0FTX1NVUEVSVVNFUj0iRXN0ZSBzY3JpcHQgbmVjZXNpdGEgc2VyIGVqZWN1dGFkbyBjb21vIHN1cGVydXN1YXJpby4iCl9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNPSJDb25maWd1cmFuZG8gZWNvc2lzdGVtYSBOb2RlSlMuLi4iCl9NU0dfQ0hFQ0tJTkdfQkFTRV9ERVBTPSJDb21wcm9iYW5kbyBkZXBlbmRlbmNpYXMgYmFzZS4uLiIKX01TR19SRVRSSUVWSU5HX0xBU1RfTk9ERUpTX0FCU09MVVRFX1ZFUlNJT049Ik9idGVuaWVuZG8gw7psdGltYSB2ZXJzacOzbiBhYnNvbHV0YSBkZSBOb2RlSlMuLi4iCl9NU0dfVEhFX1ZFUlNJT049IkxhIHZlcnNpw7NuIgpfTVNHX0hBU19OT1RfQkVFTl9GT1VORF9JTl9PRkZJQ0lBTF9OT0RFSlNfUkVQT1M9Im5vIGhhIHNpZG8gZW5jb250cmFkYSBlbiBsb3MgcmVwb3NpdG9yaW9zIG9maWNpYWxlcyBkZSBOb2RlSlMiCl9NU0dfSU5TVEFMTElOR19OT0RFSlM9Ikluc3RhbGFuZG8gTm9kZUpTIgpfTVNHX0VSUk9SX0lOU1RBTExJTkdfTk9ERUpTPSJPY3VycmnDsyB1biBlcnJvciBpbnN0YWxhbmRvIE5vZGVKUyIKX01TR19FUlJPUl9DT0RFPSJDw7NkaWdvIGRlIGVycm9yIgpfTVNHX0ZPVU5EX05PREVKU19JTlNUQUxMRUQ9IkVuY29udHJhZG8gTm9kZUpTIGluc3RhbGFkbyBlbiBlbCBzaXN0ZW1hIgpfTVNHX0RJU1RSSUJVVElPTl9OT1RfU1VQUE9SVEVEPSJUdSBkaXN0cmlidWNpw7NuIG5vIGVzdMOhIHNvcG9ydGFkYSBwb3IgZXN0ZSBzY3JpcHQgZGUgaW5zdGFsYWNpw7NuIGRlIE5vZGVKUyIKX01TR19DSEVDS0lOR19OUE09IkNvbXByb2JhbmRvIE5QTS4uLiIKX01TR19JVFNfSU5TVEFMTEVEPSJFc3TDoSBpbnN0YWxhZG8iCl9NU0dfVVBEQVRJTkc9IkFjdHVhbGl6YW5kbyIKX01TR19FUlJPUl9VUERBVElOR19OUE09Ik9jdXJyacOzIHVuIGVycm9yIGFjdHVhbGl6YW5kbyBOUE0gYSBsYSB2ZXJzacOzbiIKX01TR19JVFNfVVBEQVRFRD0iRXN0w6EgYWN0dWFsaXphZG8iCl9NU0dfQ0hFQ0tJTkdfWUFSTj0iQ29tcHJvYmFuZG8gWWFybi4uLiIKaWYgW1sgJCgvdXNyL2Jpbi9pZCAtdSkgLW5lIDAgXV07IHRoZW4KICBwcmludGYgIiVzXG4iICIkX01TR19FWEVDVVRFRF9BU19TVVBFUlVTRVIiID4mMgogIGV4aXQgMQpmaTsKX1ZFUlNJT049IiIKSU5ERU5UX1NUUklORz0iIgpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtLXZlcnNpb24pCiAgICBzaGlmdAogICAgX1ZFUlNJT049JDEKICAgIHNoaWZ0CiAgICA7OwogICAgLS1pbmRlbnQpCiAgICBzaGlmdAogICAgSU5ERU5UX1NUUklORz0kMQogICAgc2hpZnQKICAgIDs7CiAgZXNhYwpkb25lCmZ1bmN0aW9uIHByaW50SW5kZW50KCkgewogIHByaW50ZiAiJXMiICIkSU5ERU5UX1NUUklORyIKfQppZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgU0NSSVBUX0ZJTEVOQU1FPSIkKGJhc2VuYW1lICIkMCIpIgogIGlmIFsgIiRTQ1JJUFRfRklMRU5BTUUiID0gIm1haW4uc2giIF07IHRoZW4KICAgIGZpbGVwYXRoPSJzcmMvdW5peC9fL2Rvd25sb2FkL3BhY2FwdC9tYWluLnNoIgogICAgYmFzaCAiJGZpbGVwYXRoIiA+IC9kZXYvbnVsbAogIGVsc2UKICAgIHVybD0iaHR0cHM6Ly9tb25kZWphLmdpdGh1Yi5pby9zaHJlYWQvdW5peC9fL2Rvd25sb2FkL3BhY2FwdC8kU0NSSVBUX0ZJTEVOQU1FIgogICAgY3VybCAtc0wgIiR1cmwiIHwgc3VkbyBiYXNoIC0gPiAvZGV2L251bGwKICBmaTsKZmk7CklOU1RBTExBVElPTl9ERVBFTkRFTkNJRVM9KAogICJjdXJsIgogICJkZWJjb25mLXV0aWxzIgopCmZvciBERVAgaW4gIiR7SU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFU1tAXX0iOyBkbwogIGlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSAiJERFUCIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgIHN1ZG8gcGFjbWFuIC1TICIkREVQIiA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgZmk7CmRvbmU7CmlmIFsgLXogIiRVTklYX0RJU1RSTyIgXTsgdGhlbgogIHNvdXJjZSA8KGN1cmwgLXNMIGh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy91dGlsL2dldC1kaXN0cm8vZW4uc2gpCmZpOwppZiBbICIkKGNvbW1hbmQgLXYgZGViY29uZi1nZXQtc2VsZWN0aW9ucykiICE9ICIiIF07IHRoZW4KICBfT1JJR0lOQUxfREVCQ09ORl9GUk9OVEVORD0kKAogICAgc3VkbyBkZWJjb25mLWdldC1zZWxlY3Rpb25zIHwgXAogICAgZ3JlcCBkZWJjb25mL2Zyb250ZW5kIHwgXAogICAgYXdrICd7cHJpbnQgJDR9JykKICBzdWRvIHNoIC1jICJlY2hvICdkZWJjb25mIGRlYmNvbmYvZnJvbnRlbmQgc2VsZWN0IE5vbmludGVyYWN0aXZlJyB8IGRlYmNvbmYtc2V0LXNlbGVjdGlvbnMiCmZpOwpDSEVDS19DVVJSRU5UX05PREVKU19TVEFCTEVfVkVSU0lPTl9VUkw9Imh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9TSEFTVU1TMjU2LnR4dCIKTEFURVNUX05PREVKU19NQUpPUl9WRVJTSU9OPTEzCk5PREVKU19WRVJTSU9OX1RPX0lOU1RBTEw9IiRMQVRFU1RfSEFSRENPREVEX05PREVKU19WRVJTSU9OIgppZiBbICIkVU5JWF9ESVNUUk8iID0gInVidW50dSIgXSB8fCBbICIkVU5JWF9ESVNUUk8iID0gImRlYmlhbiIgXTsgdGhlbgogIHByaW50SW5kZW50CiAgcHJpbnRmICIlc1xuIiAiJF9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNIgogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzXG4iICIkX01TR19DSEVDS0lOR19CQVNFX0RFUFMiCiAgSU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFUz0oCiAgICAiYnVpbGQtZXNzZW50aWFsIgogICAgImdjYyIKICAgICJnKysiCiAgICAibWFrZSIKICAgICJhcHQtdHJhbnNwb3J0LWh0dHBzIgogICAgImxzYi1yZWxlYXNlIgogICAgImN1cmwiCiAgICAiZ251cGciCiAgKQogIGZvciBERVAgaW4gIiR7SU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFU1tAXX0iOyBkbwogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAgICVzIiAiJERFUCIKICAgIGlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSAiJERFUCIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgICAgc3VkbyBwYWNtYW4gLVMgIiRERVAiID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICAgIGZpOwogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZG9uZQogIHByaW50SW5kZW50CglpZiBbICIkKHN1ZG8gcGFjbWFuIC1RaSBub2RlanMgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXTsgdGhlbgogICAgTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTD0iIgogICAgTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTF9NQUpPUj0iIgogICAgaWYgWyAiJF9WRVJTSU9OIiA9ICIiIF07IHRoZW4KICAgICAgcHJpbnRmICIgICVzIiAiJF9NU0dfUkVUUklFVklOR19MQVNUX05PREVKU19BQlNPTFVURV9WRVJTSU9OIgogICAgICBMQVRFU1RfTk9ERUpTX1ZFUlNJT049JChjdXJsIC1zICIkQ0hFQ0tfQ1VSUkVOVF9OT0RFSlNfU1RBQkxFX1ZFUlNJT05fVVJMIiB8IFwKICAgICAgICBoZWFkIC1uIDEgfCBcCiAgICAgICAgY3V0IC1kIiAiIC1mMyB8IFwKICAgICAgICBjdXQgLWQiLSIgLWYyIHwgXAogICAgICAgIGN1dCAtZCJ2IiAtZjIpCiAgICAgIExBVEVTVF9OT0RFSlNfTUFKT1JfVkVSU0lPTj0iJChlY2hvICIkTEFURVNUX05PREVKU19WRVJTSU9OIiB8IGN1dCAtZCIuIiAtZjEpIgogICAgICByZT0nXlswLTldKyQnCiAgICAgIGlmIFtbICRMQVRFU1RfTk9ERUpTX01BSk9SX1ZFUlNJT04gPX4gJHJlIF1dOyB0aGVuCiAgICAgICAgdXJsPSJodHRwczovL2RlYi5ub2Rlc291cmNlLmNvbS9zZXR1cF8kTEFURVNUX05PREVKU19NQUpPUl9WRVJTSU9OLngiCiAgICAgICAgaWYgY3VybCAtLW91dHB1dCAvZGV2L251bGwgLS1zaWxlbnQgLS1mYWlsIC1yIDAtMCAiJHVybCI7IHRoZW4KICAgICAgICAgIE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTEw9JExBVEVTVF9OT0RFSlNfVkVSU0lPTgogICAgICAgICAgTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTF9NQUpPUj0kTEFURVNUX05PREVKU19NQUpPUl9WRVJTSU9OCiAgICAgICAgZmk7CiAgICAgICAgcHJpbnRmICIgKHYlcykgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iICIkTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTCIKICAgICAgZmk7CiAgICBlbHNlCiAgICAgIHVybD0iaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvdiRfVkVSU0lPTiIKICAgICAgaWYgISBjdXJsIC0tb3V0cHV0IC9kZXYvbnVsbCAtLXNpbGVudCAtLWZhaWwgLXIgMC0wICIkdXJsIjsgdGhlbgogICAgICAgIHByaW50ZiAiXG4lcyAlczoiICIkX01TR19USEVfVkVSU0lPTiAkX1ZFUlNJT04iICIkX01TR19IQVNfTk9UX0JFRU5fRk9VTkRfSU5fT0ZGSUNJQUxfTk9ERUpTX1JFUE9TIiA+JjIKICAgICAgICBwcmludGYgIiBodHRwczovL25vZGVqcy5vcmcvZGlzdC92JXMgNDA0IiAiJF9WRVJTSU9OIiA+JjIKICAgICAgICBleGl0IDEKICAgICAgZmk7CiAgICAgIE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTExfTUFKT1I9IiQoZWNobyAiJF9WRVJTSU9OIiB8IGN1dCAtZCIuIiAtZjEpIgogICAgICBOT0RFSlNfVkVSU0lPTl9UT19JTlNUQUxMPSIkX1ZFUlNJT04iCiAgICBmaTsKICAgIHByaW50ZiAiICAlcyAodiVzKS4uLiIgIiRfTVNHX0lOU1RBTExJTkdfTk9ERUpTIiAiJE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTExfTUFKT1IiCgkJSU5TVEFMTF9OT0RFSlNfU1RERVJSPSQoCiAgICAgIGN1cmwgLXNMICJodHRwczovL2RlYi5ub2Rlc291cmNlLmNvbS9zZXR1cF8kTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTF9NQUpPUi54IiB8IFwKICAgICAgc3VkbyBiYXNoIFwKICAgICAgMj4mMSA+IC9kZXYvbnVsbCkKICAgIElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERT0kPwogICAgaWYgWyAkSU5TVEFMTF9OT0RFSlNfRVhJVF9DT0RFIC1uZSAwIF07IHRoZW4KICAgICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgICBwcmludGYgIlxuJXM6XG4gJXNcbiIgIiRfTVNHX0VSUk9SX0lOU1RBTExJTkdfTk9ERUpTIiAiJElOU1RBTExfTk9ERUpTX1NUREVSUiIgPiYyCiAgICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FUlJPUl9DT0RFIiAiJElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERSIgPiYyCiAgICAgIGV4aXQgJElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERQogICAgZmk7CiAgICBzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSAtcXFxIG5vZGVqcyA+IC9kZXYvbnVsbAoJZWxzZQogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfRk9VTkRfTk9ERUpTX0lOU1RBTExFRCIKCQlwcmludGYgIiAodiVzKSIgIiQobm9kZSAtdiB8IGN1dCAtYzItMTUpIgoJZmk7CiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCmVsc2UKICBwcmludGYgIiVzICglcykiICIkX01TR19ESVNUUklCVVRJT05fTk9UX1NVUFBPUlRFRCIgIiRVTklYX0RJU1RSTyIgPiYyCiAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogIGV4aXQgMQpmaTsKaWYgWyAtZCAiJEhPTUUvLmNvbmZpZyIgXTsgdGhlbgogIHN1ZG8gY2hvd24gLVIgIiRVU0VSOiQoaWQgLWduICIkVVNFUiIpIiAiJEhPTUUvLmNvbmZpZyIKZmk7CnByaW50SW5kZW50CnByaW50ZiAiICAlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfTlBNIgpwcmludEluZGVudApwcmludGYgIiAgICAlcyIgIiRfTVNHX0lUU19JTlNUQUxMRUQiCk5QTV9CSU5BUllfRklMRVBBVEg9IiQoY29tbWFuZCAtdiBucG0pIgppZiBbICIkTlBNX0JJTkFSWV9GSUxFUEFUSCIgIT0gIiIgXTsgdGhlbgogIE5QTV9MQVRFU1RfVkVSU0lPTj0iJChucG0gc2hvdyBucG0gZGlzdC10YWdzLmxhdGVzdCAtLWpzb24gfCBjdXQgLWQnIicgLWYyKSIKICBOUE1fSU5TVEFMTEVEX1ZFUlNJT049IiQobnBtIC0tdmVyc2lvbikiCiAgcHJpbnRmICIgKHYlcykgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iICIkTlBNX0lOU1RBTExFRF9WRVJTSU9OIgogIHByaW50SW5kZW50CiAgaWYgWyAiJE5QTV9MQVRFU1RfVkVSU0lPTiIgIT0gIiROUE1fSU5TVEFMTEVEX1ZFUlNJT04iIF07IHRoZW4KICAgIHByaW50ZiAiICAgICVzICh2JXMgLT4gdiVzKS4uLiIgIiRfTVNHX1VQREFUSU5HIiAiJE5QTV9JTlNUQUxMRURfVkVSU0lPTiIgIiROUE1fTEFURVNUX1ZFUlNJT04iCiAgICBOUE1fVVBEQVRFX1NUREVSUj0iJChzdWRvIG5wbSBpbnN0YWxsIC0tcXVpZXQgLS1zaWxlbnQgLS1uby1wcm9ncmVzcyAtZyBucG1AbGF0ZXN0IDI+JjEgPiAvZGV2L251bGwpIgogICAgTlBNX1VQREFURV9FWElUX0NPREU9JD8KICAgIGlmIFsgIiROUE1fVVBEQVRFX1NUREVSUiIgIT0gIiIgXTsgdGhlbgogICAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICAgIHByaW50ZiAiXG4lczpcbiIgIiRfTVNHX0VSUk9SX1VQREFUSU5HX05QTSAkTlBNX0xBVEVTVF9WRVJTSU9OIiA+JjIKICAgICAgcHJpbnRmICIlcyIgIiROUE1fVVBEQVRFX1NUREVSUiIgPiYyCiAgICAgIGV4aXQgJE5QTV9VUERBVEVfRVhJVF9DT0RFCiAgICBmaTsKICBlbHNlCiAgICBwcmludGYgIiAgICAlcyIgIiRfTVNHX0lUU19VUERBVEVEIgogIGZpOwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgplbHNlCiAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgpmaTsKVVNFUl9IT01FPSIkKGdldGVudCBwYXNzd2QgIiRTVURPX1VTRVIiIHwgY3V0IC1kOiAtZjYpIgpmdW5jdGlvbiBpbnN0YWxsT3JVcGRhdGVZYXJuKCkgewogIHN1ZG8gcm0gLXJmICIkVVNFUl9IT01FLy55YXJuIgogIF89JCgKICAgIGN1cmwgLXNMIGh0dHBzOi8veWFybnBrZy5jb20vaW5zdGFsbC5zaCB8IFwKICAgIHN1ZG8gLXUgIiRTVURPX1VTRVIiIC9iaW4vYmFzaCAtIFwKICAgIDI+JjEgPiAvZGV2L251bGwKICApCiAgaWYgWyAtZiAiJEhPTUUvLmJhc2hyYyIgXTsgdGhlbgogICAgc291cmNlICIkSE9NRS8uYmFzaHJjIgogIGZpOwp9CnByaW50SW5kZW50CnByaW50ZiAiICAlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfWUFSTiIKcHJpbnRJbmRlbnQKcHJpbnRmICIgICAgJXMiICIkX01TR19JVFNfSU5TVEFMTEVEIgpZQVJOX0JJTkFSWV9GSUxFUEFUSD0iJFVTRVJfSE9NRS8ueWFybi9iaW4veWFybiIKaWYgWyAhIC1mICIkWUFSTl9CSU5BUllfRklMRVBBVEgiIF07IHRoZW4KICBpbnN0YWxsT3JVcGRhdGVZYXJuCmZpOwpZQVJOX0xBVEVTVF9WRVJTSU9OPSQobnBtIHNob3cgeWFybiBkaXN0LXRhZ3MubGF0ZXN0IC0tanNvbiB8IGN1dCAtZCciJyAtZjIpCllBUk5fSU5TVEFMTEVEX1ZFUlNJT049JCgkWUFSTl9CSU5BUllfRklMRVBBVEggLS12ZXJzaW9uKQpwcmludGYgIiAodiVzKSBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIgIiRZQVJOX0lOU1RBTExFRF9WRVJTSU9OIgpwcmludEluZGVudAppZiBbICIkWUFSTl9MQVRFU1RfVkVSU0lPTiIgPSAiJFlBUk5fSU5TVEFMTEVEX1ZFUlNJT04iIF07IHRoZW4KICBwcmludGYgIiAgICAlcyBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIgIiRfTVNHX0lUU19VUERBVEVEIgplbHNlCiAgcHJpbnRmICIgICAgJXMgKHYlcyAtPiB2JXMpLi4uIiAiJF9NU0dfVVBEQVRJTkciICIkWUFSTl9JTlNUQUxMRURfVkVSU0lPTiIgIiRZQVJOX0xBVEVTVF9WRVJTSU9OIgogIGluc3RhbGxPclVwZGF0ZVlhcm4KICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKZmk7CmlmIFsgIiQoY29tbWFuZCAtdiBkZWJjb25mLWdldC1zZWxlY3Rpb25zKSIgIT0gIiIgXTsgdGhlbgogIHN1ZG8gc2ggLWMgImVjaG8gJ2RlYmNvbmYgZGViY29uZi9mcm9udGVuZCBzZWxlY3QgJF9PUklHSU5BTF9ERUJDT05GX0ZST05URU5EJyB8IGRlYmNvbmYtc2V0LXNlbGVjdGlvbnMiCmZpOwo=' | base64 -d)
