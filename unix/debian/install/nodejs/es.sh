#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNPSJDb25maWd1cmFuZG8gZWNvc2lzdGVtYSBOb2RlSlMuLi4iCl9NU0dfQ0hFQ0tJTkdfQkFTRV9ERVBTPSJDb21wcm9iYW5kbyBkZXBlbmRlbmNpYXMgYmFzZS4uLiIKX01TR19SRVRSSUVWSU5HX0xBU1RfTk9ERUpTX0FCU09MVVRFX1ZFUlNJT049Ik9idGVuaWVuZG8gw7psdGltYSB2ZXJzacOzbiBhYnNvbHV0YSBkZSBOb2RlSlMuLi4iCl9NU0dfSU5TVEFMTElOR19OT0RFSlM9Ikluc3RhbGFuZG8gTm9kZUpTIgpfTVNHX0VSUk9SX0lOU1RBTExJTkdfTk9ERUpTPSJPY3VycmnDsyB1biBlcnJvciBpbnN0YWxhbmRvIE5vZGVKUyIKX01TR19FUlJPUl9DT0RFPSJDw7NkaWdvIGRlIGVycm9yIgpfTVNHX0ZPVU5EX05PREVKU19JTlNUQUxMRUQ9IkVuY29udHJhZG8gTm9kZUpTIGluc3RhbGFkbyBlbiBlbCBzaXN0ZW1hIgpfTVNHX0RJU1RSSUJVVElPTl9OT1RfU1VQUE9SVEVEPSJUdSBkaXN0cmlidWNpw7NuIG5vIGVzdMOhIHNvcG9ydGFkYSBwb3IgZXN0ZSBzY3JpcHQgZGUgaW5zdGFsYWNpw7NuIGRlIE5vZGVKUyIKSU5ERU5UX1NUUklORz0iIgpfVkVSU0lPTj0iIgpmdW5jdGlvbiB1c2FnZSB7CiAgICBjYXQgPDxIRUxQX1VTQUdFClVzYWdlOiB1bml4L2RlYmlhbi9pbnN0YWxsL25vZGVqcy8kX1NDUklQVF9GSUxFTkFNRSBbLWhdIFstaSBTVFJJTkddIFstdiBWRVJTSU9OXQoKICBJbnN0YWxscyBhIE5vZGVKUyB2ZXJzaW9uIHVzaW5nICdnaXRodWIuY29tL25vZGVzb3VyY2UvZGlzdHJpYnV0aW9ucycgcmVwb3NpdG9yaWVzIGFzIHNvdXJjZS4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC12IFZFUlNJT04sIC0tdmVyc2lvbiBWRVJTSU9OICAgICBNYWpvciB2ZXJzaW9uIG9mIE5vZGVKUyB0byBpbnN0YWxsIG9yIHVwZGF0ZSB0by4gQXMgZGVmYXVsdCB0aGUgbGF0ZXN0IHZlcnNpb24gYXZhaWxhYmxlLgoKSEVMUF9VU0FHRQogICAgZXhpdCAxCn0KZm9yIGFyZyBpbiAiJEAiOyBkbwogIGNhc2UgJGFyZyBpbgogICAgLWl8LS1pbmRlbnQpCiAgICBzaGlmdAogICAgSU5ERU5UX1NUUklORz0iJDEiCiAgICBzaGlmdAogICAgOzsKICAgIC1ofC0taGVscCkKICAgIHNoaWZ0CiAgICB1c2FnZQogICAgOzsgICAgCiAgICAtdnwtLXZlcnNpb24pCiAgICBzaGlmdAogICAgX1ZFUlNJT049JDEKICAgIHNoaWZ0CiAgICA7OwogIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KZnVuY3Rpb24gaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkKCkgewogIGlmIFsgIiQoY29tbWFuZCAtdiBwYWNtYW4pIiA9ICIiIF07IHRoZW4KICAgIHVybD0iaHR0cHM6Ly9tb25kZWphLmdpdGh1Yi5pby9zaHJlYWQvdW5peC9fL2Rvd25sb2FkL3BhY2FwdC8kX1NDUklQVF9GSUxFTkFNRSIKICAgIGN1cmwgLXNMICIkdXJsIiB8IHN1ZG8gYmFzaCAtID4gL2Rldi9udWxsCiAgZmk7Cn0KZnVuY3Rpb24gZ2V0VW5peERpc3RybygpIHsKICBpZiBbIC16ICIkVU5JWF9ESVNUUk8iIF07IHRoZW4KICAgIHNvdXJjZSA8KGN1cmwgLXNMIGh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy91dGlsL2dldC1kaXN0cm8vZW4uc2gpCiAgZmk7Cn0KZnVuY3Rpb24gY2hlY2tVbml4RGlzdHJvKCkgewogIGlmIFsgIiRVTklYX0RJU1RSTyIgIT0gInVidW50dSIgXSAmJiBbICIkVU5JWF9ESVNUUk8iICE9ICJkZWJpYW4iIF07IHRoZW4KICAgIHByaW50ZiAiJXMgKCVzKSIgIiRfTVNHX0RJU1RSSUJVVElPTl9OT1RfU1VQUE9SVEVEIiAiJFVOSVhfRElTVFJPIiA+JjIKICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgIGV4aXQgMQogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxJbnN0YWxsYXRpb25EZXBlbmRlbmNpZXMoKSB7CiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiAgJXNcbiIgIiRfTVNHX0NIRUNLSU5HX0JBU0VfREVQUyIKICBJTlNUQUxMQVRJT05fREVQRU5ERU5DSUVTPSgKICAgICJidWlsZC1lc3NlbnRpYWwiCiAgICAiZ2NjIgogICAgImcrKyIKICAgICJtYWtlIgogICAgImFwdC10cmFuc3BvcnQtaHR0cHMiCiAgICAibHNiLXJlbGVhc2UiCiAgICAiZ251cGciCiAgKQogIGZvciBERVAgaW4gIiR7SU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFU1tAXX0iOyBkbwogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAgICVzIiAiJERFUCIKICAgIGlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSAiJERFUCIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgICAgc3VkbyBwYWNtYW4gLVMgLS0gLXkgIiRERVAiID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICAgIGZpOwogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZG9uZQp9CkxBU1RfTk9ERUpTX1ZFUlNJT049IiIKZnVuY3Rpb24gcmV0cmlldmVMYXN0Tm9kZUpTVmVyc2lvbigpIHsKICBMQVNUX05PREVKU19WRVJTSU9OPSIkKAogICAgY3VybCAtc1NMIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9TSEFTVU1TMjU2LnR4dCAgICAgfCBoZWFkIC1uIDEgfCBjdXQgLWQnICcgLWYzIHwgY3V0IC1kJy0nIC1mMiB8IGN1dCAtZCd2JyAtZjIpIgp9CmZ1bmN0aW9uIGluc3RhbGxOb2RlSlMoKSB7CiAgaWYgWyAiJF9WRVJTSU9OIiA9ICIiIF07IHRoZW4KICAgIHByaW50ZiAiICAlcyIgIiRfTVNHX1JFVFJJRVZJTkdfTEFTVF9OT0RFSlNfQUJTT0xVVEVfVkVSU0lPTiIKICAgIHJldHJpZXZlTGFzdE5vZGVKU1ZlcnNpb24KICAgIE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTEw9IiRMQVNUX05PREVKU19WRVJTSU9OIgogICAgcHJpbnRmICIgKHYlcykgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iICIkTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTCIKICBlbHNlCiAgICBOT0RFSlNfVkVSU0lPTl9UT19JTlNUQUxMPSIkX1ZFUlNJT04iCiAgZmk7CiAgTk9ERUpTX01BSk9SX1ZFUlNJT05fVE9fSU5TVEFMTD0iJCgKICAgIGVjaG8gIiROT0RFSlNfVkVSU0lPTl9UT19JTlNUQUxMIiB8IGN1dCAtZCIuIiAtZjEpIgogIHByaW50ZiAiICAlcyAodiVzKS4uLiIgIiRfTVNHX0lOU1RBTExJTkdfTk9ERUpTIiAiJE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTEwiCiAgSU5TVEFMTF9OT0RFSlNfU1RERVJSPSQoCiAgICBjdXJsIC1zTCAiaHR0cHM6Ly9kZWIubm9kZXNvdXJjZS5jb20vc2V0dXBfJE5PREVKU19NQUpPUl9WRVJTSU9OX1RPX0lOU1RBTEwueCIgfCAgICAgc3VkbyBiYXNoICAgICAyPiYxID4gL2Rldi9udWxsKQogIElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERT0kPwogIGlmIFsgJElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERSAtbmUgMCBdOyB0aGVuCiAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBwcmludGYgIlxuJXM6XG4gJXNcbiIgIiRfTVNHX0VSUk9SX0lOU1RBTExJTkdfTk9ERUpTIiAiJElOU1RBTExfTk9ERUpTX1NUREVSUiIgPiYyCiAgICBwcmludGYgIiVzOiAlc1xuIiAiJF9NU0dfRVJST1JfQ09ERSIgIiRJTlNUQUxMX05PREVKU19FWElUX0NPREUiID4mMgogICAgZXhpdCAkSU5TVEFMTF9OT0RFSlNfRVhJVF9DT0RFCiAgZmk7CiAgc3VkbyBwYWNtYW4gLVMgLS0gLXkgbm9kZWpzID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICBpZiBbIC1kICIkSE9NRS8uY29uZmlnIiBdOyB0aGVuCiAgICBzdWRvIGNob3duIC1SICIkVVNFUjokKGlkIC1nbiAiJFVTRVIiKSIgIiRIT01FLy5jb25maWciCiAgZmk7CiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCn0KZnVuY3Rpb24gaW5zdGFsbE5vZGVKU0lmTm90SW5zdGFsbGVkKCkgewogIGlmIFsgIiQoc3VkbyBwYWNtYW4gLVFpIG5vZGVqcyAyPiAvZGV2L251bGwgfCBncmVwIFN0YXR1cykiID0gIlN0YXR1czogaW5zdGFsbCBvayBpbnN0YWxsZWQiIF0gfHwgWyAtbiAiJChjb21tYW5kIC12IG5vZGUpIiBdOyB0aGVuCiAgICBwcmludGYgIiAgJXMiICIkX01TR19GT1VORF9OT0RFSlNfSU5TVEFMTEVEIgogICAgcHJpbnRmICIgKHYlcykiICIkKG5vZGUgLXYgfCBjdXQgLWMyLTE1KSIKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogICAgZXhpdCAwCiAgZWxzZQogICAgaW5zdGFsbE5vZGVKUwogIGZpOwp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgc3VkbyBwcmludGYgIiIKICBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQKICBnZXRVbml4RGlzdHJvCiAgY2hlY2tVbml4RGlzdHJvCiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiVzXG4iICIkX01TR19TRVRUSU5HX1VQX05PREVKU19FQ09TWVNURU0iCiAgaW5zdGFsbEluc3RhbGxhdGlvbkRlcGVuZGVuY2llcwogIGluc3RhbGxOb2RlSlNJZk5vdEluc3RhbGxlZAp9CmlmIChyZXR1cm4gMCAyPi9kZXYvbnVsbCk7IHRoZW4KICBleHBvcnRWYXJpYWJsZXMKZWxzZQogIG1haW4KZmk7'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
