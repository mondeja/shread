#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNPSJDb25maWd1cmFuZG8gZWNvc2lzdGVtYSBOb2RlSlMuLi4iCl9NU0dfQ0hFQ0tJTkdfQkFTRV9ERVBTPSJDb21wcm9iYW5kbyBkZXBlbmRlbmNpYXMgYmFzZS4uLiIKX01TR19SRVRSSUVWSU5HX0xBU1RfTk9ERUpTX0FCU09MVVRFX1ZFUlNJT049Ik9idGVuaWVuZG8gw7psdGltYSB2ZXJzacOzbiBhYnNvbHV0YSBkZSBOb2RlSlMuLi4iCl9NU0dfSU5TVEFMTElOR19OT0RFSlM9Ikluc3RhbGFuZG8gTm9kZUpTIgpfTVNHX0VSUk9SX0lOU1RBTExJTkdfTk9ERUpTPSJPY3VycmnDsyB1biBlcnJvciBpbnN0YWxhbmRvIE5vZGVKUyIKX01TR19FUlJPUl9DT0RFPSJDw7NkaWdvIGRlIGVycm9yIgpfTVNHX0ZPVU5EX05PREVKU19JTlNUQUxMRUQ9IkVuY29udHJhZG8gTm9kZUpTIGluc3RhbGFkbyBlbiBlbCBzaXN0ZW1hIgpfTVNHX0RJU1RSSUJVVElPTl9OT1RfU1VQUE9SVEVEPSJUdSBkaXN0cmlidWNpw7NuIG5vIGVzdMOhIHNvcG9ydGFkYSBwb3IgZXN0ZSBzY3JpcHQgZGUgaW5zdGFsYWNpw7NuIGRlIE5vZGVKUyIKSU5ERU5UX1NUUklORz0iIgpfVkVSU0lPTj0iIgpmdW5jdGlvbiB1c2FnZSB7CiAgICBjYXQgPDxIRUxQX1VTQUdFClVzYWdlOiBzcmMvdW5peC9kZWJpYW4vaW5zdGFsbC9ub2RlanMgWy1oXSBbLWldIFstdiBWRVJTSU9OXQoKICBJbnN0YWxscyBhIE5vZGVKUyB2ZXJzaW9uIHVzaW5nICdnaXRodWIuY29tL25vZGVzb3VyY2UvZGlzdHJpYnV0aW9ucycgcmVwb3NpdG9yaWVzIGFzIHNvdXJjZS4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWksIC0taW5kZW50IFNUUklORyAgICAgICAgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC12IFZFUlNJT04sIC0tdmVyc2lvbiBWRVJTSU9OICAgICBNYWpvciB2ZXJzaW9uIG9mIE5vZGVKUyB0byBpbnN0YWxsIG9yIHVwZGF0ZSB0by4gQXMgZGVmYXVsdCB0aGUgbGF0ZXN0IHZlcnNpb24gYXZhaWxhYmxlLgoKSEVMUF9VU0FHRQogICAgZXhpdCAxCn0KZm9yIGFyZyBpbiAiJEAiOyBkbwogIGNhc2UgJGFyZyBpbgogICAgLWl8LS1pbmRlbnQpCiAgICBzaGlmdAogICAgSU5ERU5UX1NUUklORz0kMQogICAgc2hpZnQKICAgIDs7CiAgICAtaHwtLWhlbHApCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7CiAgICAtdnwtLXZlcnNpb24pCiAgICBzaGlmdAogICAgX1ZFUlNJT049JDEKICAgIHNoaWZ0CiAgICA7OwogIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KZnVuY3Rpb24gaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkKCkgewogIGlmIFsgIiQoY29tbWFuZCAtdiBwYWNtYW4pIiA9ICIiIF07IHRoZW4KICAgIGlmIFsgLXogIiRfU0NSSVBUX0ZJTEVOQU1FIiBdOyB0aGVuCiAgICAgIGZpbGVwYXRoPSJzcmMvdW5peC9fL2Rvd25sb2FkL3BhY2FwdC9tYWluLnNoIgogICAgICBiYXNoICIkZmlsZXBhdGgiID4gL2Rldi9udWxsCiAgICBlbHNlCiAgICAgIHVybD0iaHR0cHM6Ly9tb25kZWphLmdpdGh1Yi5pby9zaHJlYWQvdW5peC9fL2Rvd25sb2FkL3BhY2FwdC8kX1NDUklQVF9GSUxFTkFNRSIKICAgICAgY3VybCAtc0wgIiR1cmwiIHwgc3VkbyBiYXNoIC0gPiAvZGV2L251bGwKICAgIGZpOwogIGZpOwp9CmZ1bmN0aW9uIGdldFVuaXhEaXN0cm8oKSB7CiAgaWYgWyAteiAiJFVOSVhfRElTVFJPIiBdOyB0aGVuCiAgICBzb3VyY2UgPChjdXJsIC1zTCBodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vdXRpbC9nZXQtZGlzdHJvL2VuLnNoKQogIGZpOwp9CmZ1bmN0aW9uIGNoZWNrVW5peERpc3RybygpIHsKICBpZiBbICIkVU5JWF9ESVNUUk8iICE9ICJ1YnVudHUiIF0gJiYgWyAiJFVOSVhfRElTVFJPIiAhPSAiZGViaWFuIiBdOyB0aGVuCiAgICBwcmludGYgIiVzICglcykiICIkX01TR19ESVNUUklCVVRJT05fTk9UX1NVUFBPUlRFRCIgIiRVTklYX0RJU1RSTyIgPiYyCiAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBleGl0IDEKICBmaTsKfQpmdW5jdGlvbiBpbnN0YWxsSW5zdGFsbGF0aW9uRGVwZW5kZW5jaWVzKCkgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzXG4iICIkX01TR19DSEVDS0lOR19CQVNFX0RFUFMiCiAgSU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFUz0oCiAgICAiYnVpbGQtZXNzZW50aWFsIgogICAgImdjYyIKICAgICJnKysiCiAgICAibWFrZSIKICAgICJhcHQtdHJhbnNwb3J0LWh0dHBzIgogICAgImxzYi1yZWxlYXNlIgogICAgImdudXBnIgogICkKICBmb3IgREVQIGluICIke0lOU1RBTExBVElPTl9ERVBFTkRFTkNJRVNbQF19IjsgZG8KICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgICAlcyIgIiRERVAiCiAgICBpZiBbWyAiJChzdWRvIHBhY21hbiAtUWkgIiRERVAiIDI+IC9kZXYvbnVsbCB8IGdyZXAgU3RhdHVzKSIgIT0gIlN0YXR1czogaW5zdGFsbCBvayBpbnN0YWxsZWQiIF1dOyB0aGVuCiAgICAgIHN1ZG8gcGFjbWFuIC1TIC0tIC15ICIkREVQIiA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgICBmaTsKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGRvbmUKfQpMQVNUX05PREVKU19WRVJTSU9OPSIiCmZ1bmN0aW9uIHJldHJpZXZlTGFzdE5vZGVKU1ZlcnNpb24oKSB7CiAgTEFTVF9OT0RFSlNfVkVSU0lPTj0iJCgKICAgIGN1cmwgLXNTTCBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvU0hBU1VNUzI1Ni50eHQgICAgIHwgaGVhZCAtbiAxIHwgY3V0IC1kJyAnIC1mMyB8IGN1dCAtZCctJyAtZjIgfCBjdXQgLWQndicgLWYyKSIKfQpmdW5jdGlvbiBpbnN0YWxsTm9kZUpTKCkgewogIGlmIFsgIiRfVkVSU0lPTiIgPSAiIiBdOyB0aGVuCiAgICBwcmludGYgIiAgJXMiICIkX01TR19SRVRSSUVWSU5HX0xBU1RfTk9ERUpTX0FCU09MVVRFX1ZFUlNJT04iCiAgICByZXRyaWV2ZUxhc3ROb2RlSlNWZXJzaW9uCiAgICBOT0RFSlNfVkVSU0lPTl9UT19JTlNUQUxMPSIkTEFTVF9OT0RFSlNfVkVSU0lPTiIKICAgIHByaW50ZiAiICh2JXMpIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIiAiJE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTEwiCiAgZWxzZQogICAgTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTD0iJF9WRVJTSU9OIgogIGZpOwogIE5PREVKU19NQUpPUl9WRVJTSU9OX1RPX0lOU1RBTEw9IiQoCiAgICBlY2hvICIkTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTCIgfCBjdXQgLWQiLiIgLWYxKSIKICBwcmludGYgIiAgJXMgKHYlcykuLi4iICIkX01TR19JTlNUQUxMSU5HX05PREVKUyIgIiROT0RFSlNfVkVSU0lPTl9UT19JTlNUQUxMIgogIElOU1RBTExfTk9ERUpTX1NUREVSUj0kKAogICAgY3VybCAtc0wgImh0dHBzOi8vZGViLm5vZGVzb3VyY2UuY29tL3NldHVwXyROT0RFSlNfTUFKT1JfVkVSU0lPTl9UT19JTlNUQUxMLngiIHwgICAgIHN1ZG8gYmFzaCAgICAgMj4mMSA+IC9kZXYvbnVsbCkKICBJTlNUQUxMX05PREVKU19FWElUX0NPREU9JD8KICBpZiBbICRJTlNUQUxMX05PREVKU19FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzOlxuICVzXG4iICIkX01TR19FUlJPUl9JTlNUQUxMSU5HX05PREVKUyIgIiRJTlNUQUxMX05PREVKU19TVERFUlIiID4mMgogICAgcHJpbnRmICIlczogJXNcbiIgIiRfTVNHX0VSUk9SX0NPREUiICIkSU5TVEFMTF9OT0RFSlNfRVhJVF9DT0RFIiA+JjIKICAgIGV4aXQgJElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERQogIGZpOwogIHN1ZG8gcGFjbWFuIC1TIC0tIC15IG5vZGVqcyA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgaWYgWyAtZCAiJEhPTUUvLmNvbmZpZyIgXTsgdGhlbgogICAgc3VkbyBjaG93biAtUiAiJFVTRVI6JChpZCAtZ24gIiRVU0VSIikiICIkSE9NRS8uY29uZmlnIgogIGZpOwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9CmZ1bmN0aW9uIGluc3RhbGxOb2RlSlNJZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKHN1ZG8gcGFjbWFuIC1RaSBub2RlanMgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiA9ICJTdGF0dXM6IGluc3RhbGwgb2sgaW5zdGFsbGVkIiBdIHx8IFsgLW4gIiQoY29tbWFuZCAtdiBub2RlKSIgXTsgdGhlbgogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfRk9VTkRfTk9ERUpTX0lOU1RBTExFRCIKICAgIHByaW50ZiAiICh2JXMpIiAiJChub2RlIC12IHwgY3V0IC1jMi0xNSkiCiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgIGV4aXQgMAogIGVsc2UKICAgIGluc3RhbGxOb2RlSlMKICBmaTsKfQpmdW5jdGlvbiBtYWluKCkgewogIHN1ZG8gcHJpbnRmICIiCiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgZ2V0VW5peERpc3RybwogIGNoZWNrVW5peERpc3RybwogIHByaW50SW5kZW50CiAgcHJpbnRmICIlc1xuIiAiJF9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNIgogIGluc3RhbGxJbnN0YWxsYXRpb25EZXBlbmRlbmNpZXMKICBpbnN0YWxsTm9kZUpTSWZOb3RJbnN0YWxsZWQKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOw=='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
