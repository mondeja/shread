#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNPSJTZXR0aW5nIHVwIE5vZGVKUyBlY29zeXN0ZW0uLi4iCl9NU0dfQ0hFQ0tJTkdfQkFTRV9ERVBTPSJDaGVja2luZyBiYXNlIGRlcGVuZGVuY2llcy4uLiIKX01TR19SRVRSSUVWSU5HX0xBU1RfTk9ERUpTX0FCU09MVVRFX1ZFUlNJT049IlJldHJpZXZpbmcgbGFzdGVzdCBhYnNvbHV0ZSBOb2RlSlMgdmVyc2lvbi4uLiIKX01TR19JTlNUQUxMSU5HX05PREVKUz0iSW5zdGFsbGluZyBOb2RlSlMiCl9NU0dfVU5JTlNUQUxMSU5HX05PREVKUz0iVW5pbnN0YWxsaW5nIE5vZGVKUyIKX01TR19FUlJPUl9JTlNUQUxMSU5HX05PREVKUz0iQW4gZXJyb3IgaGFwcGVuIGluc3RhbGxpbmcgTm9kZUpTIgpfTVNHX0VSUk9SX0NPREU9IkVycm9yIGNvZGUiCl9NU0dfRElTVFJJQlVUSU9OX05PVF9TVVBQT1JURUQ9IllvdXIgZGlzdHJpYnV0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBOb2RlSlMgaW5zdGFsbGF0aW9uIHNjcmlwdCIKX01TR19GT1VORF9OT0RFSlNfSU5TVEFMTEVEPSJGb3VuZCBOb2RlSlMgaW5zdGFsbGVkIgpfTVNHX05PREVKU19JU19VUERBVEVEPSJOb2RlSlMgaXMgdXBkYXRlZCIKX01TR19OT0RFSlNfSU5TVEFMTEVEX0JZX0FOT1RIRVJfU09VUkNFPSJOb2RlSlMgd2FzIGluc3RhbGxlZCBieSBhbiB1bmtub3duIHNvdXJjZSBhbmQgY2FuIG5vdCBiZSB1cGdyYWRlZC4iCl9NU0dfVU5JTlNUQUxMX01BTlVBTExZX05PREVKU19CRUZPUkVfUlVOPSJVbmluc3RhbGwgTm9kZUpTIG1hbnVhbGx5IGJlZm9yZSBydW4gdGhpcyBzY3JpcHQuIgpJTkRFTlRfU1RSSU5HPSIiClNFVFg9MApfVkVSU0lPTj0iIgpfVVBHUkFERT0wCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvbm9kZWpzLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gWy12IFZFUlNJT05dCgogIEluc3RhbGxzIE5vZGVKUyB1c2luZyAnZ2l0aHViLmNvbS9ub2Rlc291cmNlL2Rpc3RyaWJ1dGlvbnMnIHJlcG9zaXRvcmllcyBhcyBzb3VyY2UuCgpPcHRpb25zOgogIC1oLCAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0LgogIC1pIFNUUklORywgLS1pbmRlbnQgU1RSSU5HICAgICAgICBFYWNoIGxpbmUgb2YgdGhlIHNjcmlwdCBvdXRwdXQgd2lsbCBiZSBwcmVjZWRlZCB3aXRoIHRoZSBzdHJpbmcgZGVmaW5lZCBpbiB0aGlzIHBhcmFtZXRlci4KICAtLXNldC14ICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0cyB0aGUgLXggb3B0aW9uIGluIEJhc2ggdG8gcHJpbnQgb3V0IHRoZSBzdGF0ZW1lbnRzIGFzIHRoZXkgYXJlIGJlaW5nIGV4ZWN1dGVkLiBVc2VmdWwgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy4KICAtdiBWRVJTSU9OLCAtLXZlcnNpb24gVkVSU0lPTiAgICAgTWFqb3IgdmVyc2lvbiBvZiBOb2RlSlMgdG8gaW5zdGFsbCBvciB1cGRhdGUgdG8uIEFzIGRlZmF1bHQgdGhlIGxhdGVzdCB2ZXJzaW9uIGF2YWlsYWJsZS4KICAtdSwgLS11cGdyYWRlICAgICAgICAgICAgICAgICAgICAgVXBncmFkZXMgTm9kZUpTIHZlcnNpb24gaWYgd2FzIHByZXZpb3VseSBpbnN0YWxsZWQgYnkgdGhlIHNhbWUgc291cmNlIHVzZWQgYnkgdGhpcyBzY3JpcHQuCgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIElOREVOVF9TVFJJTkc9IiQyIgogICAgc2hpZnQgMgogICAgOzsKICAgIC1ofC0taGVscCkKICAgIHNoaWZ0CiAgICB1c2FnZQogICAgOzsgICAgLS1zZXQteCkKICAgIFNFVFg9MQogICAgc2hpZnQKICAgIDs7ICAgIAogICAgLXZ8LS12ZXJzaW9uKQogICAgc2hpZnQKICAgIF9WRVJTSU9OPSQxCiAgICBzaGlmdAogICAgOzsKICAgIC11fC0tdXBncmFkZSkKICAgIF9VUEdSQURFPTEKICAgIHNoaWZ0CiAgICA7OwogIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KaWYgWyAiJFNFVFgiIC1lcSAxIF07IHRoZW4gc2V0IC14OyBmaQpmdW5jdGlvbiBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQoKSB7CiAgaWYgWyAiJChjb21tYW5kIC12IHBhY21hbikiID0gIiIgXTsgdGhlbgogICAgdXJsPSJodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vZG93bmxvYWQvcGFjYXB0LyRfU0NSSVBUX0ZJTEVOQU1FIgogICAgY3VybCAtc0wgIiR1cmwiIHwgc3VkbyBiYXNoIC0gPiAvZGV2L251bGwKICBmaTsKfQpmdW5jdGlvbiBnZXRVbml4RGlzdHJvKCkgewogIGlmIFsgLXogIiRVTklYX0RJU1RSTyIgXTsgdGhlbgogICAgc291cmNlIDwoY3VybCAtc0wgaHR0cHM6Ly9tb25kZWphLmdpdGh1Yi5pby9zaHJlYWQvdW5peC9fL3V0aWwvZ2V0LWRpc3Ryby9lbi5zaCkKICBmaTsKfQpmdW5jdGlvbiBjaGVja1VuaXhEaXN0cm8oKSB7CiAgaWYgWyAiJFVOSVhfRElTVFJPIiAhPSAidWJ1bnR1IiBdICYmIFsgIiRVTklYX0RJU1RSTyIgIT0gImRlYmlhbiIgXTsgdGhlbgogICAgcHJpbnRmICIlcyAoJXMpIiAiJF9NU0dfRElTVFJJQlVUSU9OX05PVF9TVVBQT1JURUQiICIkVU5JWF9ESVNUUk8iID4mMgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgZXhpdCAxCiAgZmk7Cn0KZnVuY3Rpb24gaW5zdGFsbEluc3RhbGxhdGlvbkRlcGVuZGVuY2llcygpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiICAlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfQkFTRV9ERVBTIgogIElOU1RBTExBVElPTl9ERVBFTkRFTkNJRVM9KAogICAgImFwdC10cmFuc3BvcnQtaHR0cHMiCiAgICAiYXB0aXR1ZGUiCiAgICAiYnVpbGQtZXNzZW50aWFsIgogICAgImcrKyIKICAgICJnY2MiCiAgICAiZ251cGciCiAgICAibHNiLXJlbGVhc2UiCiAgICAibWFrZSIKICApCiAgZm9yIERFUCBpbiAiJHtJTlNUQUxMQVRJT05fREVQRU5ERU5DSUVTW0BdfSI7IGRvCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICAgJXMiICIkREVQIgogICAgaWYgW1sgIiQoc3VkbyBwYWNtYW4gLVFpICIkREVQIiAyPiAvZGV2L251bGwgfCBncmVwIFN0YXR1cykiICE9ICJTdGF0dXM6IGluc3RhbGwgb2sgaW5zdGFsbGVkIiBdXTsgdGhlbgogICAgICBzdWRvIHBhY21hbiAtUyAtLSAteSAiJERFUCIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogICAgZmk7CiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICBkb25lCn0KTEFTVF9OT0RFSlNfVkVSU0lPTj0iIgpMQVNUX05PREVKU19NQUpPUl9WRVJTSU9OPSIiCmZ1bmN0aW9uIHJldHJpZXZlTGFzdE5vZGVKU1ZlcnNpb24oKSB7CiAgcHJpbnRmICIgICVzIiAiJF9NU0dfUkVUUklFVklOR19MQVNUX05PREVKU19BQlNPTFVURV9WRVJTSU9OIgogIExBU1RfTk9ERUpTX1ZFUlNJT049IiQoCiAgICBjdXJsIC1zU0wgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L1NIQVNVTVMyNTYudHh0ICAgICB8IGhlYWQgLW4gMSB8IGN1dCAtZCcgJyAtZjMgfCBjdXQgLWQnLScgLWYyIHwgY3V0IC1kJ3YnIC1mMikiCiAgTEFTVF9OT0RFSlNfTUFKT1JfVkVSU0lPTj0iJCgKICAgIHByaW50ZiAnJXMnICIkTEFTVF9OT0RFSlNfVkVSU0lPTiIgfCBjdXQgLWQnLicgLWYxKSIKICBwcmludGYgIiAodiVzKSBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIgIiRMQVNUX05PREVKU19WRVJTSU9OIgp9CmZ1bmN0aW9uIGluc3RhbGxOb2RlSlMoKSB7CiAgcHJpbnRJbmRlbnQKICBpZiBbIC1uICIkMSIgXTsgdGhlbgogICAgcHJpbnRmICIgICVzICh2JXMpLi4uIiAiJF9NU0dfSU5TVEFMTElOR19OT0RFSlMiICIkMSIKICBlbHNlCiAgICBwcmludGYgIiAgJXMgKHYlcykuLi4iICIkX01TR19JTlNUQUxMSU5HX05PREVKUyIgIiQyIgogIGZpOwogIElOU1RBTExfTk9ERUpTX1NUREVSUj0kKAogICAgY3VybCAtc0wgImh0dHBzOi8vZGViLm5vZGVzb3VyY2UuY29tL3NldHVwXyQyLngiIHwgICAgIHN1ZG8gYmFzaCAgICAgMj4mMSA+IC9kZXYvbnVsbCkKICBJTlNUQUxMX05PREVKU19FWElUX0NPREU9JD8KICBpZiBbICRJTlNUQUxMX05PREVKU19FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzOlxuICVzXG4iICIkX01TR19FUlJPUl9JTlNUQUxMSU5HX05PREVKUyIgIiRJTlNUQUxMX05PREVKU19TVERFUlIiID4mMgogICAgcHJpbnRmICIlczogJXNcbiIgIiRfTVNHX0VSUk9SX0NPREUiICIkSU5TVEFMTF9OT0RFSlNfRVhJVF9DT0RFIiA+JjIKICAgIGV4aXQgJElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERQogIGZpOwogIHN1ZG8gcGFjbWFuIC1TIC0tIC15IG5vZGVqcyA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgaWYgWyAtZCAiJEhPTUUvLmNvbmZpZyIgXTsgdGhlbgogICAgc3VkbyBjaG93biAtUiAiJFVTRVI6JChpZCAtZ24gIiRVU0VSIikiICIkSE9NRS8uY29uZmlnIgogIGZpOwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9Cl9OT0RFSlNfSU5TVEFMTEVEPTAKZnVuY3Rpb24gY2hlY2tOb2RlSlNJbnN0YWxsZWQoKSB7CiAgaWYgWyAiJChzdWRvIHBhY21hbiAtUWkgbm9kZWpzIDI+IC9kZXYvbnVsbCB8IGdyZXAgU3RhdHVzKSIgPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXSB8fCBbIC1uICIkKGNvbW1hbmQgLXYgbm9kZSkiIF07IHRoZW4KICAgIF9OT0RFSlNfSU5TVEFMTEVEPTEKICBmaTsKfQpfTk9ERUpTX0lOU1RBTExFRF9CWV9OT0RFU09VUkNFPTAKZnVuY3Rpb24gY2hlY2tOb2RlSlNOb2Rlc291cmNlSW5zdGFsbGF0aW9uKCkgewogIGlmIFsgLWYgIi9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL25vZGVzb3VyY2UubGlzdCIgXTsgdGhlbgogICAgX05PREVKU19JTlNUQUxMRURfQllfTk9ERVNPVVJDRT0xCiAgZmk7Cn0KX05PREVKU19JTlNUQUxMRURfVkVSU0lPTj0iIgpfTk9ERUpTX0lOU1RBTExFRF9NQUpPUl9WRVJTSU9OPSIiCmZ1bmN0aW9uIGdldE5vZGVKU0luc3RhbGxlZFZlcnNpb24oKSB7CiAgX05PREVKU19JTlNUQUxMRURfVkVSU0lPTj0iJChub2RlIC12IHwgY3V0IC1kJ3YnIC1mMikiCiAgX05PREVKU19JTlNUQUxMRURfTUFKT1JfVkVSU0lPTj0iJChwcmludGYgIiVzIiAiJF9OT0RFSlNfSU5TVEFMTEVEX1ZFUlNJT04iIHwgY3V0IC1kJy4nIC1mMSkiCn0KZnVuY3Rpb24gdW5pbnN0YWxsTm9kZXNvdXJjZU5vZGVKUygpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiICAlcyAodiVzKS4uLiIgIiRfTVNHX1VOSU5TVEFMTElOR19OT0RFSlMiICIkX05PREVKU19JTlNUQUxMRURfVkVSU0lPTiIKICBlY2hvIHkgfCBzdWRvIHBhY21hbiAtUnNuIG5vZGVqcyA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgX1BHREdfU09VUkNFU19FWFRTPSgKICAgICJsaXN0IgogICAgInNhdmUiCiAgICAiZGlzdFVwZ3JhZGUiCiAgKQogIGZvciBFWFQgaW4gIiR7X1BHREdfU09VUkNFU19FWFRTW0BdfSI7IGRvCiAgICBzdWRvIHJtIC1mICIvZXRjL2FwdC9zb3VyY2VzLmxpc3QuZC9ub2Rlc291cmNlLiRFWFQiCiAgZG9uZQogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgc3VkbyBwcmludGYgIiIKICBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQKICBnZXRVbml4RGlzdHJvCiAgY2hlY2tVbml4RGlzdHJvCiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiVzXG4iICIkX01TR19TRVRUSU5HX1VQX05PREVKU19FQ09TWVNURU0iCiAgaW5zdGFsbEluc3RhbGxhdGlvbkRlcGVuZGVuY2llcwogIGNoZWNrTm9kZUpTSW5zdGFsbGVkCiAgaWYgWyAiJF9OT0RFSlNfSU5TVEFMTEVEIiAtZXEgMCBdOyB0aGVuCiAgICByZXRyaWV2ZUxhc3ROb2RlSlNWZXJzaW9uCiAgICBpbnN0YWxsTm9kZUpTICIkTEFTVF9OT0RFSlNfVkVSU0lPTiIgIiRMQVNUX05PREVKU19NQUpPUl9WRVJTSU9OIgogIGVsc2UKICAgIGdldE5vZGVKU0luc3RhbGxlZFZlcnNpb24KICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgJXMgKHYlcykiICIkX01TR19GT1VORF9OT0RFSlNfSU5TVEFMTEVEIiAiJF9OT0RFSlNfSU5TVEFMTEVEX1ZFUlNJT04iCiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgIGlmIFsgIiRfVVBHUkFERSIgLWVxIDAgXTsgdGhlbgogICAgICBleGl0IDAKICAgIGZpOwogICAgaWYgWyAteiAiJF9WRVJTSU9OIiBdOyB0aGVuCiAgICAgIHJldHJpZXZlTGFzdE5vZGVKU1ZlcnNpb24KICAgICAgX1ZFUlNJT049IiRMQVNUX05PREVKU19NQUpPUl9WRVJTSU9OIgogICAgZmk7CiAgICBpZiBbICIkX05PREVKU19JTlNUQUxMRURfTUFKT1JfVkVSU0lPTiIgPSAiJF9WRVJTSU9OIiBdOyB0aGVuCiAgICAgIHByaW50SW5kZW50CiAgICAgIHByaW50ZiAiICAlcyAodiVzKSIgIiRfTVNHX05PREVKU19JU19VUERBVEVEIiAiJF9OT0RFSlNfSU5TVEFMTEVEX1ZFUlNJT04iCiAgICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogICAgICBleGl0IDAKICAgIGZpOwogICAgY2hlY2tOb2RlSlNOb2Rlc291cmNlSW5zdGFsbGF0aW9uCiAgICBpZiBbICIkX05PREVKU19JTlNUQUxMRURfQllfTk9ERVNPVVJDRSIgLWVxIDEgXTsgdGhlbgogICAgICB1bmluc3RhbGxOb2Rlc291cmNlTm9kZUpTCiAgICAgIGluc3RhbGxOb2RlSlMgIiRMQVNUX05PREVKU19WRVJTSU9OIiAiJF9WRVJTSU9OIgogICAgZWxzZQogICAgICBwcmludEluZGVudCA+JjIKICAgICAgcHJpbnRmICIgICVzIiAiJF9NU0dfTk9ERUpTX0lOU1RBTExFRF9CWV9BTk9USEVSX1NPVVJDRSIgPiYyCiAgICAgIHByaW50ZiAiICIgPiYyCiAgICAgIHByaW50ZiAiJXMiICIkX01TR19VTklOU1RBTExfTUFOVUFMTFlfTk9ERUpTX0JFRk9SRV9SVU4iID4mMgogICAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBmaTsKICBmaTsKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOwppZiBbICIkU0VUWCIgLWVxIDEgXTsgdGhlbiBzZXQgK3g7IGZp'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
