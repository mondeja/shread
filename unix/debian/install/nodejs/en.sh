#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNPSJTZXR0aW5nIHVwIE5vZGVKUyBlY29zeXN0ZW0uLi4iCl9NU0dfQ0hFQ0tJTkdfQkFTRV9ERVBTPSJDaGVja2luZyBiYXNlIGRlcGVuZGVuY2llcy4uLiIKX01TR19SRVRSSUVWSU5HX0xBU1RfTk9ERUpTX0FCU09MVVRFX1ZFUlNJT049IlJldHJpZXZpbmcgbGFzdGVzdCBhYnNvbHV0ZSBOb2RlSlMgdmVyc2lvbi4uLiIKX01TR19JTlNUQUxMSU5HX05PREVKUz0iSW5zdGFsbGluZyBOb2RlSlMiCl9NU0dfRVJST1JfSU5TVEFMTElOR19OT0RFSlM9IkFuIGVycm9yIGhhcHBlbiBpbnN0YWxsaW5nIE5vZGVKUyIKX01TR19FUlJPUl9DT0RFPSJFcnJvciBjb2RlIgpfTVNHX0ZPVU5EX05PREVKU19JTlNUQUxMRUQ9IkZvdW5kIE5vZGVKUyBpbnN0YWxsZWQgaW4gdGhlIHN5c3RlbSIKX01TR19ESVNUUklCVVRJT05fTk9UX1NVUFBPUlRFRD0iWW91ciBkaXN0cmlidXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIE5vZGVKUyBpbnN0YWxsYXRpb24gc2NyaXB0IgpJTkRFTlRfU1RSSU5HPSIiCl9WRVJTSU9OPSIiCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvbm9kZWpzLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gWy12IFZFUlNJT05dCgogIEluc3RhbGxzIGEgTm9kZUpTIHZlcnNpb24gdXNpbmcgJ2dpdGh1Yi5jb20vbm9kZXNvdXJjZS9kaXN0cmlidXRpb25zJyByZXBvc2l0b3JpZXMgYXMgc291cmNlLgoKT3B0aW9uczoKICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4KICAtaSBTVFJJTkcsIC0taW5kZW50IFNUUklORyAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBzY3JpcHQgb3V0cHV0IHdpbGwgYmUgcHJlY2VkZWQgd2l0aCB0aGUgc3RyaW5nIGRlZmluZWQgaW4gdGhpcyBwYXJhbWV0ZXIuCiAgLXYgVkVSU0lPTiwgLS12ZXJzaW9uIFZFUlNJT04gICAgIE1ham9yIHZlcnNpb24gb2YgTm9kZUpTIHRvIGluc3RhbGwgb3IgdXBkYXRlIHRvLiBBcyBkZWZhdWx0IHRoZSBsYXRlc3QgdmVyc2lvbiBhdmFpbGFibGUuCgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIHNoaWZ0CiAgICBJTkRFTlRfU1RSSU5HPSIkMSIKICAgIHNoaWZ0CiAgICA7OwogICAgLWh8LS1oZWxwKQogICAgc2hpZnQKICAgIHVzYWdlCiAgICA7OwogICAgLXZ8LS12ZXJzaW9uKQogICAgc2hpZnQKICAgIF9WRVJTSU9OPSQxCiAgICBzaGlmdAogICAgOzsKICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGdldFVuaXhEaXN0cm8oKSB7CiAgaWYgWyAteiAiJFVOSVhfRElTVFJPIiBdOyB0aGVuCiAgICBzb3VyY2UgPChjdXJsIC1zTCBodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vdXRpbC9nZXQtZGlzdHJvL2VuLnNoKQogIGZpOwp9CmZ1bmN0aW9uIGNoZWNrVW5peERpc3RybygpIHsKICBpZiBbICIkVU5JWF9ESVNUUk8iICE9ICJ1YnVudHUiIF0gJiYgWyAiJFVOSVhfRElTVFJPIiAhPSAiZGViaWFuIiBdOyB0aGVuCiAgICBwcmludGYgIiVzICglcykiICIkX01TR19ESVNUUklCVVRJT05fTk9UX1NVUFBPUlRFRCIgIiRVTklYX0RJU1RSTyIgPiYyCiAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBleGl0IDEKICBmaTsKfQpmdW5jdGlvbiBpbnN0YWxsSW5zdGFsbGF0aW9uRGVwZW5kZW5jaWVzKCkgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzXG4iICIkX01TR19DSEVDS0lOR19CQVNFX0RFUFMiCiAgSU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFUz0oCiAgICAiYnVpbGQtZXNzZW50aWFsIgogICAgImdjYyIKICAgICJnKysiCiAgICAibWFrZSIKICAgICJhcHQtdHJhbnNwb3J0LWh0dHBzIgogICAgImxzYi1yZWxlYXNlIgogICAgImdudXBnIgogICkKICBmb3IgREVQIGluICIke0lOU1RBTExBVElPTl9ERVBFTkRFTkNJRVNbQF19IjsgZG8KICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgICAlcyIgIiRERVAiCiAgICBpZiBbWyAiJChzdWRvIHBhY21hbiAtUWkgIiRERVAiIDI+IC9kZXYvbnVsbCB8IGdyZXAgU3RhdHVzKSIgIT0gIlN0YXR1czogaW5zdGFsbCBvayBpbnN0YWxsZWQiIF1dOyB0aGVuCiAgICAgIHN1ZG8gcGFjbWFuIC1TIC0tIC15ICIkREVQIiA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgICBmaTsKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGRvbmUKfQpMQVNUX05PREVKU19WRVJTSU9OPSIiCmZ1bmN0aW9uIHJldHJpZXZlTGFzdE5vZGVKU1ZlcnNpb24oKSB7CiAgTEFTVF9OT0RFSlNfVkVSU0lPTj0iJCgKICAgIGN1cmwgLXNTTCBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvU0hBU1VNUzI1Ni50eHQgICAgIHwgaGVhZCAtbiAxIHwgY3V0IC1kJyAnIC1mMyB8IGN1dCAtZCctJyAtZjIgfCBjdXQgLWQndicgLWYyKSIKfQpmdW5jdGlvbiBpbnN0YWxsTm9kZUpTKCkgewogIGlmIFsgIiRfVkVSU0lPTiIgPSAiIiBdOyB0aGVuCiAgICBwcmludGYgIiAgJXMiICIkX01TR19SRVRSSUVWSU5HX0xBU1RfTk9ERUpTX0FCU09MVVRFX1ZFUlNJT04iCiAgICByZXRyaWV2ZUxhc3ROb2RlSlNWZXJzaW9uCiAgICBOT0RFSlNfVkVSU0lPTl9UT19JTlNUQUxMPSIkTEFTVF9OT0RFSlNfVkVSU0lPTiIKICAgIHByaW50ZiAiICh2JXMpIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIiAiJE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTEwiCiAgZWxzZQogICAgTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTD0iJF9WRVJTSU9OIgogIGZpOwogIE5PREVKU19NQUpPUl9WRVJTSU9OX1RPX0lOU1RBTEw9IiQoCiAgICBlY2hvICIkTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTCIgfCBjdXQgLWQiLiIgLWYxKSIKICBwcmludGYgIiAgJXMgKHYlcykuLi4iICIkX01TR19JTlNUQUxMSU5HX05PREVKUyIgIiROT0RFSlNfVkVSU0lPTl9UT19JTlNUQUxMIgogIElOU1RBTExfTk9ERUpTX1NUREVSUj0kKAogICAgY3VybCAtc0wgImh0dHBzOi8vZGViLm5vZGVzb3VyY2UuY29tL3NldHVwXyROT0RFSlNfTUFKT1JfVkVSU0lPTl9UT19JTlNUQUxMLngiIHwgICAgIHN1ZG8gYmFzaCAgICAgMj4mMSA+IC9kZXYvbnVsbCkKICBJTlNUQUxMX05PREVKU19FWElUX0NPREU9JD8KICBpZiBbICRJTlNUQUxMX05PREVKU19FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzOlxuICVzXG4iICIkX01TR19FUlJPUl9JTlNUQUxMSU5HX05PREVKUyIgIiRJTlNUQUxMX05PREVKU19TVERFUlIiID4mMgogICAgcHJpbnRmICIlczogJXNcbiIgIiRfTVNHX0VSUk9SX0NPREUiICIkSU5TVEFMTF9OT0RFSlNfRVhJVF9DT0RFIiA+JjIKICAgIGV4aXQgJElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERQogIGZpOwogIHN1ZG8gcGFjbWFuIC1TIC0tIC15IG5vZGVqcyA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgaWYgWyAtZCAiJEhPTUUvLmNvbmZpZyIgXTsgdGhlbgogICAgc3VkbyBjaG93biAtUiAiJFVTRVI6JChpZCAtZ24gIiRVU0VSIikiICIkSE9NRS8uY29uZmlnIgogIGZpOwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9CmZ1bmN0aW9uIGluc3RhbGxOb2RlSlNJZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKHN1ZG8gcGFjbWFuIC1RaSBub2RlanMgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiA9ICJTdGF0dXM6IGluc3RhbGwgb2sgaW5zdGFsbGVkIiBdIHx8IFsgLW4gIiQoY29tbWFuZCAtdiBub2RlKSIgXTsgdGhlbgogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfRk9VTkRfTk9ERUpTX0lOU1RBTExFRCIKICAgIHByaW50ZiAiICh2JXMpIiAiJChub2RlIC12IHwgY3V0IC1jMi0xNSkiCiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgIGV4aXQgMAogIGVsc2UKICAgIGluc3RhbGxOb2RlSlMKICBmaTsKfQpmdW5jdGlvbiBtYWluKCkgewogIHN1ZG8gcHJpbnRmICIiCiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgZ2V0VW5peERpc3RybwogIGNoZWNrVW5peERpc3RybwogIHByaW50SW5kZW50CiAgcHJpbnRmICIlc1xuIiAiJF9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNIgogIGluc3RhbGxJbnN0YWxsYXRpb25EZXBlbmRlbmNpZXMKICBpbnN0YWxsTm9kZUpTSWZOb3RJbnN0YWxsZWQKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOw=='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
