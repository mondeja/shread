#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfU0VUVElOR19VUF9OT0RFSlNfRUNPU1lTVEVNPSJTZXR0aW5nIHVwIE5vZGVKUyBlY29zeXN0ZW0uLi4iCl9NU0dfQ0hFQ0tJTkdfQkFTRV9ERVBTPSJDaGVja2luZyBiYXNlIGRlcGVuZGVuY2llcy4uLiIKX01TR19SRVRSSUVWSU5HX0xBU1RfTk9ERUpTX0FCU09MVVRFX1ZFUlNJT049IlJldHJpZXZpbmcgbGFzdGVzdCBhYnNvbHV0ZSBOb2RlSlMgdmVyc2lvbi4uLiIKX01TR19JTlNUQUxMSU5HX05PREVKUz0iSW5zdGFsbGluZyBOb2RlSlMiCl9NU0dfRVJST1JfSU5TVEFMTElOR19OT0RFSlM9IkFuIGVycm9yIGhhcHBlbiBpbnN0YWxsaW5nIE5vZGVKUyIKX01TR19FUlJPUl9DT0RFPSJFcnJvciBjb2RlIgpfTVNHX0ZPVU5EX05PREVKU19JTlNUQUxMRUQ9IkZvdW5kIE5vZGVKUyBpbnN0YWxsZWQgaW4gdGhlIHN5c3RlbSIKX01TR19ESVNUUklCVVRJT05fTk9UX1NVUFBPUlRFRD0iWW91ciBkaXN0cmlidXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIE5vZGVKUyBpbnN0YWxsYXRpb24gc2NyaXB0IgpJTkRFTlRfU1RSSU5HPSIiCl9WRVJTSU9OPSIiCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvbm9kZWpzLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gWy12IFZFUlNJT05dCgogIEluc3RhbGxzIGEgTm9kZUpTIHZlcnNpb24gdXNpbmcgJ2dpdGh1Yi5jb20vbm9kZXNvdXJjZS9kaXN0cmlidXRpb25zJyByZXBvc2l0b3JpZXMgYXMgc291cmNlLgoKT3B0aW9uczoKICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4KICAtaSBTVFJJTkcsIC0taW5kZW50IFNUUklORyAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBzY3JpcHQgb3V0cHV0IHdpbGwgYmUgcHJlY2VkZWQgd2l0aCB0aGUgc3RyaW5nIGRlZmluZWQgaW4gdGhpcyBwYXJhbWV0ZXIuCiAgLXYgVkVSU0lPTiwgLS12ZXJzaW9uIFZFUlNJT04gICAgIE1ham9yIHZlcnNpb24gb2YgTm9kZUpTIHRvIGluc3RhbGwgb3IgdXBkYXRlIHRvLiBBcyBkZWZhdWx0IHRoZSBsYXRlc3QgdmVyc2lvbiBhdmFpbGFibGUuCgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIHNoaWZ0CiAgICBJTkRFTlRfU1RSSU5HPSIkMSIKICAgIHNoaWZ0CiAgICA7OwogICAgLWh8LS1oZWxwKQogICAgc2hpZnQKICAgIHVzYWdlCiAgICA7OyAgICAKICAgIC12fC0tdmVyc2lvbikKICAgIHNoaWZ0CiAgICBfVkVSU0lPTj0kMQogICAgc2hpZnQKICAgIDs7CiAgZXNhYwpkb25lCmZ1bmN0aW9uIHByaW50SW5kZW50KCkgewogIHByaW50ZiAiJXMiICIkSU5ERU5UX1NUUklORyIKfQpmdW5jdGlvbiBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQoKSB7CiAgaWYgWyAiJChjb21tYW5kIC12IHBhY21hbikiID0gIiIgXTsgdGhlbgogICAgdXJsPSJodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vZG93bmxvYWQvcGFjYXB0LyRfU0NSSVBUX0ZJTEVOQU1FIgogICAgY3VybCAtc0wgIiR1cmwiIHwgc3VkbyBiYXNoIC0gPiAvZGV2L251bGwKICBmaTsKfQpmdW5jdGlvbiBnZXRVbml4RGlzdHJvKCkgewogIGlmIFsgLXogIiRVTklYX0RJU1RSTyIgXTsgdGhlbgogICAgc291cmNlIDwoY3VybCAtc0wgaHR0cHM6Ly9tb25kZWphLmdpdGh1Yi5pby9zaHJlYWQvdW5peC9fL3V0aWwvZ2V0LWRpc3Ryby9lbi5zaCkKICBmaTsKfQpmdW5jdGlvbiBjaGVja1VuaXhEaXN0cm8oKSB7CiAgaWYgWyAiJFVOSVhfRElTVFJPIiAhPSAidWJ1bnR1IiBdICYmIFsgIiRVTklYX0RJU1RSTyIgIT0gImRlYmlhbiIgXTsgdGhlbgogICAgcHJpbnRmICIlcyAoJXMpIiAiJF9NU0dfRElTVFJJQlVUSU9OX05PVF9TVVBQT1JURUQiICIkVU5JWF9ESVNUUk8iID4mMgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgZXhpdCAxCiAgZmk7Cn0KZnVuY3Rpb24gaW5zdGFsbEluc3RhbGxhdGlvbkRlcGVuZGVuY2llcygpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiICAlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfQkFTRV9ERVBTIgogIElOU1RBTExBVElPTl9ERVBFTkRFTkNJRVM9KAogICAgImJ1aWxkLWVzc2VudGlhbCIKICAgICJnY2MiCiAgICAiZysrIgogICAgIm1ha2UiCiAgICAiYXB0LXRyYW5zcG9ydC1odHRwcyIKICAgICJsc2ItcmVsZWFzZSIKICAgICJnbnVwZyIKICApCiAgZm9yIERFUCBpbiAiJHtJTlNUQUxMQVRJT05fREVQRU5ERU5DSUVTW0BdfSI7IGRvCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICAgJXMiICIkREVQIgogICAgaWYgW1sgIiQoc3VkbyBwYWNtYW4gLVFpICIkREVQIiAyPiAvZGV2L251bGwgfCBncmVwIFN0YXR1cykiICE9ICJTdGF0dXM6IGluc3RhbGwgb2sgaW5zdGFsbGVkIiBdXTsgdGhlbgogICAgICBzdWRvIHBhY21hbiAtUyAtLSAteSAiJERFUCIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogICAgZmk7CiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICBkb25lCn0KTEFTVF9OT0RFSlNfVkVSU0lPTj0iIgpmdW5jdGlvbiByZXRyaWV2ZUxhc3ROb2RlSlNWZXJzaW9uKCkgewogIExBU1RfTk9ERUpTX1ZFUlNJT049IiQoCiAgICBjdXJsIC1zU0wgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L1NIQVNVTVMyNTYudHh0ICAgICB8IGhlYWQgLW4gMSB8IGN1dCAtZCcgJyAtZjMgfCBjdXQgLWQnLScgLWYyIHwgY3V0IC1kJ3YnIC1mMikiCn0KZnVuY3Rpb24gaW5zdGFsbE5vZGVKUygpIHsKICBpZiBbICIkX1ZFUlNJT04iID0gIiIgXTsgdGhlbgogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfUkVUUklFVklOR19MQVNUX05PREVKU19BQlNPTFVURV9WRVJTSU9OIgogICAgcmV0cmlldmVMYXN0Tm9kZUpTVmVyc2lvbgogICAgTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTD0iJExBU1RfTk9ERUpTX1ZFUlNJT04iCiAgICBwcmludGYgIiAodiVzKSBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIgIiROT0RFSlNfVkVSU0lPTl9UT19JTlNUQUxMIgogIGVsc2UKICAgIE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTEw9IiRfVkVSU0lPTiIKICBmaTsKICBOT0RFSlNfTUFKT1JfVkVSU0lPTl9UT19JTlNUQUxMPSIkKAogICAgZWNobyAiJE5PREVKU19WRVJTSU9OX1RPX0lOU1RBTEwiIHwgY3V0IC1kIi4iIC1mMSkiCiAgcHJpbnRmICIgICVzICh2JXMpLi4uIiAiJF9NU0dfSU5TVEFMTElOR19OT0RFSlMiICIkTk9ERUpTX1ZFUlNJT05fVE9fSU5TVEFMTCIKICBJTlNUQUxMX05PREVKU19TVERFUlI9JCgKICAgIGN1cmwgLXNMICJodHRwczovL2RlYi5ub2Rlc291cmNlLmNvbS9zZXR1cF8kTk9ERUpTX01BSk9SX1ZFUlNJT05fVE9fSU5TVEFMTC54IiB8ICAgICBzdWRvIGJhc2ggICAgIDI+JjEgPiAvZGV2L251bGwpCiAgSU5TVEFMTF9OT0RFSlNfRVhJVF9DT0RFPSQ/CiAgaWYgWyAkSU5TVEFMTF9OT0RFSlNfRVhJVF9DT0RFIC1uZSAwIF07IHRoZW4KICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgIHByaW50ZiAiXG4lczpcbiAlc1xuIiAiJF9NU0dfRVJST1JfSU5TVEFMTElOR19OT0RFSlMiICIkSU5TVEFMTF9OT0RFSlNfU1RERVJSIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FUlJPUl9DT0RFIiAiJElOU1RBTExfTk9ERUpTX0VYSVRfQ09ERSIgPiYyCiAgICBleGl0ICRJTlNUQUxMX05PREVKU19FWElUX0NPREUKICBmaTsKICBzdWRvIHBhY21hbiAtUyAtLSAteSBub2RlanMgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogIGlmIFsgLWQgIiRIT01FLy5jb25maWciIF07IHRoZW4KICAgIHN1ZG8gY2hvd24gLVIgIiRVU0VSOiQoaWQgLWduICIkVVNFUiIpIiAiJEhPTUUvLmNvbmZpZyIKICBmaTsKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpmdW5jdGlvbiBpbnN0YWxsTm9kZUpTSWZOb3RJbnN0YWxsZWQoKSB7CiAgaWYgWyAiJChzdWRvIHBhY21hbiAtUWkgbm9kZWpzIDI+IC9kZXYvbnVsbCB8IGdyZXAgU3RhdHVzKSIgPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXSB8fCBbIC1uICIkKGNvbW1hbmQgLXYgbm9kZSkiIF07IHRoZW4KICAgIHByaW50ZiAiICAlcyIgIiRfTVNHX0ZPVU5EX05PREVKU19JTlNUQUxMRUQiCiAgICBwcmludGYgIiAodiVzKSIgIiQobm9kZSAtdiB8IGN1dCAtYzItMTUpIgogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgICBleGl0IDAKICBlbHNlCiAgICBpbnN0YWxsTm9kZUpTCiAgZmk7Cn0KZnVuY3Rpb24gbWFpbigpIHsKICBzdWRvIHByaW50ZiAiIgogIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZAogIGdldFVuaXhEaXN0cm8KICBjaGVja1VuaXhEaXN0cm8KICBwcmludEluZGVudAogIHByaW50ZiAiJXNcbiIgIiRfTVNHX1NFVFRJTkdfVVBfTk9ERUpTX0VDT1NZU1RFTSIKICBpbnN0YWxsSW5zdGFsbGF0aW9uRGVwZW5kZW5jaWVzCiAgaW5zdGFsbE5vZGVKU0lmTm90SW5zdGFsbGVkCn0KaWYgKHJldHVybiAwIDI+L2Rldi9udWxsKTsgdGhlbgogIGV4cG9ydFZhcmlhYmxlcwplbHNlCiAgbWFpbgpmaTs='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
