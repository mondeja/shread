#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQURESU5HX1JFUE89IkHDsWFkaWVuZG8gcmVwb3NpdG9yaW8uLi4iCl9NU0dfRVJST1JfUkVUUklFVklOR19QT1NUR1JFU1FMX1BVQkxJQ19LRVk9Ik9jdXJyacOzIHVuIGVycm9yIG9idGVuaWVuZG8gbGEgY2xhdmUgcMO6YmxpY2EgZGUgUG9zdGdyZVNRTCIKX01TR19VUERBVElOR19QQUNLQUdFUz0iQWN0dWFsaXphbmRvIHBhcXVldGVzLi4uIgpfTVNHX1JFTU9WSU5HX1BSRVZJT1VTX1BBQ0tBR0VTPSJFbGltaW5hbmRvIHBhcXVldGVzIGFudGVyaW9yZXMuLi4iCl9NU0dfUkVUUklFVklOR19MQVNURVNUX1NUQUJMRV9WRVJTSU9OPSJPYnRlbmllbmRvIGxhIMO6bHRpbWEgdmVyc2nDs24gZXN0YWJsZSBkaXNwb25pYmxlLi4uIgpfTVNHX0NIRUNLSU5HX0FWQUlMQUJMRV9WRVJTSU9OPSJDb21wcm9iYW5kbyB2ZXJzacOzbiBkaXNwb25pYmxlIgpfTVNHX1ZFUlNJT05fTk9UX09GRklDSUFMTFlfQVZBSUxBQkxFPSJWZXJzacOzbiBubyBkaXNwb25pYmxlIGVuIGxvcyByZXBvc2l0b3Jpb3MgZGUgUG9zdGdyZVNRTCBvZmljaWFsZXMiCl9NU0dfVkVSU0lPTl9PRl9QT1NUR0lTX1RSWUlOR19UT19JTlNUQUxMPSJMYSB2ZXJzacOzbiBkZSBQb3N0Z2lzIHF1ZSBlc3TDoXMgaW50ZW50YW5kbyBpbnN0YWxhciIKX01TR19ET0VTTlRfRVhJU1RTX0FTX0FQVF9QR19QQUNLQUdFPSJubyBleGlzdGUgY29tbyB1biBwYXF1ZXRlIEFQVCBwYXJhIFBvc3RncmVTUUwiCl9NU0dfVEhFX1BBQ0tBR0U9ImVsIHBhcXVldGUiCl9NU0dfRE9FU05UX0VYSVNUU19JTl9QR19PRkZJQ0lBTF9SRVBPUz0ibm8gZXhpc3RlIGVuIGxvcyByZXBvc2l0b3Jpb3Mgb2ZpY2lhbGVzIGRlIFBvc3RncmVTUUwuIgpfTVNHX1NQRUNJRllfQU5fRVhJU1RFTlRfVkVSU0lPTj0iRXNwZWNpZmljYSB1bmEgdmVyc2nDs24gZXhpc3RlbnRlIGRlIGVudHJlIGxhcyBzaWd1aWVudGVzIHVzYW5kbyBlbCBwYXLDoW1ldHJvICctLXBvc3RnaXMtdmVyc2lvbic6IgpfTVNHX0NIRUNLSU5HX1BHX1NFUlZJQ0VfQ09ORklHPSJDb21wcm9iYW5kbyBsYSBjb25maWd1cmFjacOzbiBkZWwgc2VydmljaW8gJ3Bvc3RncmVzcWwnLi4uIgpfTVNHX0VOQUJMSU5HPSJIYWJpbGl0YW5kby4uLiIKX01TR19JVFNfRU5BQkxFRD0iRXN0w6EgaGFiaWxpdGFkbyIKX01TR19FUlJPUl9FTkFCTElOR19QR19TRVJWSUNFPSJPY3VycmnDsyB1biBlcnJvciBoYWJpbGl0YW5kbyBlbCBzZXJ2aWNpbyAncG9zdGdyZXNxbCcuIgpfTVNHX0VSUk9SPSJFcnJvciIKX01TR19FWElUX0NPREU9IkPDs2RpZ28gZGUgc2FsaWRhIgpfTVNHX0xBVU5DSElORz0iRWplY3V0YW5kby4uLiIKX01TR19QR19TRVJWSUNFX0NPVUxETlRfQkVfU1RBUlRFRD0iRWwgc2VydmljaW8gJ3Bvc3RncmVzcWwnIG5vIHB1ZG8gc2VyIGluaWNpYWRvLiIKX01TR19JVFNfSU5fU1RBVEU9IlNlIGVuY3VlbnRyYSBlbiBlc3RhZG8iCl9NU0dfSVRTX1JVTk5JTkc9IkVzdGEgZW4gZWplY3VjacOzbiIKX01TR19JTlNUQUxMSU5HX1BHPSJJbnN0YWxhbmRvIFBvc3RncmVTUUwuLi4iCl9NU0dfSU5TVEFMTElOR19QQUNLQUdFUz0iSW5zdGFsYW5kbyBwYXF1ZXRlcy4uLiIKX01TR19DSEVLSU5HX1BHX0VOVj0iQ29tcHJvYmFuZG8gZW50b3JubyBQb3N0Z3JlU1FMLi4uIgpfTVNHX0NIRUNLSU5HX1BBQ0tBR0VTPSJDb21wcm9iYW5kbyBwYXF1ZXRlcy4uLiIKX01TR19ESVNUUk9fVkVSU0lPTl9OT1RfU1VQUE9SVEVEPSJUdSB2ZXJzacOzbiBkZSBEZWJpYW4vVWJ1bnR1IG5vIGVzdMOhIHNvcG9ydGFkYSBwb3IgbG9zIHJlcG9zaXRvcmlvcyBvZmljaWFsZXMgZGUgUG9zdGdyZVNRTCIKX1BHREdfU09VUkNFU19MSVNUX0ZJTEVQQVRIPSIvZXRjL2FwdC9zb3VyY2VzLmxpc3QuZC9wZ2RnIgpJTkRFTlRfU1RSSU5HPSIiCl9WRVJTSU9OPSIiCl9JTkNMVURFX1BPU1RHSVM9MApfUE9TVEdJU19WRVJTSU9OPSIiCl9JTkNMVURFX1BHQURNSU49MApfSU5DTFVERV9QTFBZVEhPTjM9MApmdW5jdGlvbiB1c2FnZSB7CiAgICBjYXQgPDxIRUxQX1VTQUdFClVzYWdlOiB1bml4L2RlYmlhbi9pbnN0YWxsL3Bvc3RncmVzcWwvJF9TQ1JJUFRfRklMRU5BTUUgWy1oXSBbLWkgU1RSSU5HXSBbLXBndiBQT1NUR1JFU1FMX1ZFUlNJT05dIFstZ2lzXSBbLWdpc3YgUE9TVEdJU19WRVJTSU9OXSBbLXBnYWRdIFstcGxweTNdCgogIEluc3RhbGEgbG9zIHBhcXVldGVzIFBvc3RncmVTUUwgeSwgb3BjaW9uYWxtZW50ZSwgYWxndW5vcyBwYXF1ZXRlcyBhZGljaW9uYWxlcyBkZXNkZSBmdWVudGVzIG9maWNpYWxlcy4KICBUYW1iacOpbiBjb21wcnVlYmEgc2kgZWwgc2VydmljaW8gJ3Bvc3RncmVzJyBlc3TDoSBlbiBlamVjdWNpw7NuIHkgbG8gaGFiaWxpdGEsIHNpIG5vIGxvIGVzdMOhIHlhLgoKT3B0aW9uczoKICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4KICAtaSBTVFJJTkcsIC0taW5kZW50IFNUUklORyAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBzY3JpcHQgb3V0cHV0IHdpbGwgYmUgcHJlY2VkZWQgd2l0aCB0aGUgc3RyaW5nIGRlZmluZWQgaW4gdGhpcyBwYXJhbWV0ZXIuCiAgLXBndiBQT1NUR1JFU1FMX1ZFUlNJT04sIC0tcG9zdGdyZXNxbC12ZXJzaW9uIFBPU1RHUkVTUUxfVkVSU0lPTgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3N0Z3JlU1FMIHZlcnNpb24gdG8gaW5zdGFsbC4gSWYgbm90IHByb3ZpZGVkLCB0aGUgbGF0ZXN0IHZlcnNpb24gYXZhaWxhYmxlIGluIHJlcG9zaXRvcmllcyB3aWxsIGJlIGluc3RhbGxlZC4KICAtZ2lzLCAtLWluc3RhbGwtcG9zdGdpcyAgICAgICAgICAgSW5zdGFsbCBQb3N0Z2lzIHBhY2thZ2UgY29ycmVzcG9uZGVudCB0byB0aGUgUG9zdGdyZVNRTCB2ZXJzaW9uIHRvIGluc3RhbGwuCiAgLWdpc3YgUE9TVEdJU19WRVJTSU9OLCAtLXBvc3RnaXMtdmVyc2lvbiBQT1NUR0lTX1ZFUlNJT04KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3BlY2lmaWVzIHdoYXQgdmVyc2lvbiBvZiBQb3N0R0lTIHdpbGwgYmUgaW5zdGFsbGVkLiBPbmx5IGhhcyBlZmZlY3QgcGFzc2luZyAnLS1pbnN0YWxsLXBvc3RnaXMnIG9wdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgbm90IHByb3ZpZGVkLCB3aWxsIGJlIGluc3RhbGxlZCB0aGUgbGF0ZXN0IGF2YWlsYWJsZSB2ZXJzaW9uIG9mIHRoZSBwYWNrYWdlLgogIC1wZ2FkLCAtLWluc3RhbGwtcGdhZG1pbiAgICAgICAgICBJbnN0YWxsIGxhdGVzdCB2ZXJzaW9uIGF2YWlsYWJsZSBvZiAncGdhZG1pbicgcGFja2FnZS4KICAtcGxweTMsIC0taW5zdGFsbC1wbHB5dGhvbjMgICAgICAgSW5zdGFsbCBsYXRlc3QgdmVyc2lvbiBhdmFpbGFibGUgb2YgJ3Bvc3RncmVzcWwtcGxweXRob24zLSonIHBhY2thZ2UuCgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIElOREVOVF9TVFJJTkc9IiQyIgogICAgc2hpZnQgMgogICAgOzsKICAgIC1ofC0taGVscCkKICAgIHNoaWZ0CiAgICB1c2FnZQogICAgOzsgICAgCiAgICAtcGd2fC0tcG9zdGdyZXNxbC12ZXJzaW9uKQogICAgc2hpZnQKICAgIF9WRVJTSU9OPSQxCiAgICBzaGlmdAogICAgOzsKICAgIC1naXN8LS1pbnN0YWxsLXBvc3RnaXMpCiAgICBfSU5DTFVERV9QT1NUR0lTPTEKICAgIHNoaWZ0CiAgICA7OwogICAgLWdpc3Z8LS1wb3N0Z2lzLXZlcnNpb24pCiAgICBzaGlmdAogICAgX1BPU1RHSVNfVkVSU0lPTj0kMQogICAgc2hpZnQKICAgIDs7CiAgICAtcGdhZHwtLWluc3RhbGwtcGdhZG1pbikKICAgIF9JTkNMVURFX1BHQURNSU49MQogICAgc2hpZnQKICAgIDs7CiAgICAtcGxweTN8LS1pbnN0YWxsLXBscHl0aG9uMykKICAgIF9JTkNMVURFX1BMUFlUSE9OMz0xCiAgICBzaGlmdAogICAgOzsKICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxTY3JpcHREZXBlbmRlbmNpZXMoKSB7CiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgSU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFUz0oCiAgICAid2dldCIKICAgICJhcHRpdHVkZSIKICAgICJjdXJsIgogICkKICBmb3IgREVQIGluICIke0lOU1RBTExBVElPTl9ERVBFTkRFTkNJRVNbQF19IjsgZG8KICAgIGlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSAiJERFUCIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgICAgc3VkbyBwYWNtYW4gLVMgLS0gLXkgIiRERVAiID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICAgIGZpOwogIGRvbmU7Cn0KREVCSUFOX1ZFUlNJT049IiIKZnVuY3Rpb24gZ2V0RGViaWFuVmVyc2lvbigpIHsKICBERUJJQU5fVkVSU0lPTj0iJChsc2JfcmVsZWFzZSAtYyAtcykiCn0KZnVuY3Rpb24gY2hlY2tEZWJpYW5WZXJzaW9uU3VwcG9ydGVkKCkgewogIERFQklBTl9WRVJTSU9OX1NVUFBPUlRFRD0wCiAgX0dFVF9ERUJJQU5fVkVSU0lPTl9TVVBQT1JURUQ9JCgKICAgIGN1cmwgLXNMIGh0dHA6Ly9hcHQucG9zdGdyZXNxbC5vcmcvcHViL3JlcG9zL2FwdC9kaXN0cy8gfCAgICAgZ3JlcCAtbyAiJERFQklBTl9WRVJTSU9OLXBnZGciCiAgKQogIGlmIFsgIiRfR0VUX0RFQklBTl9WRVJTSU9OX1NVUFBPUlRFRCIgIT0gIiIgXTsgdGhlbgogICAgREVCSUFOX1ZFUlNJT05fU1VQUE9SVEVEPTEKICBmaTsKfQpmdW5jdGlvbiBzaWduU291cmNlcygpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiICAgICVzIiAiJF9NU0dfQURESU5HX1JFUE8iCiAgU0lHTl9QR0RHX0dQR19LRVlfU1RERVJSPSQoCiAgICB3Z2V0IC1xTyAtIGh0dHBzOi8vd3d3LnBvc3RncmVzcWwub3JnL21lZGlhL2tleXMvQUNDQzRDRjguYXNjIHwgICAgIHN1ZG8gYXB0LWtleSBhZGQgLSAyPiYxID4gL2Rldi9udWxsKQogIFNJR05fUEdER19HUEdfS0VZX0VYSVRfQ09ERT0kPwogIGlmIFsgJFNJR05fUEdER19HUEdfS0VZX0VYSVRfQ09ERSAtbmUgMCBdOyB0aGVuCiAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBwcmludGYgIlxuJXM6XG4iICIkX01TR19FUlJPUl9SRVRSSUVWSU5HX1BPU1RHUkVTUUxfUFVCTElDX0tFWSIgPiYyCiAgICBwcmludGYgIiVzXG4iICIkU0lHTl9QR0RHX0dQR19LRVlfU1RERVJSIiA+JjIKICAgIGV4aXQgJFNJR05fUEdER19HUEdfS0VZX0VYSVRfQ09ERQogIGZpOwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICAgJXMiICIkX01TR19VUERBVElOR19QQUNLQUdFUyIKICBzdWRvIHBhY21hbiB1cGRhdGUgPiAvZGV2L251bGwKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpmdW5jdGlvbiBwdXJnZVByZXZpb3VzUGFja2FnZXMoKSB7CiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiAgICAlcyIgIiRfTVNHX1JFTU9WSU5HX1BSRVZJT1VTX1BBQ0tBR0VTIgogIHN1ZG8gcGFjbWFuIC1SbnMgcG9zdGdyZXNxbCA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCn0KZnVuY3Rpb24gY2xlYW5QcmV2aW91c1NvdXJjZXMoKSB7CiAgX1BHREdfU09VUkNFU19FWFRTPSgKICAgICJsaXN0IgogICAgInNhdmUiCiAgICAiZGlzdFVwZ3JhZGUiCiAgKQogIGZvciBFWFQgaW4gIiR7X1BHREdfU09VUkNFU19FWFRTW0BdfSI7IGRvCiAgICBpZiBbIC1mICIke19QR0RHX1NPVVJDRVNfTElTVF9GSUxFUEFUSH0uJHtFWFR9IiBdOyB0aGVuCiAgICAgIHN1ZG8gcm0gLWYgIiR7X1BHREdfU09VUkNFU19MSVNUX0ZJTEVQQVRIfS4ke0VYVH0iID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICAgIGZpOwogIGRvbmUKfQpmdW5jdGlvbiBjcmVhdGVTb3VyY2VzTGlzdCgpIHsKICB0b3VjaCAiJF9QR0RHX1NPVVJDRVNfTElTVF9GSUxFUEFUSC5saXN0IgogIGVjaG8gImRlYiBodHRwOi8vYXB0LnBvc3RncmVzcWwub3JnL3B1Yi9yZXBvcy9hcHQvICRERUJJQU5fVkVSU0lPTi1wZ2RnIG1haW4iID4gICAgICIkX1BHREdfU09VUkNFU19MSVNUX0ZJTEVQQVRILmxpc3QiCn0KZnVuY3Rpb24gY2hlY2tQb3N0Z3Jlc3FsU2VydmljZUV4aXN0cygpIHsKICBfUE9TVEdSRVNRTF9TRVJWSUNFX0VYSVNUUz0xCiAgaWYgISBzdWRvIHN5c3RlbWN0bCBzdGF0dXMgcG9zdGdyZXNxbCA+IC9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBfUE9TVEdSRVNRTF9TRVJWSUNFX0VYSVNUUz0wCiAgZmk7Cn0KX0xBU1RFU1RfU1RBQkxFX1BPU1RHUkVTX1ZFUlNJT049IiIKZnVuY3Rpb24gZ2V0TGFzdGVzdFN0YWJsZVBvc3RncmVzVmVyc2lvbigpIHsKICBfTEFTVEVTVF9TVEFCTEVfUE9TVEdSRVNfVkVSU0lPTj0kKAogICAgc3VkbyBhcHRpdHVkZSBzZWFyY2ggIn5uIF5wb3N0Z3Jlc3FsIiB8ICAgICBncmVwIC1FbyAiIHBvc3RncmVzcWwtWzAtOV17MSwzfS57MCwxfVswLTldezEsM30gIiB8ICAgICBhd2sgJ3sgcHJpbnQgJDEgfScgfCAgICAgc29ydCAtLXZlcnNpb24tc29ydCB8ICAgICB0YWlsIC1uIDEgfCAgICAgY3V0IC1kJy0nIC1mMgogICkKfQpfUE9TVEdSRVNfVkVSU0lPTl9UT19JTlNUQUxMPSIiCmZ1bmN0aW9uIGdldFBvc3RncmVzVmVyc2lvblRvSW5zdGFsbCgpIHsKICBpZiBbICIkX1ZFUlNJT04iID0gIiIgXTsgdGhlbgogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyIgIiRfTVNHX1JFVFJJRVZJTkdfTEFTVEVTVF9TVEFCTEVfVkVSU0lPTiIKICAgIGdldExhc3Rlc3RTdGFibGVQb3N0Z3Jlc1ZlcnNpb24KICAgIF9QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEw9IiRfTEFTVEVTVF9TVEFCTEVfUE9TVEdSRVNfVkVSU0lPTiIKICAgIHByaW50ZiAiICh2JXMpIiAiJF9QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEwiCiAgZWxzZQogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyAoJXMpLi4uIiAiJF9NU0dfQ0hFQ0tJTkdfQVZBSUxBQkxFX1ZFUlNJT04iICIkX1ZFUlNJT04iCiAgICBfUE9TVEdSRVNfVkVSU0lPTl9UT19JTlNUQUxMPSQoCiAgICAgIHN1ZG8gYXB0aXR1ZGUgc2VhcmNoICJ+biBecG9zdGdyZXNxbCIgfCAgICAgICBncmVwIC1FbyAiIHBvc3RncmVzcWwtWzAtOV17MSwzfS57MCwxfVswLTldezEsM30gIiB8ICAgICAgIGF3ayAneyBwcmludCAkMSB9JyB8ICAgICAgIGdyZXAgLW8gIiRfVkVSU0lPTiIgfCAgICAgICB0ciAtZCAnXG4nCiAgICApCiAgICBpZiBbICIkX1BPU1RHUkVTX1ZFUlNJT05fVE9fSU5TVEFMTCIgPSAiIiBdOyB0aGVuCiAgICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgICAgcHJpbnRmICIgICAgJXMgKCVzKS5cbiIgIiRfTVNHX1ZFUlNJT05fTk9UX09GRklDSUFMTFlfQVZBSUxBQkxFIiAiJF9WRVJTSU9OIiA+JjIKICAgICAgZXhpdCAxCiAgICBmaTsKICBmaTsKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpfUE9TVEdSRVNfVkVSU0lPTl9JTlNUQUxMRUQ9IiIKZnVuY3Rpb24gZ2V0SW5zdGFsbGVkUG9zdGdyZXNWZXJzaW9uKCkgewogIF9QT1NUR1JFU19WRVJTSU9OX0lOU1RBTExFRD0kKAogICAgcHNxbCAtLXZlcnNpb24gfCAgICAgY3V0IC1kJyAnIC1mMyB8ICAgICBjdXQgLWQnLicgLWYxIHx8IGV4aXQgJD8KICApCn0KZnVuY3Rpb24gaW5zdGFsbFBvc3RncmVzUGFja2FnZXMoKSB7CiAgUE9TVEdSRVNfUEFDS0FHRVM9KAogICAgInBvc3RncmVzcWwtJF9QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEwiCiAgICAicG9zdGdyZXNxbC1jbGllbnQtJF9QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEwiCiAgICAicG9zdGdyZXNxbC1jb250cmliLSRfUE9TVEdSRVNfVkVSU0lPTl9UT19JTlNUQUxMIgogICAgInBvc3RncmVzcWwtc2VydmVyLWRldi0kX1BPU1RHUkVTX1ZFUlNJT05fVE9fSU5TVEFMTCIKICAgICJsaWJwcS1kZXYiCiAgKQogIGlmIFsgJF9JTkNMVURFX1BPU1RHSVMgLWVxIDEgXTsgdGhlbgogICAgaWYgWyAiJF9QT1NUR0lTX1ZFUlNJT04iID0gIiIgXTsgdGhlbgogICAgICBfUE9TVEdJU19QQUNLQUdFPSQoCiAgICAgICAgc3VkbyBhcHRpdHVkZSBzZWFyY2ggIn5uIF5wb3N0Z3Jlc3FsLSR7X1BPU1RHUkVTX1ZFUlNJT05fVE9fSU5TVEFMTH0tcG9zdGdpcyIgfCAgICAgICAgIGdyZXAgLUVvICIgcG9zdGdyZXNxbC0ke19QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEx9LXBvc3RnaXMtWzAtOV17MSwzfS57MCwxfVswLTldezAsM30gIiB8ICAgICAgICAgYXdrICd7IHByaW50ICQxIH0nIHwgICAgICAgICBzb3J0IC0tdmVyc2lvbi1zb3J0IHwgICAgICAgICB0YWlsIC1uIDEKICAgICAgKQogICAgZWxzZQogICAgICBfUE9TVEdJU19QQUNLQUdFX0VYSVNUUz0kKAogICAgICAgIHN1ZG8gYXB0aXR1ZGUgc2VhcmNoICJ+biBecG9zdGdyZXNxbC0ke19QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEx9LXBvc3RnaXMtJHtfUE9TVEdJU19WRVJTSU9OfSIKICAgICAgKQogICAgICBpZiBbICIkX1BPU1RHSVNfUEFDS0FHRV9FWElTVFMiID0gIiIgXTsgdGhlbgogICAgICAgIHByaW50ZiAiXG4lcyAodiVzKSIgIiRfTVNHX1ZFUlNJT05fT0ZfUE9TVEdJU19UUllJTkdfVE9fSU5TVEFMTCIgIiRfUE9TVEdJU19WRVJTSU9OIiA+JjIKICAgICAgICBwcmludGYgIiAlcyB2JXMiICIkX01TR19ET0VTTlRfRVhJU1RTX0FTX0FQVF9QR19QQUNLQUdFIiAiJF9QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEwiID4mMgogICAgICAgIHByaW50ZiAiICglcyAncG9zdGdyZXNxbC0lcy1wb3N0Z2lzJXMnKSIgIiRfTVNHX1RIRV9QQUNLQUdFIiAiJF9QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEwiICIkX1BPU1RHSVNfVkVSU0lPTiIgPiYyCiAgICAgICAgcHJpbnRmICIgJXNcbiIgIiRfTVNHX0RPRVNOVF9FWElTVFNfSU5fUEdfT0ZGSUNJQUxfUkVQT1MiID4mMgogICAgICAgIHByaW50ZiAiJXNcbiIgIiRfTVNHX1NQRUNJRllfQU5fRVhJU1RFTlRfVkVSU0lPTiIgPiYyCiAgICAgICAgc3VkbyBhcHRpdHVkZSBzZWFyY2ggIn5uIF5wb3N0Z3Jlc3FsLSR7X1BPU1RHUkVTX1ZFUlNJT05fVE9fSU5TVEFMTH0tcG9zdGdpcyIgPiYyCiAgICAgICAgZXhpdCAxCiAgICAgIGZpOwogICAgICBfUE9TVEdJU19QQUNLQUdFPSJwb3N0Z3Jlc3FsLSR7X1BPU1RHUkVTX1ZFUlNJT05fVE9fSU5TVEFMTH0tcG9zdGdpcy0ke19QT1NUR0lTX1ZFUlNJT059IgogICAgZmk7CiAgICBQT1NUR1JFU19QQUNLQUdFUys9KAogICAgICAiJF9QT1NUR0lTX1BBQ0tBR0UiCiAgICApCiAgZmk7CiAgaWYgWyAkX0lOQ0xVREVfUEdBRE1JTiAtZXEgMSBdOyB0aGVuCiAgICBfTEFTVEVTVF9TVEFCTEVfUEdBRE1JTl9QQUNLQUdFPSQoCiAgICAgIHN1ZG8gYXB0aXR1ZGUgc2VhcmNoICJ+biBecGdhZG1pbiIgfCAgICAgICBncmVwIC1FbyAiIHBnYWRtaW5bMC05XXsxLDN9LnswLDF9WzAtOV17MCwzfSAiIHwgICAgICAgYXdrICd7IHByaW50ICQxIH0nIHwgICAgICAgc29ydCAtLXZlcnNpb24tc29ydCB8ICAgICAgIHRhaWwgLW4gMQogICAgKQogICAgUE9TVEdSRVNfUEFDS0FHRVMrPSgKICAgICAgIiRfTEFTVEVTVF9TVEFCTEVfUEdBRE1JTl9QQUNLQUdFIgogICAgKQogIGZpOwogIGlmIFsgJF9JTkNMVURFX1BMUFlUSE9OMyAtZXEgMSBdOyB0aGVuCiAgICBfTEFTVEVTVF9TVEFCTEVfUExQWVRIT04zX0NPTVBBVElCTEVfUEFDS0FHRT0kKAogICAgICBzdWRvIGFwdGl0dWRlIHNlYXJjaCAifm4gXnBvc3RncmVzcWwtcGxweXRob24zLSR7X1BPU1RHUkVTX1ZFUlNJT05fVE9fSU5TVEFMTH0iIHwgICAgICAgaGVhZCAtbiAxIHwgICAgICAgZ3JlcCAtbyAiIHBvc3RncmVzcWwtcGxweXRob24zLSR7X1BPU1RHUkVTX1ZFUlNJT05fVE9fSU5TVEFMTH0iIHwgICAgICAgYXdrICd7IHByaW50ICQxIH0nCiAgICApCiAgICBpZiBbICIkX0xBU1RFU1RfU1RBQkxFX1BMUFlUSE9OM19DT01QQVRJQkxFX1BBQ0tBR0UiICE9ICIiIF07IHRoZW4KICAgICAgUE9TVEdSRVNfUEFDS0FHRVMrPSgKICAgICAgICAiJF9MQVNURVNUX1NUQUJMRV9QTFBZVEhPTjNfQ09NUEFUSUJMRV9QQUNLQUdFIgogICAgICApCiAgICBmaTsKICBmaTsKICBwcmludEluZGVudAogIHByaW50ZiAiICAlc1xuIiAiJDEiCiAgZm9yIFBBQ0tBR0UgaW4gIiR7UE9TVEdSRVNfUEFDS0FHRVNbQF19IjsgZG8KICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgICAlcyIgIiRQQUNLQUdFIgogICAgaWYgW1sgIiQoc3VkbyBwYWNtYW4gLVFpICIkUEFDS0FHRSIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgICAgX0FQVF9JTlNUQUxMX1NUREVSUj0kKHN1ZG8gcGFjbWFuIC1TIC0tIC15ICIkUEFDS0FHRSIgPiAvZGV2L251bGwgMj4mMSkKICAgICAgX0FQVF9JTlNUQUxMX0VYSVRfQ09ERT0kPwogICAgICBpZiBbICRfQVBUX0lOU1RBTExfRVhJVF9DT0RFIC1uZSAwIF07IHRoZW4KICAgICAgICBwcmludGYgIiVzIiAiJF9BUFRfSU5TVEFMTF9TVERFUlIiID4mMgogICAgICAgIGV4aXQgJF9BUFRfSU5TVEFMTF9FWElUX0NPREUKICAgICAgZmk7CiAgICBmaTsKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGRvbmUKfQpmdW5jdGlvbiBjaGVja1Bvc3RncmVzcWxTZXJ2aWNlQ29uZmlnKCkgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzXG4iICIkX01TR19DSEVDS0lOR19QR19TRVJWSUNFX0NPTkZJRyIKICBwcmludEluZGVudAogIF9QT1NUR1JFU1FMX1NFUlZJQ0VfRU5BQkxFRF9GT1VORD0kKAogICAgc3lzdGVtY3RsIGxpc3QtdW5pdC1maWxlcyB8ICAgICBncmVwIGVuYWJsZWQgfCAgICAgZ3JlcCBwb3N0Z3Jlc3FsKQogIGlmIFsgIiRfUE9TVEdSRVNRTF9TRVJWSUNFX0VOQUJMRURfRk9VTkQiID0gIiIgXTsgdGhlbgogICAgcHJpbnRmICIgICAgJXMiICIkX01TR19FTkFCTElORyIKICAgIF9FTkFCTEVfUE9TVEdSRVNRTF9TRVJWRVJfT1VUUFVUPSQoCiAgICAgIHN1ZG8gc3lzdGVtY3RsIGVuYWJsZSBwb3N0Z3Jlc3FsLnNlcnZpY2UgMj4mMSA+IC9kZXYvbnVsbAogICAgKQogICAgX0VOQUJMRV9QT1NUR1JFU1FMX1NFUlZFUl9FWElUX0NPREU9JD8KICAgIGlmIFsgJF9FTkFCTEVfUE9TVEdSRVNRTF9TRVJWRVJfRVhJVF9DT0RFIC1uZSAwIF07IHRoZW4KICAgICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgICBwcmludGYgIiVzXG4iICIkX01TR19FUlJPUl9FTkFCTElOR19QR19TRVJWSUNFIiA+JjIKICAgICAgcHJpbnRmICIlczogJWRcbiIgIiRfTVNHX0VYSVRfQ09ERSIgIiRfRU5BQkxFX1BPU1RHUkVTUUxfU0VSVkVSX0VYSVRfQ09ERSIgPiYyCiAgICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FUlJPUiIgIiRfRU5BQkxFX1BPU1RHUkVTUUxfU0VSVkVSX09VVFBVVCIgPiYyCiAgICAgIGV4aXQgJF9FTkFCTEVfUE9TVEdSRVNRTF9TRVJWRVJfRVhJVF9DT0RFCiAgICBmaTsKICBlbHNlCiAgICBwcmludGYgIiAgICAlcyIgIiRfTVNHX0lUU19FTkFCTEVEIgogIGZpOwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIHByaW50SW5kZW50CiAgX1BPU1RHUkVTUUxfU0VSVklDRV9TVEFUVVM9JCgKICAgIHN1ZG8gc3lzdGVtY3RsIHNob3cgLXAgQWN0aXZlU3RhdGUgcG9zdGdyZXNxbCB8ICAgICBjdXQgLWQnPScgLWYyIHwgICAgIHRyIC1kICdcbicpCiAgaWYgWyAiJF9QT1NUR1JFU1FMX1NFUlZJQ0VfU1RBVFVTIiAhPSAiYWN0aXZlIiBdOyB0aGVuCiAgICBwcmludGYgIiAgICAlcyIgIiRfTVNHX0xBVU5DSElORyIKICAgIHN1ZG8gc3lzdGVtY3RsIHN0YXJ0IHBvc3RncmVzcWwgPiAvZGV2L251bGwKICAgIF9QT1NUR1JFU1FMX1NFUlZJQ0VfU1RBUlRFRD0kPwogICAgaWYgWyAkX1BPU1RHUkVTUUxfU0VSVklDRV9TVEFSVEVEIC1uZSAwIF07IHRoZW4KICAgICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgICBwcmludGYgIiVzXG4iICIkX01TR19QR19TRVJWSUNFX0NPVUxETlRfQkVfU1RBUlRFRCIgPiYyCiAgICAgIHByaW50ZiAiJXMgJyVzJy5cbiIgIiRfTVNHX0lUU19JTl9TVEFURSIgIiRfUE9TVEdSRVNRTF9TRVJWSUNFX1NUQVRVUyIgPiYyCiAgICAgIGV4aXQgJF9QT1NUR1JFU1FMX1NFUlZJQ0VfU1RBUlRFRAogICAgZmk7CiAgZWxzZQogICAgcHJpbnRmICIgICAgJXMiICIkX01TR19JVFNfUlVOTklORyIKICBmaTsKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpmdW5jdGlvbiBpbnN0YWxsUG9zdGdyZVNRTCgpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiICAlc1xuIiAiJF9NU0dfSU5TVEFMTElOR19QRyIKICBnZXREZWJpYW5WZXJzaW9uCiAgY2hlY2tEZWJpYW5WZXJzaW9uU3VwcG9ydGVkCiAgaWYgWyAkREVCSUFOX1ZFUlNJT05fU1VQUE9SVEVEIC1lcSAwIF07IHRoZW4KICAgIHByaW50ZiAiJXMgKCVzKS4iICIkX01TR19ESVNUUk9fVkVSU0lPTl9OT1RfU1VQUE9SVEVEIiAiJERFQklBTl9WRVJTSU9OIiA+JjIKICAgIGV4aXQgMQogIGZpOwogIGNsZWFuUHJldmlvdXNTb3VyY2VzCiAgcHVyZ2VQcmV2aW91c1BhY2thZ2VzCiAgY3JlYXRlU291cmNlc0xpc3QKICBzaWduU291cmNlcwogIGdldFBvc3RncmVzVmVyc2lvblRvSW5zdGFsbAogIGluc3RhbGxQb3N0Z3Jlc1BhY2thZ2VzICIkX01TR19JTlNUQUxMSU5HX1BBQ0tBR0VTIgp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiVzXG4iICIkX01TR19DSEVLSU5HX1BHX0VOViIKICBjaGVja1Bvc3RncmVzcWxTZXJ2aWNlRXhpc3RzCiAgaWYgWyAkX1BPU1RHUkVTUUxfU0VSVklDRV9FWElTVFMgLWVxIDAgXTsgdGhlbgogICAgaW5zdGFsbFBvc3RncmVTUUwKICBlbHNlCiAgICBnZXRJbnN0YWxsZWRQb3N0Z3Jlc1ZlcnNpb24KICAgIF9QT1NUR1JFU19WRVJTSU9OX1RPX0lOU1RBTEw9JF9QT1NUR1JFU19WRVJTSU9OX0lOU1RBTExFRAogICAgaW5zdGFsbFBvc3RncmVzUGFja2FnZXMgIiRfTVNHX0NIRUNLSU5HX1BBQ0tBR0VTIgogIGZpOwogIGNoZWNrUG9zdGdyZXNxbFNlcnZpY2VDb25maWcKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOw=='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
