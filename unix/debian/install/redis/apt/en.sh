#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCl9NU0dfRVhFQ1VURURfQVNfU1VQRVJVU0VSPSJUaGlzIHNjcmlwdCBuZWVkcyB0byBiZSBleGVjdXRlZCBhcyBzdXBlcnVzZXIuIgpfTVNHX1NFVFRJTkdfUkVESVNfRUNPU1lTVEVNPSJTZXR0aW5nIHVwIFJlZGlzIGVjb3N5c3RlbS4uLiIKX01TR19DSEVDS0lOR19QQUNLQUdFUz0iQ2hlY2tpbmcgcGFja2FnZXMuLi4iCl9NU0dfQ0hFQ0tJTkdfU0VSVklDRV9DT05GSUc9IkNoZWNraW5nIHNlcnZpY2UgY29uZmlndXJhdGlvbi4uLiIKX01TR19JVFNfRU5BQkxFRD0iSXQncyBlbmFibGVkIgpfTVNHX0VSUk9SX0VOQUJMSU5HX1NFUlZJQ0U9IkFuIGVycm9yIGhhcHBlbiBlbmFibGluZyAncmVkaXMtc2VydmVyJyBzZXJ2aWNlLiIKX01TR19FWElUX0NPREU9IkV4aXQgY29kZSIKX01TR19FUlJPUj0iRXJyb3IiCl9NU0dfSVRTX1JVTk5JTkc9Ikl0J3MgcnVubmluZyIKX01TR19TRVJWSUNFX0NPVUxETlRfQkVfU1RBUlRFRD0iVGhlIHNlcnZpY2UgJ3JlZGlzLXNlcnZlcicgY291bGQgbm90IGJlIHN0YXJ0ZWQuIgpfTVNHX0lUU19PTl9TVEFURT0iSXQncyBvbiBzdGF0ZSIKaWYgW1sgJCgvdXNyL2Jpbi9pZCAtdSkgLW5lIDAgXV07IHRoZW4KICBwcmludGYgIiVzXG4iICIkX01TR19FWEVDVVRFRF9BU19TVVBFUlVTRVIiID4mMgogIGV4aXQgMQpmaTsKSU5ERU5UX1NUUklORz0iIgpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtLWluZGVudCkKICAgIHNoaWZ0CiAgICBJTkRFTlRfU1RSSU5HPSQxCiAgICBzaGlmdAogICAgOzsKICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CnByaW50SW5kZW50CnByaW50ZiAiJXNcbiIgIiRfTVNHX1NFVFRJTkdfUkVESVNfRUNPU1lTVEVNIgpwcmludEluZGVudApwcmludGYgIiAgJXNcbiIgIiRfTVNHX0NIRUNLSU5HX1BBQ0tBR0VTIgpwcmludEluZGVudApwcmludGYgIiAgICByZWRpcy1zZXJ2ZXIiCmlmIFsgIiQoY29tbWFuZCAtdiBwYWNtYW4pIiA9ICIiIF07IHRoZW4KICBpZiBbIC16ICIkX1NDUklQVF9GSUxFTkFNRSIgXTsgdGhlbgogICAgZmlsZXBhdGg9InNyYy91bml4L18vZG93bmxvYWQvcGFjYXB0L21haW4uc2giCiAgICBiYXNoICIkZmlsZXBhdGgiID4gL2Rldi9udWxsCiAgZWxzZQogICAgdXJsPSJodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vZG93bmxvYWQvcGFjYXB0LyRfU0NSSVBUX0ZJTEVOQU1FIgogICAgY3VybCAtc0wgIiR1cmwiIHwgc3VkbyBiYXNoIC0gPiAvZGV2L251bGwKICBmaTsKZmk7CmlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSByZWRpcy1zZXJ2ZXIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICBzdWRvIHBhY21hbiAtUyAtLSAteSByZWRpcy1zZXJ2ZXIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwpmaTsKX1JFRElTX1NFUlZFUl9WRVJTSU9OPSQocmVkaXMtc2VydmVyIC0tdmVyc2lvbiB8IGN1dCAtZCc9JyAtZjIgfCBjdXQgLWQnICcgLWYxKQpwcmludGYgIiAodiVzKSBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIgIiRfUkVESVNfU0VSVkVSX1ZFUlNJT04iCnByaW50SW5kZW50CnByaW50ZiAiICAlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfU0VSVklDRV9DT05GSUciCnByaW50SW5kZW50CnByaW50ZiAiICAgICVzIiAiJF9NU0dfSVRTX0VOQUJMRUQiCl9SRURJU19TRVJWSUNFX0VOQUJMRURfRk9VTkQ9JChzeXN0ZW1jdGwgbGlzdC11bml0LWZpbGVzIHwgZ3JlcCBlbmFibGVkIHwgZ3JlcCByZWRpcy1zZXJ2ZXIpCmlmIFsgIiRfUkVESVNfU0VSVklDRV9FTkFCTEVEX0ZPVU5EIiA9ICIiIF07IHRoZW4KICBfRU5BQkxFX1JFRElTX1NFUlZFUl9PVVRQVVQ9JCgKICAgIHN1ZG8gc3lzdGVtY3RsIGVuYWJsZSByZWRpcy1zZXJ2ZXIuc2VydmljZSAyPiYxID4gL2Rldi9udWxsCiAgKQogIF9FTkFCTEVfUkVESVNfU0VSVkVSX0VYSVRfQ09ERT0kPwogIGlmIFsgJF9FTkFCTEVfUkVESVNfU0VSVkVSX0VYSVRfQ09ERSAtbmUgMCBdOyB0aGVuCiAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBwcmludGYgIiVzXG4iICIkX01TR19FUlJPUl9FTkFCTElOR19TRVJWSUNFIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FWElUX0NPREUiICIkX0VOQUJMRV9SRURJU19TRVJWRVJfRVhJVF9DT0RFIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FUlJPUiIgIiRfRU5BQkxFX1JFRElTX1NFUlZFUl9PVVRQVVQiID4mMgogICAgZXhpdCAkX0VOQUJMRV9SRURJU19TRVJWRVJfRVhJVF9DT0RFCiAgZmk7CmZpOwpwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKcHJpbnRJbmRlbnQKcHJpbnRmICIgICAgJXMiICIkX01TR19JVFNfUlVOTklORyIKX1JFRElTX1NFUlZJQ0VfU1RBVFVTPSQoCiAgc3VkbyBzeXN0ZW1jdGwgc2hvdyAtcCBBY3RpdmVTdGF0ZSByZWRpcy1zZXJ2ZXIgfCBcCiAgY3V0IC1kJz0nIC1mMiB8IFwKICB0ciAtZCAnXG4nKQppZiBbICIkX1JFRElTX1NFUlZJQ0VfU1RBVFVTIiAhPSAiYWN0aXZlIiBdOyB0aGVuCiAgc3VkbyBzeXN0ZW1jdGwgc3RhcnQgcmVkaXMtc2VydmVyID4gL2Rldi9udWxsCiAgX1JFRElTX1NFUlZJQ0VfU1RBUlRFRD0kPwogIGlmIFsgJF9SRURJU19TRVJWSUNFX1NUQVJURUQgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICIlc1xuIiAiJF9NU0dfU0VSVklDRV9DT1VMRE5UX0JFX1NUQVJURUQiID4mMgogICAgcHJpbnRmICIlcyAnJXMnLlxuIiAiJF9NU0dfSVRTX09OX1NUQVRFIiAiJF9SRURJU19TRVJWSUNFX1NUQVRVUyIgPiYyCiAgICBleGl0ICRfUkVESVNfU0VSVklDRV9TVEFSVEVECiAgZmk7CmZpOwpwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIK'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
