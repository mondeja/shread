#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfVVJMPSJVUkwiCl9NU0dfRVJST1I9IkVycm9yIgpfTVNHX0VSUk9SX0NPREU9IkPDs2RpZ28gZGUgZXJyb3IiCl9NU0dfTk9UX0ZPVU5EPSJObyBlbmNvbnRyYWRvIgpfTVNHX0NIRUNLSU5HX0RPQ0tFUl9DT01QT1NFPSIiCl9NU0dfRVJST1JfUkVUUklFVklOR19ET0NLRVJfQ09NUE9TRV9SRUxFQVNFUz0iT2N1cnJpw7MgdW4gZXJyb3Igb2J0ZW5pZW5kbyBsYSBpbmZvcm1hY2nDs24gZGUgbGFzIHJlbGVhc2VzIGRlIERvY2tlciBkZSBsYSBBUEkgZGUgR2l0aHViLiIKX01TR19FUlJPUl9QQVJTSU5HX1BFTlVMVElNQVRFX0RPQ0tFUl9DT01QT1NFX1JFTEVBU0VTX1ZFUlNJT049Ik9jdXJyacOzIHVuIGVycm9yIHBhcnNlYW5kbyBsYSBwZW7Dumx0aW1hIHZlcnNpw7NuIGRlIGxhcyByZWxlYXNlcyBkZSBEb2NrZXIgQ29tcG9zZSBkZSBsYSBBUEkgZGUgR2l0aHViLiIKX01TR19FUlJPUl9SRVRSSUVWSU5HX0xBU1RfRE9DS0VSX0NPTVBPU0VfVkVSU0lPTj0iT2N1cnJpw7MgdW4gZXJyb3Igb2J0ZW5pZW5kbyBsYSDDumx0aW1hIHZlcnNpw7NuIGRlIERvY2tlciBDb21wb3NlIGRlIGxhIEFQSSBkZSBHaXRodWIuIgpfTVNHX0VSUk9SX1JFVFJJRVZJTkdfTEFTVF9BVkFJTEFCTEVfVkVSU0lPTj0iT2J0ZW5pZW5kbyBsYSDDumx0aW1hIHZlcnNpw7NuIGRpc3BvbmlibGUuLi4iCl9NU0dfRVJST1JfRE9XTkxPQURJTkdfRE9DS0VSX0NPTVBPU0U9Ik9jdXJyacOzIHVuIGVycm9yIGRlc2NhcmdhbmRvIERvY2tlciBDb21wb3NlIgpfTVNHX0RPV05MT0FESU5HX0RPQ0tFUl9DT01QT1NFPSJEZXNjYXJnYW5kbyBEb2NrZXIgQ29tcG9zZSIKX01TR19ET0NLRVJfQ09NUE9TRV9GT1VORF9JTlNUQUxMRUQ9IkVuY29udHJhZG8gRG9ja2VyIENvbXBvc2UgaW5zdGFsYWRvIGVuIGVsIHNpc3RlbWEiCl9NU0dfVVBEQVRJTkdfRE9DS0VSX0NPTVBPU0U9IkFjdHVhbGl6YW5kbyBEb2NrZXIgQ29tcG9zZSIKR0lUSFVCX0FQSV9DVVJMX0FVVEg9IiIKaWYgWyAtbiAiJEdJVEhVQl9VU0VSTkFNRSIgXSAmJiBbIC1uICIkR0lUSFVCX1RPS0VOIiBdOyB0aGVuCiAgR0lUSFVCX0FQSV9DVVJMX0FVVEg9IiRHSVRIVUJfVVNFUk5BTUU6JEdJVEhVQl9UT0tFTiIKZmk7CklOREVOVF9TVFJJTkc9IiIKZnVuY3Rpb24gdXNhZ2UgewogICAgY2F0IDw8SEVMUF9VU0FHRQpVc2FnZTogdW5peC9kZWJpYW4vaW5zdGFsbC9kb2NrZXIvY29tcG9zZS8kX1NDUklQVF9GSUxFTkFNRSBbLWhdIFstaSBTVFJJTkddIAoKICBJbnN0YWxscyBvciB1cGdyYWRlIERvY2tlciBDb21wb3NlIHJldHJpZXZpbmcgc291cmNlIGNvZGUgZnJvbSB0aGVpciBHaXRodWIgcmVwb3NpdG9yeS4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIElOREVOVF9TVFJJTkc9IiQyIgogICAgc2hpZnQgMgogICAgOzsKICAgIC1ofC0taGVscCkKICAgIHNoaWZ0CiAgICB1c2FnZQogICAgOzsgICAgICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxTY3JpcHREZXBlbmRlbmNpZXMoKSB7CiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgSU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFUz0oCiAgICAianEiCiAgKQogIGZvciBERVAgaW4gIiR7SU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFU1tAXX0iOyBkbwogICAgaWYgW1sgIiQoc3VkbyBwYWNtYW4gLVFpICIkREVQIiAyPiAvZGV2L251bGwgfCBncmVwIFN0YXR1cykiICE9ICJTdGF0dXM6IGluc3RhbGwgb2sgaW5zdGFsbGVkIiBdXTsgdGhlbgogICAgICBzdWRvIHBhY21hbiAtUyAtLSAteSAiJERFUCIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogICAgZmk7CiAgZG9uZQp9Cl9HRVRfRE9DS0VSX0NPTVBPU0VfVkVSU0lPTl9JTkRFWD0xCl9HRVRfRE9DS0VSX0NPTVBPU0VfVkVSU0lPTl80MDRfQVRURU1QVFM9MApfR0VUX0RPQ0tFUl9DT01QT1NFX1ZFUlNJT05fNDA0X01BWF9BVFRFTVBUUz0xMApmdW5jdGlvbiBjaGVja0RvY2tlckNvbXBvc2VWZXJzaW9uVG9Eb3dubG9hZEV4aXN0cygpIHsKICBfRE9XTkxPQURfRE9DS0VSX0NPTVBPU0VfVVJMPSJodHRwczovL2dpdGh1Yi5jb20vZG9ja2VyL2NvbXBvc2UvcmVsZWFzZXMvZG93bmxvYWQvdiRfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OL2RvY2tlci1jb21wb3NlLSQodW5hbWUgLXMpLSQodW5hbWUgLW0pIgogIF9ET1dOTE9BRF9ET0NLRVJfQ09NUE9TRV9VUkxfRVhJU1RTPTAKICBpZiBjdXJsIC0tb3V0cHV0IC9kZXYvbnVsbCAtLXNpbGVudCAtLWhlYWQgLS1mYWlsICIkX0RPV05MT0FEX0RPQ0tFUl9DT01QT1NFX1VSTCI7IHRoZW4KICAgIF9ET1dOTE9BRF9ET0NLRVJfQ09NUE9TRV9VUkxfRVhJU1RTPTEKICBmaTsKfQpfR0VUX0RPQ0tFUl9DT01QT1NFX0xBVEVTVF9WRVJTSU9OX0FUVEVNUFRTPTAKX0dFVF9ET0NLRVJfQ09NUE9TRV9MQVRFU1RfVkVSU0lPTl9NQVhfQVRURU1QVFM9NQpfR0VUX0RPQ0tFUl9DT01QT1NFX0xBVEVTVF9WRVJTSU9OX1VSTD0iaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9kb2NrZXIvY29tcG9zZS9yZWxlYXNlcyIKZnVuY3Rpb24gZ2V0RG9ja2VyQ29tcG9zZUxhdGVzdFZlcnNpb24oKSB7CiAgX0RPQ0tFUl9DT01QT1NFX1JFTEVBU0VTX0lORk89IiQoY3VybCAtc0wgIiRHSVRIVUJfQVBJX0NVUkxfQVVUSCIgIiRfR0VUX0RPQ0tFUl9DT01QT1NFX0xBVEVTVF9WRVJTSU9OX1VSTCIgMj4mMSkiCiAgX0RPQ0tFUl9DT01QT1NFX1JFTEVBU0VTX0lORk9fTUVTU0FHRT0iJChlY2hvICIkX0RPQ0tFUl9DT01QT1NFX1JFTEVBU0VTX0lORk8iIHwganEgLXIgJy5tZXNzYWdlJyAyPiYxKSIKICBfRE9DS0VSX0NPTVBPU0VfUkVMRUFTRVNfSU5GT19NRVNTQUdFX0VYSVRfQ09ERT0kPwogIGlmIFsgJF9ET0NLRVJfQ09NUE9TRV9SRUxFQVNFU19JTkZPX01FU1NBR0VfRVhJVF9DT0RFIC1lcSAwIF07IHRoZW4KICAgIHByaW50ZiAiXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzXG4iICIkX01TR19FUlJPUl9SRVRSSUVWSU5HX0RPQ0tFUl9DT01QT1NFX1JFTEVBU0VTIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19VUkwiICIkX0dFVF9ET0NLRVJfQ09NUE9TRV9MQVRFU1RfVkVSU0lPTl9VUkwiID4mMgogICAgcHJpbnRmICIlczogJXNcbiIgIiRfTVNHX0VSUk9SIiAiJF9ET0NLRVJfQ09NUE9TRV9SRUxFQVNFU19JTkZPX01FU1NBR0UiID4mMgogICAgZXhpdCAkX0RPQ0tFUl9DT01QT1NFX1JFTEVBU0VTX0lORk9fTUVTU0FHRV9FWElUX0NPREUKICBmaTsKICBfUEFSU0VfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OPSQoCiAgICBlY2hvICIkX0RPQ0tFUl9DT01QT1NFX1JFTEVBU0VTX0lORk8iIHwgICAgIGpxIC1yICIuWyRfR0VUX0RPQ0tFUl9DT01QT1NFX1ZFUlNJT05fSU5ERVhdLm5hbWUiIDI+JjEKICApCiAgX1BBUlNFX0RPQ0tFUl9DT01QT1NFX0xBU1RFU1RfVkVSU0lPTl9FWElUX0NPREU9JD8KICBpZiBbICRfUEFSU0VfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OX0VYSVRfQ09ERSAtbmUgMCBdOyB0aGVuCiAgICBwcmludGYgIlxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgIHByaW50ZiAiXG4lc1xuIiAiJF9NU0dfRVJST1JfUEFSU0lOR19QRU5VTFRJTUFURV9ET0NLRVJfQ09NUE9TRV9SRUxFQVNFU19WRVJTSU9OIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19VUkwiICIkX0dFVF9ET0NLRVJfQ09NUE9TRV9MQVRFU1RfVkVSU0lPTl9VUkwiID4mMgogICAgcHJpbnRmICIlczogJXNcbiIgIiRfTVNHX0VSUk9SX0NPREUiICIkX1BBUlNFX0RPQ0tFUl9DT01QT1NFX0xBU1RFU1RfVkVSU0lPTl9FWElUX0NPREUiID4mMgogICAgcHJpbnRmICIlczogJXMiICIkX01TR19FUlJPUiIgIiRfUEFSU0VfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OIiA+JjIKICAgIGV4aXQgJF9QQVJTRV9ET0NLRVJfQ09NUE9TRV9MQVNURVNUX1ZFUlNJT05fRVhJVF9DT0RFCiAgZmk7CiAgX0RPQ0tFUl9DT01QT1NFX0xBU1RFU1RfVkVSU0lPTj0iJChlY2hvICIkX1BBUlNFX0RPQ0tFUl9DT01QT1NFX0xBU1RFU1RfVkVSU0lPTiIgfCBjdXQgLWQndicgLWYyIDI+JjEpIgogIF9HRVRfRE9DS0VSX0NPTVBPU0VfTEFURVNUX1ZFUlNJT05fRVhJVF9DT0RFPSQ/CiAgaWYgWyAkX0dFVF9ET0NLRVJfQ09NUE9TRV9MQVRFU1RfVkVSU0lPTl9FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgKCggX0dFVF9ET0NLRVJfQ09NUE9TRV9MQVRFU1RfVkVSU0lPTl9BVFRFTVBUUysrICkpCiAgICBpZiBbICRfR0VUX0RPQ0tFUl9DT01QT1NFX0xBVEVTVF9WRVJTSU9OX0FUVEVNUFRTIC1nZSAkX0dFVF9ET0NLRVJfQ09NUE9TRV9MQVRFU1RfVkVSU0lPTl9NQVhfQVRURU1QVFMgXTsgdGhlbgogICAgICBwcmludGYgIlxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgICAgcHJpbnQgIlxuJXNcbiIgIiRfTVNHX0VSUk9SX1JFVFJJRVZJTkdfTEFTVF9ET0NLRVJfQ09NUE9TRV9WRVJTSU9OIiA+JjIKICAgICAgcHJpbnRmICIlczogJXNcbiIgIiRfTVNHX1VSTCIgIiRfR0VUX0RPQ0tFUl9DT01QT1NFX0xBVEVTVF9WRVJTSU9OX1VSTCIgPiYyCiAgICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FUlJPUl9DT0RFIiAiJF9HRVRfRE9DS0VSX0NPTVBPU0VfTEFURVNUX1ZFUlNJT05fRVhJVF9DT0RFIiA+JjIKICAgICAgcHJpbnRmICIlczogJXMiICIkX01TR19FUlJPUiIgIiRfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OIiA+JjIKICAgICAgZXhpdCAkX0dFVF9ET0NLRVJfQ09NUE9TRV9MQVRFU1RfVkVSU0lPTl9FWElUX0NPREUKICAgIGVsc2UKICAgICAgZ2V0RG9ja2VyQ29tcG9zZUxhdGVzdFZlcnNpb24KICAgIGZpOwogIGZpOwogIGNoZWNrRG9ja2VyQ29tcG9zZVZlcnNpb25Ub0Rvd25sb2FkRXhpc3RzCiAgaWYgWyAkX0RPV05MT0FEX0RPQ0tFUl9DT01QT1NFX1VSTF9FWElTVFMgLW5lIDEgXTsgdGhlbgogICAgKCggX0dFVF9ET0NLRVJfQ09NUE9TRV9WRVJTSU9OXzQwNF9BVFRFTVBUUysrICkpCiAgICAoKCBfR0VUX0RPQ0tFUl9DT01QT1NFX1ZFUlNJT05fSU5ERVgrKyApKQogICAgZ2V0RG9ja2VyQ29tcG9zZUxhdGVzdFZlcnNpb24KICBlbHNlCiAgICBwcmludGYgIiAodiVzKSBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIgIiRfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OIgogIGZpOwp9CmZ1bmN0aW9uIGRvd25sb2FkRG9ja2VyQ29tcG9zZSgpIHsKICBfRE9XTkxPQURfRE9DS0VSX0NPTVBPU0VfVVJMPSJodHRwczovL2dpdGh1Yi5jb20vZG9ja2VyL2NvbXBvc2UvcmVsZWFzZXMvZG93bmxvYWQvdiRfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OL2RvY2tlci1jb21wb3NlLSQodW5hbWUgLXMpLSQodW5hbWUgLW0pIgogIF9ET1dOTE9BRF9ET0NLRVJfQ09NUE9TRV9PVVRQVVQ9IiQoc3VkbyBjdXJsIC1zTCAiJF9ET1dOTE9BRF9ET0NLRVJfQ09NUE9TRV9VUkwiIC1vICIkMSIgMj4mMSkiCiAgX0RPV05MT0FEX0RPQ0tFUl9DT01QT1NFX0VYSVRfQ09ERT0kPwogIGlmICBbICRfRE9XTkxPQURfRE9DS0VSX0NPTVBPU0VfRVhJVF9DT0RFIC1uZSAwIF07IHRoZW4KICAgIHByaW50ZiAiXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzICh2JXMpXG4iICIkX01TR19FUlJPUl9ET1dOTE9BRElOR19ET0NLRVJfQ09NUE9TRSIgIiRfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OIiA+JjIKICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19VUkwiICIkX0RPV05MT0FEX0RPQ0tFUl9DT01QT1NFX1VSTCIgPiYyCiAgICBwcmludGYgIiVzOiAlc1xuIiAiJF9NU0dfRVJST1IiICIkX0RPV05MT0FEX0RPQ0tFUl9DT01QT1NFX09VVFBVVCIgPiYyCiAgICBleGl0ICRfRE9XTkxPQURfRE9DS0VSX0NPTVBPU0VfRVhJVF9DT0RFCiAgZmk7CiAgX0RPQ0tFUl9DT01QT1NFX0JJTkFSWV9DT05URU5UPSQoc3VkbyBjYXQgIiQxIiB8IHRyIC1kICdcMCcpCiAgaWYgWyAiJF9ET0NLRVJfQ09NUE9TRV9CSU5BUllfQ09OVEVOVCIgPSAiTm90IEZvdW5kIiBdOyB0aGVuCiAgICBpZiBbICRfR0VUX0RPQ0tFUl9DT01QT1NFX1ZFUlNJT05fNDA0X0FUVEVNUFRTIC1nZSAkX0dFVF9ET0NLRVJfQ09NUE9TRV9WRVJTSU9OXzQwNF9NQVhfQVRURU1QVFMgXTsgdGhlbgogICAgICBzdWRvIHJtIC1mICIkMSIKICAgICAgcHJpbnRmICJcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICAgIHByaW50ZiAiXG4lcyAodiVzKVxuIiAiJF9NU0dfRVJST1JfRE9XTkxPQURJTkdfRE9DS0VSX0NPTVBPU0UiICIkX0RPQ0tFUl9DT01QT1NFX0xBU1RFU1RfVkVSU0lPTiIgPiYyCiAgICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19VUkwiICIkX0RPV05MT0FEX0RPQ0tFUl9DT01QT1NFX1VSTCIgPiYyCiAgICAgIHByaW50ZiAiJXM6IDQwNFxuIiAiJF9NU0dfRVJST1JfQ09ERSIgPiYyCiAgICAgIHByaW50ZiAiJXM6ICVzXG4iICIkX01TR19FUlJPUiIgIiRfRE9DS0VSX0NPTVBPU0VfQklOQVJZX0NPTlRFTlQiID4mMgogICAgICBleGl0IDEKICAgIGVsc2UKICAgICAgcHJpbnRmICIgKCVzKSBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgIiRfTVNHX05PVF9GT1VORCIKICAgICAgKCggX0dFVF9ET0NLRVJfQ09NUE9TRV9WRVJTSU9OXzQwNF9BVFRFTVBUUysrICkpCiAgICAgICgoIF9HRVRfRE9DS0VSX0NPTVBPU0VfVkVSU0lPTl9JTkRFWCsrICkpCiAgICAgIGdldERvY2tlckNvbXBvc2VMYXRlc3RWZXJzaW9uCiAgICAgIGRvd25sb2FkRG9ja2VyQ29tcG9zZSAiJDEiCiAgICBmaTsKICBmaTsKICBzdWRvIGNobW9kICt4ICIkMSIKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpmdW5jdGlvbiBtYWluKCkgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIlcy4uLlxuIiAiJF9NU0dfQ0hFQ0tJTkdfRE9DS0VSX0NPTVBPU0UiCiAgaW5zdGFsbFNjcmlwdERlcGVuZGVuY2llcwogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzIiAiJF9NU0dfRVJST1JfUkVUUklFVklOR19MQVNUX0FWQUlMQUJMRV9WRVJTSU9OIgogIGdldERvY2tlckNvbXBvc2VMYXRlc3RWZXJzaW9uCiAgX0RPQ0tFUl9DT01QT1NFX0ZJTEVQQVRIPSIkKGNvbW1hbmQgLXYgZG9ja2VyLWNvbXBvc2UpIgogIF9ET0NLRVJfQ09NUE9TRV9GSUxFUEFUSF9FWElUX0NPREU9JD8KICBpZiBbICRfRE9DS0VSX0NPTVBPU0VfRklMRVBBVEhfRVhJVF9DT0RFIC1uZSAwIF07IHRoZW4KICAgIF9ET0NLRVJfQ09NUE9TRV9GSUxFUEFUSD0iIgogIGZpOwogIGlmIFsgIiRfRE9DS0VSX0NPTVBPU0VfRklMRVBBVEgiID0gIiIgXTsgdGhlbgogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyAodiVzKS4uLiIgIiRfTVNHX0RPV05MT0FESU5HX0RPQ0tFUl9DT01QT1NFIiAiJF9ET0NLRVJfQ09NUE9TRV9MQVNURVNUX1ZFUlNJT04iCiAgICBkb3dubG9hZERvY2tlckNvbXBvc2UgL3Vzci9sb2NhbC9iaW4vZG9ja2VyLWNvbXBvc2UKICBlbHNlCiAgICBfRE9DS0VSX0NPTVBPU0VfVkVSU0lPTl9PVVRQVVQ9IiQoZG9ja2VyLWNvbXBvc2UgLS12ZXJzaW9uKSIKICAgIF9ET0NLRVJfQ09NUE9TRV9WRVJTSU9OX09VVFBVVF9FWElUX0NPREU9JD8KICAgIGlmIFsgJF9ET0NLRVJfQ09NUE9TRV9WRVJTSU9OX09VVFBVVF9FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgICBzdWRvIHJtIC1mICIkKGNvbW1hbmQgLXYgZG9ja2VyLWNvbXBvc2UpIgogICAgICBwcmludEluZGVudAogICAgICBwcmludGYgIiAgJXMgKHYlcykuLi4iICIkX01TR19ET1dOTE9BRElOR19ET0NLRVJfQ09NUE9TRSIgIiRfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OIgogICAgICBkb3dubG9hZERvY2tlckNvbXBvc2UgL3Vzci9sb2NhbC9iaW4vZG9ja2VyLWNvbXBvc2UKICAgIGVsc2UKICAgICAgX0RPQ0tFUl9DT01QT1NFX0lOU1RBTExFRF9WRVJTSU9OPSIkKGVjaG8gIiRfRE9DS0VSX0NPTVBPU0VfVkVSU0lPTl9PVVRQVVQiIHwgY3V0IC1jMjQtMjkpIgogICAgICBwcmludEluZGVudAogICAgICBwcmludGYgIiAgJXMgKHYlcykiICIkX01TR19ET0NLRVJfQ09NUE9TRV9GT1VORF9JTlNUQUxMRUQiICIkX0RPQ0tFUl9DT01QT1NFX0lOU1RBTExFRF9WRVJTSU9OIgogICAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgICAgaWYgWyAiJF9ET0NLRVJfQ09NUE9TRV9JTlNUQUxMRURfVkVSU0lPTiIgIT0gIiRfRE9DS0VSX0NPTVBPU0VfTEFTVEVTVF9WRVJTSU9OIiBdOyB0aGVuCiAgICAgICAgcHJpbnRJbmRlbnQKICAgICAgICBwcmludGYgIiAgJXMgKHYlcyIgIiRfTVNHX1VQREFUSU5HX0RPQ0tFUl9DT01QT1NFIiAiJF9ET0NLRVJfQ09NUE9TRV9JTlNUQUxMRURfVkVSU0lPTiIKICAgICAgICBwcmludGYgIiAtPiB2JXMpLi4uIiAiJF9ET0NLRVJfQ09NUE9TRV9MQVNURVNUX1ZFUlNJT04iCiAgICAgICAgc3VkbyBybSAtZiAkX0RPQ0tFUl9DT01QT1NFX0ZJTEVQQVRICiAgICAgICAgZG93bmxvYWREb2NrZXJDb21wb3NlICRfRE9DS0VSX0NPTVBPU0VfRklMRVBBVEgKICAgICAgZmk7CiAgICBmaTsKICBmaTsKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOw=='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
