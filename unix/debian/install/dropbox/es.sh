#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQ0hFQ0tJTkdfRFJPUEJPWF9FTlY9IkNvbXByb2JhbmRvIGVudG9ybm8gRHJvcGJveC4uLiIKX01TR19EUk9QQk9YX0ZPVU5EX0lOU1RBTExFRD0iRW5jb250cmFkbyBEcm9wYm94IGluc3RhbGFkbyBlbiBlbCBzaXN0ZW1hIgpfTVNHX0NIRUNLSU5HX0lGX0lTX1VQREFURUQ9IkNvbXByb2JhbmRvIHNpIGVzdMOhIGFjdHVhbGl6YWRvLi4uIgpfTVNHX1VQREFUSU5HX0RST1BCT1g9IkFjdHVhbGl6YW5kbyBEcm9wYm94IgpfTVNHX1JFVFJJRVZJTkdfTEFTVF9EUk9QQk9YX1ZFUlNJT049Ik9idGVuaWVuZG8gbGEgw7psdGltYSB2ZXJzacOzbiBkZSBEcm9wYm94Li4uIgpfTVNHX0RPV05MT0FESU5HX0RST1BCT1g9IkRlc2NhcmdhbmRvIERyb3Bib3giCl9NU0dfSU5TVEFMTElOR19EUk9QQk9YPSJJbnN0YWxhbmRvIERyb3Bib3giCklOREVOVF9TVFJJTkc9IiIKX1VQREFURT0wCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvZHJvcGJveC8kX1NDUklQVF9GSUxFTkFNRSBbLWhdIFstaSBTVFJJTkddIFstdV0KCiAgSW5zdGFsbHMgYW5kL29yIG9wdGlvbmFsbHkgdXBkYXRlcyBEcm9wYm94IHJldHJpZXZpbmcgcmVsZWFzZSBwYWNrYWdlIGZyb20gdGhlaXIgb2ZmaWNpYWwgcmVwb3NpdG9yeS4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC11LCAtLXVwZGF0ZSAgICAgICAgICAgICAgICAgICAgICBVcGdyYWRlcyBEcm9wYm94IHRvIHRoZSBsYXRlc3QgcmVsZWFzZSBhdmFpbGFibGUuCgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIHNoaWZ0CiAgICBJTkRFTlRfU1RSSU5HPSIkMSIKICAgIHNoaWZ0CiAgICA7OwogICAgLWh8LS1oZWxwKQogICAgc2hpZnQKICAgIHVzYWdlCiAgICA7OyAgICAKICAgIC11fC0tdXBkYXRlKQogICAgX1VQREFURT0xCiAgICBzaGlmdAogICAgOzsKICAgICopCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7CiAgZXNhYwpkb25lCmZ1bmN0aW9uIHByaW50SW5kZW50KCkgewogIHByaW50ZiAiJXMiICIkSU5ERU5UX1NUUklORyIKfQpmdW5jdGlvbiBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQoKSB7CiAgaWYgWyAiJChjb21tYW5kIC12IHBhY21hbikiID0gIiIgXTsgdGhlbgogICAgdXJsPSJodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vZG93bmxvYWQvcGFjYXB0LyRfU0NSSVBUX0ZJTEVOQU1FIgogICAgY3VybCAtc0wgIiR1cmwiIHwgc3VkbyBiYXNoIC0gPiAvZGV2L251bGwKICBmaTsKfQpmdW5jdGlvbiBnZXREcm9wYm94TGFzdFZlcnNpb24oKSB7CiAgX0RST1BCT1hfTEFTVF9ERUI9JCgKICAgIGN1cmwgLXNMIGh0dHBzOi8vbGludXguZHJvcGJveC5jb20vcGFja2FnZXMvZGViaWFuLyB8ICAgICBncmVwIGFtZDY0LmRlYiB8ICAgICB0YWlsIC1uIDEgfCAgICAgY3V0IC1kJyInIC1mMikKICBfRFJPUEJPWF9DTURfTEFTVF9WRVJTSU9OPSIkKGVjaG8gIiRfRFJPUEJPWF9MQVNUX0RFQiIgfCBjdXQgLWQnXycgLWYyKSIKfQpmdW5jdGlvbiBkb3dubG9hZERyb3Bib3goKSB7CiAgX0RST1BCT1hfRE9XTkxPQURfVVJMPSJodHRwczovL2xpbnV4LmRyb3Bib3guY29tL3BhY2thZ2VzL2RlYmlhbi8kX0RST1BCT1hfTEFTVF9ERUIiCiAgY3VybCAtc0wgLW8gIiRfRFJPUEJPWF9MQVNUX0RFQiIgIiRfRFJPUEJPWF9ET1dOTE9BRF9VUkwiCn0KZnVuY3Rpb24gaW5zdGFsbERyb3Bib3goKSB7CiAgc3VkbyBkcGtnIC1pICIkX0RST1BCT1hfTEFTVF9ERUIiID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICBzdWRvIHJtIC1mICIkX0RST1BCT1hfTEFTVF9ERUIiCn0KZnVuY3Rpb24gbWFpbigpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiJXNcbiIgIiRfTVNHX0NIRUNLSU5HX0RST1BCT1hfRU5WIgogIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZAogIF9EUk9QQk9YX0JJTkFSWV9QQVRIPSIkKGNvbW1hbmQgLXYgZHJvcGJveCkiCiAgaWYgWyAiJF9EUk9QQk9YX0JJTkFSWV9QQVRIIiAhPSAiIiBdOyB0aGVuCiAgICBfRFJPUEJPWF9JTlNUQUxMRURfVkVSU0lPTj0kKGRyb3Bib3ggdmVyc2lvbiB8IHRhaWwgLW4gMSB8IGN1dCAtZCcgJyAtZjUpCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzICh2JXMpIiAiJF9NU0dfRFJPUEJPWF9GT1VORF9JTlNUQUxMRUQiICAgICAgICIkX0RST1BCT1hfSU5TVEFMTEVEX1ZFUlNJT04iCiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgIGlmIFsgJF9VUERBVEUgLWVxIDAgXTsgdGhlbgogICAgICBleGl0IDAKICAgIGZpOwogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyIgIiRfTVNHX0NIRUNLSU5HX0lGX0lTX1VQREFURUQiCiAgICBnZXREcm9wYm94TGFzdFZlcnNpb24KICAgIGlmIFsgIiRfRFJPUEJPWF9DTURfTEFTVF9WRVJTSU9OIiA9ICIkX0RST1BCT1hfSU5TVEFMTEVEX1ZFUlNJT04iIF07IHRoZW4KICAgICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgICAgIGV4aXQgMAogICAgZWxzZQogICAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIKICAgICAgcHJpbnRJbmRlbnQKICAgICAgcHJpbnRmICIgICVzICh2JXMgLT4gdiVzKS4uLiIgIiRfTVNHX1VQREFUSU5HX0RST1BCT1giICAgICAgICAgIiRfRFJPUEJPWF9JTlNUQUxMRURfVkVSU0lPTiIgIiRfRFJPUEJPWF9DTURfTEFTVF9WRVJTSU9OIgogICAgICBkb3dubG9hZERyb3Bib3gKICAgICAgaW5zdGFsbERyb3Bib3gKICAgICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgICAgIGV4aXQgMAogICAgZmk7CiAgZWxzZQogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyIgIiRfTVNHX1JFVFJJRVZJTkdfTEFTVF9EUk9QQk9YX1ZFUlNJT04iCiAgICBnZXREcm9wYm94TGFzdFZlcnNpb24KICAgIHByaW50ZiAiICh2JXMpIiAiJF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT04iCiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgJXMgKHYlcykuLi4iICIkX01TR19ET1dOTE9BRElOR19EUk9QQk9YIiAiJF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT04iCiAgICBkb3dubG9hZERyb3Bib3gKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyAodiVzKS4uLiIgIiRfTVNHX0lOU1RBTExJTkdfRFJPUEJPWCIgIiRfRFJPUEJPWF9DTURfTEFTVF9WRVJTSU9OIgogICAgaW5zdGFsbERyb3Bib3gKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGZpOwp9CmlmIChyZXR1cm4gMCAyPi9kZXYvbnVsbCk7IHRoZW4KICBleHBvcnRWYXJpYWJsZXMKZWxzZQogIG1haW4KZmk7'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
