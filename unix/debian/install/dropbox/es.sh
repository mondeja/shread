#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQ0hFQ0tJTkdfRFJPUEJPWF9FTlY9IkNvbXByb2JhbmRvIGVudG9ybm8gRHJvcGJveC4uLiIKX01TR19EUk9QQk9YX0ZPVU5EX0lOU1RBTExFRD0iRW5jb250cmFkbyBEcm9wYm94IGluc3RhbGFkbyBlbiBlbCBzaXN0ZW1hIgpfTVNHX0NIRUNLSU5HX0lGX0lTX1VQREFURUQ9IkNvbXByb2JhbmRvIHNpIGVzdMOhIGFjdHVhbGl6YWRvLi4uIgpfTVNHX1VQREFUSU5HX0RST1BCT1g9IkFjdHVhbGl6YW5kbyBEcm9wYm94IgpfTVNHX1JFVFJJRVZJTkdfTEFTVF9EUk9QQk9YX1ZFUlNJT049Ik9idGVuaWVuZG8gbGEgw7psdGltYSB2ZXJzacOzbiBkZSBEcm9wYm94Li4uIgpfTVNHX0RPV05MT0FESU5HX0RST1BCT1g9IkRlc2NhcmdhbmRvIERyb3Bib3giCl9NU0dfSU5TVEFMTElOR19EUk9QQk9YPSJJbnN0YWxhbmRvIERyb3Bib3giCklOREVOVF9TVFJJTkc9IiIKX1VQREFURT0wCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvZHJvcGJveC8kX1NDUklQVF9GSUxFTkFNRSBbLWhdIFstaSBTVFJJTkddIFstdV0KCiAgSW5zdGFsYSB5L28sIG9wY2lvbmFsbWVudGUsIGFjdHVhbGl6YSBEcm9wYm94IG9idGVuaWVuZG8gZWwgcGFxdWV0ZSBkZSBsYW56YW1pZW50byBkZSBzdSByZXBvc2l0b3JpbyBvZmljaWFsLgoKT3B0aW9uczoKICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4KICAtaSBTVFJJTkcsIC0taW5kZW50IFNUUklORyAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBzY3JpcHQgb3V0cHV0IHdpbGwgYmUgcHJlY2VkZWQgd2l0aCB0aGUgc3RyaW5nIGRlZmluZWQgaW4gdGhpcyBwYXJhbWV0ZXIuCiAgLXUsIC0tdXBkYXRlICAgICAgICAgICAgICAgICAgICAgIFVwZ3JhZGVzIERyb3Bib3ggdG8gdGhlIGxhdGVzdCByZWxlYXNlIGF2YWlsYWJsZS4KCkhFTFBfVVNBR0UKICAgIGV4aXQgMQp9CmZvciBhcmcgaW4gIiRAIjsgZG8KICBjYXNlICRhcmcgaW4KICAgIC1pfC0taW5kZW50KQogICAgSU5ERU5UX1NUUklORz0iJDIiCiAgICBzaGlmdCAyCiAgICA7OwogICAgLWh8LS1oZWxwKQogICAgc2hpZnQKICAgIHVzYWdlCiAgICA7OyAgICAKICAgIC11fC0tdXBkYXRlKQogICAgX1VQREFURT0xCiAgICBzaGlmdAogICAgOzsKICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGdldERyb3Bib3hMYXN0VmVyc2lvbigpIHsKICBfRFJPUEJPWF9MQVNUX0RFQj0kKAogICAgY3VybCAtc0wgaHR0cHM6Ly9saW51eC5kcm9wYm94LmNvbS9wYWNrYWdlcy9kZWJpYW4vIHwgICAgIGdyZXAgYW1kNjQuZGViIHwgICAgIHRhaWwgLW4gMSB8ICAgICBjdXQgLWQnIicgLWYyKQogIF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT049IiQoZWNobyAiJF9EUk9QQk9YX0xBU1RfREVCIiB8IGN1dCAtZCdfJyAtZjIpIgp9CmZ1bmN0aW9uIGRvd25sb2FkRHJvcGJveCgpIHsKICBfRFJPUEJPWF9ET1dOTE9BRF9VUkw9Imh0dHBzOi8vbGludXguZHJvcGJveC5jb20vcGFja2FnZXMvZGViaWFuLyRfRFJPUEJPWF9MQVNUX0RFQiIKICBjdXJsIC1zTCAtbyAiJF9EUk9QQk9YX0xBU1RfREVCIiAiJF9EUk9QQk9YX0RPV05MT0FEX1VSTCIKfQpmdW5jdGlvbiBpbnN0YWxsRHJvcGJveCgpIHsKICBzdWRvIGRwa2cgLWkgIiRfRFJPUEJPWF9MQVNUX0RFQiIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogIHN1ZG8gcm0gLWYgIiRfRFJPUEJPWF9MQVNUX0RFQiIKfQpmdW5jdGlvbiBtYWluKCkgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfRFJPUEJPWF9FTlYiCiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgX0RST1BCT1hfQklOQVJZX1BBVEg9IiQoY29tbWFuZCAtdiBkcm9wYm94KSIKICBpZiBbICIkX0RST1BCT1hfQklOQVJZX1BBVEgiICE9ICIiIF07IHRoZW4KICAgIF9EUk9QQk9YX0lOU1RBTExFRF9WRVJTSU9OPSQoZHJvcGJveCB2ZXJzaW9uIHwgdGFpbCAtbiAxIHwgY3V0IC1kJyAnIC1mNSkKICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgJXMgKHYlcykiICIkX01TR19EUk9QQk9YX0ZPVU5EX0lOU1RBTExFRCIgICAgICAgIiRfRFJPUEJPWF9JTlNUQUxMRURfVkVSU0lPTiIKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogICAgaWYgWyAkX1VQREFURSAtZXEgMCBdOyB0aGVuCiAgICAgIGV4aXQgMAogICAgZmk7CiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfQ0hFQ0tJTkdfSUZfSVNfVVBEQVRFRCIKICAgIGdldERyb3Bib3hMYXN0VmVyc2lvbgogICAgaWYgWyAiJF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT04iID0gIiRfRFJPUEJPWF9JTlNUQUxMRURfVkVSU0lPTiIgXTsgdGhlbgogICAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgICAgZXhpdCAwCiAgICBlbHNlCiAgICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIgogICAgICBwcmludEluZGVudAogICAgICBwcmludGYgIiAgJXMgKHYlcyAtPiB2JXMpLi4uIiAiJF9NU0dfVVBEQVRJTkdfRFJPUEJPWCIgICAgICAgICAiJF9EUk9QQk9YX0lOU1RBTExFRF9WRVJTSU9OIiAiJF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT04iCiAgICAgIGRvd25sb2FkRHJvcGJveAogICAgICBpbnN0YWxsRHJvcGJveAogICAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgICAgZXhpdCAwCiAgICBmaTsKICBlbHNlCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfUkVUUklFVklOR19MQVNUX0RST1BCT1hfVkVSU0lPTiIKICAgIGdldERyb3Bib3hMYXN0VmVyc2lvbgogICAgcHJpbnRmICIgKHYlcykiICIkX0RST1BCT1hfQ01EX0xBU1RfVkVSU0lPTiIKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyAodiVzKS4uLiIgIiRfTVNHX0RPV05MT0FESU5HX0RST1BCT1giICIkX0RST1BCT1hfQ01EX0xBU1RfVkVSU0lPTiIKICAgIGRvd25sb2FkRHJvcGJveAogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzICh2JXMpLi4uIiAiJF9NU0dfSU5TVEFMTElOR19EUk9QQk9YIiAiJF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT04iCiAgICBpbnN0YWxsRHJvcGJveAogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZmk7Cn0KaWYgKHJldHVybiAwIDI+L2Rldi9udWxsKTsgdGhlbgogIGV4cG9ydFZhcmlhYmxlcwplbHNlCiAgbWFpbgpmaTs='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
