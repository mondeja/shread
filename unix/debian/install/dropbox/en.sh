#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQ0hFQ0tJTkdfRFJPUEJPWF9FTlY9IkNoZWNraW5nIERyb3Bib3ggZW52aXJvbm1lbnQuLi4iCl9NU0dfRFJPUEJPWF9GT1VORF9JTlNUQUxMRUQ9IkRyb3Bib3ggZm91bmQgaW5zdGFsbGVkIGluIHRoZSBzeXN0ZW0iCl9NU0dfQ0hFQ0tJTkdfSUZfSVNfVVBEQVRFRD0iQ2hlY2tpbmcgaWYgaXMgdXBkYXRlZC4uLiIKX01TR19VUERBVElOR19EUk9QQk9YPSJVcGRhdGluZyBEcm9wYm94IgpfTVNHX1JFVFJJRVZJTkdfTEFTVF9EUk9QQk9YX1ZFUlNJT049IlJldHJpZXZpbmcgbGFzdCBEcm9wYm94IHZlcnNpb24uLi4iCl9NU0dfRE9XTkxPQURJTkdfRFJPUEJPWD0iRG93bmxvYWRpbmcgRHJvcGJveCIKX01TR19JTlNUQUxMSU5HX0RST1BCT1g9Ikluc3RhbGxpbmcgRHJvcGJveCIKSU5ERU5UX1NUUklORz0iIgpfVVBEQVRFPTAKZnVuY3Rpb24gdXNhZ2UgewogICAgY2F0IDw8SEVMUF9VU0FHRQpVc2FnZTogdW5peC9kZWJpYW4vaW5zdGFsbC9kcm9wYm94LyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gWy11XQoKICBJbnN0YWxscyBhbmQvb3Igb3B0aW9uYWxseSB1cGRhdGVzIERyb3Bib3ggcmV0cmlldmluZyByZWxlYXNlIHBhY2thZ2UgZnJvbSB0aGVpciBvZmZpY2lhbCByZXBvc2l0b3J5LgoKT3B0aW9uczoKICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4KICAtaSBTVFJJTkcsIC0taW5kZW50IFNUUklORyAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBzY3JpcHQgb3V0cHV0IHdpbGwgYmUgcHJlY2VkZWQgd2l0aCB0aGUgc3RyaW5nIGRlZmluZWQgaW4gdGhpcyBwYXJhbWV0ZXIuCiAgLXUsIC0tdXBkYXRlICAgICAgICAgICAgICAgICAgICAgIFVwZ3JhZGVzIERyb3Bib3ggdG8gdGhlIGxhdGVzdCByZWxlYXNlIGF2YWlsYWJsZS4KCkhFTFBfVVNBR0UKICAgIGV4aXQgMQp9CmZvciBhcmcgaW4gIiRAIjsgZG8KICBjYXNlICRhcmcgaW4KICAgIC1pfC0taW5kZW50KQogICAgc2hpZnQKICAgIElOREVOVF9TVFJJTkc9IiQxIgogICAgc2hpZnQKICAgIDs7CiAgICAtaHwtLWhlbHApCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7ICAgIAogICAgLXV8LS11cGRhdGUpCiAgICBfVVBEQVRFPTEKICAgIHNoaWZ0CiAgICA7OwogIGVzYWMKZG9uZQppZiBbICIkQCIgIT0gIiIgXTsgdGhlbgogIHByaW50ZiAiWUVTIiAiJyRAJyIKZmk7CmV4aXQKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGdldERyb3Bib3hMYXN0VmVyc2lvbigpIHsKICBfRFJPUEJPWF9MQVNUX0RFQj0kKAogICAgY3VybCAtc0wgaHR0cHM6Ly9saW51eC5kcm9wYm94LmNvbS9wYWNrYWdlcy9kZWJpYW4vIHwgICAgIGdyZXAgYW1kNjQuZGViIHwgICAgIHRhaWwgLW4gMSB8ICAgICBjdXQgLWQnIicgLWYyKQogIF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT049IiQoZWNobyAiJF9EUk9QQk9YX0xBU1RfREVCIiB8IGN1dCAtZCdfJyAtZjIpIgp9CmZ1bmN0aW9uIGRvd25sb2FkRHJvcGJveCgpIHsKICBfRFJPUEJPWF9ET1dOTE9BRF9VUkw9Imh0dHBzOi8vbGludXguZHJvcGJveC5jb20vcGFja2FnZXMvZGViaWFuLyRfRFJPUEJPWF9MQVNUX0RFQiIKICBjdXJsIC1zTCAtbyAiJF9EUk9QQk9YX0xBU1RfREVCIiAiJF9EUk9QQk9YX0RPV05MT0FEX1VSTCIKfQpmdW5jdGlvbiBpbnN0YWxsRHJvcGJveCgpIHsKICBzdWRvIGRwa2cgLWkgIiRfRFJPUEJPWF9MQVNUX0RFQiIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogIHN1ZG8gcm0gLWYgIiRfRFJPUEJPWF9MQVNUX0RFQiIKfQpmdW5jdGlvbiBtYWluKCkgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfRFJPUEJPWF9FTlYiCiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgX0RST1BCT1hfQklOQVJZX1BBVEg9IiQoY29tbWFuZCAtdiBkcm9wYm94KSIKICBpZiBbICIkX0RST1BCT1hfQklOQVJZX1BBVEgiICE9ICIiIF07IHRoZW4KICAgIF9EUk9QQk9YX0lOU1RBTExFRF9WRVJTSU9OPSQoZHJvcGJveCB2ZXJzaW9uIHwgdGFpbCAtbiAxIHwgY3V0IC1kJyAnIC1mNSkKICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgJXMgKHYlcykiICIkX01TR19EUk9QQk9YX0ZPVU5EX0lOU1RBTExFRCIgICAgICAgIiRfRFJPUEJPWF9JTlNUQUxMRURfVkVSU0lPTiIKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogICAgaWYgWyAkX1VQREFURSAtZXEgMCBdOyB0aGVuCiAgICAgIGV4aXQgMAogICAgZmk7CiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfQ0hFQ0tJTkdfSUZfSVNfVVBEQVRFRCIKICAgIGdldERyb3Bib3hMYXN0VmVyc2lvbgogICAgaWYgWyAiJF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT04iID0gIiRfRFJPUEJPWF9JTlNUQUxMRURfVkVSU0lPTiIgXTsgdGhlbgogICAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgICAgZXhpdCAwCiAgICBlbHNlCiAgICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIgogICAgICBwcmludEluZGVudAogICAgICBwcmludGYgIiAgJXMgKHYlcyAtPiB2JXMpLi4uIiAiJF9NU0dfVVBEQVRJTkdfRFJPUEJPWCIgICAgICAgICAiJF9EUk9QQk9YX0lOU1RBTExFRF9WRVJTSU9OIiAiJF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT04iCiAgICAgIGRvd25sb2FkRHJvcGJveAogICAgICBpbnN0YWxsRHJvcGJveAogICAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICAgICAgZXhpdCAwCiAgICBmaTsKICBlbHNlCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfUkVUUklFVklOR19MQVNUX0RST1BCT1hfVkVSU0lPTiIKICAgIGdldERyb3Bib3hMYXN0VmVyc2lvbgogICAgcHJpbnRmICIgKHYlcykiICIkX0RST1BCT1hfQ01EX0xBU1RfVkVSU0lPTiIKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyAodiVzKS4uLiIgIiRfTVNHX0RPV05MT0FESU5HX0RST1BCT1giICIkX0RST1BCT1hfQ01EX0xBU1RfVkVSU0lPTiIKICAgIGRvd25sb2FkRHJvcGJveAogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzICh2JXMpLi4uIiAiJF9NU0dfSU5TVEFMTElOR19EUk9QQk9YIiAiJF9EUk9QQk9YX0NNRF9MQVNUX1ZFUlNJT04iCiAgICBpbnN0YWxsRHJvcGJveAogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZmk7Cn0KaWYgKHJldHVybiAwIDI+L2Rldi9udWxsKTsgdGhlbgogIGV4cG9ydFZhcmlhYmxlcwplbHNlCiAgbWFpbgpmaTs='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
