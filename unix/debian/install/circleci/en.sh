#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfSU5TVEFMTElOR19DSVJDTEVDST0iSW5zdGFsbGluZyBDaXJjbGVDSSIKX01TR19VUERBVElOR19DSVJDTEVDST0iVXBkYXRpbmcgQ2lyY2xlQ0kiCl9NU0dfRk9VTkRfQ0lSQ0xFQ0lfSU5TVEFMTEVEPSJDaXJjbGVDSSBmb3VuZCBpbnN0YWxsZWQiCklOREVOVF9TVFJJTkc9IiIKU0VUWD0wCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvY2lyY2xlY2kvJF9TQ1JJUFRfRklMRU5BTUUgWy1oXSBbLWkgU1RSSU5HXSAKCiAgRG93bmxvYWRzIG9yIHVwZ3JhZGUgQ2lyY2xlQ0kgYmluYXJ5LgoKT3B0aW9uczoKICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4KICAtaSBTVFJJTkcsIC0taW5kZW50IFNUUklORyAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBzY3JpcHQgb3V0cHV0IHdpbGwgYmUgcHJlY2VkZWQgd2l0aCB0aGUgc3RyaW5nIGRlZmluZWQgaW4gdGhpcyBwYXJhbWV0ZXIuCiAgLS1zZXQteCAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHMgdGhlIC14IG9wdGlvbiBpbiBCYXNoIHRvIHByaW50IG91dCB0aGUgc3RhdGVtZW50cyBhcyB0aGV5IGFyZSBiZWluZyBleGVjdXRlZC4gVXNlZnVsIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuCkhFTFBfVVNBR0UKICAgIGV4aXQgMQp9CmZvciBhcmcgaW4gIiRAIjsgZG8KICBjYXNlICRhcmcgaW4KICAgIC1pfC0taW5kZW50KQogICAgSU5ERU5UX1NUUklORz0iJDIiCiAgICBzaGlmdCAyCiAgICA7OwogICAgLWh8LS1oZWxwKQogICAgc2hpZnQKICAgIHVzYWdlCiAgICA7OyAgICAtLXNldC14KQogICAgU0VUWD0xCiAgICBzaGlmdAogICAgOzsgICAgICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmlmIFsgIiRTRVRYIiAtZXEgMSBdOyB0aGVuIHNldCAteDsgZmkKZnVuY3Rpb24gaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkKCkgewogIGlmIFsgIiQoY29tbWFuZCAtdiBwYWNtYW4pIiA9ICIiIF07IHRoZW4KICAgIHVybD0iaHR0cHM6Ly9tb25kZWphLmdpdGh1Yi5pby9zaHJlYWQvdW5peC9fL2Rvd25sb2FkL3BhY2FwdC8kX1NDUklQVF9GSUxFTkFNRSIKICAgIGN1cmwgLXNMICIkdXJsIiB8IHN1ZG8gYmFzaCAtID4gL2Rldi9udWxsCiAgZmk7Cn0KZnVuY3Rpb24gaW5zdGFsbFNjcmlwdERlcGVuZGVuY2llcygpIHsKICBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQKICBJTlNUQUxMQVRJT05fREVQRU5ERU5DSUVTPSgKICAgICJjdXJsIgogICkKICBmb3IgREVQIGluICIke0lOU1RBTExBVElPTl9ERVBFTkRFTkNJRVNbQF19IjsgZG8KICAgIGlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSAiJERFUCIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgICAgc3VkbyBwYWNtYW4gLVMgLS0gLXkgIiRERVAiID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICAgIGZpOwogIGRvbmU7Cn0KX0NJUkNMRUNJX0JJTkFSWV9QQVRIPSIiCmZ1bmN0aW9uIGdldENpcmNsZUNJQmluYXJ5UGF0aCgpIHsKICBfQ0lSQ0xFQ0lfQklOQVJZX1BBVEg9IiQoY29tbWFuZCAtdiBjaXJjbGVjaSkiCn0KX0NJUkNMRUNJX0xBVEVTVF9SRUxFQVNFX1ZFUlNJT049IiIKZnVuY3Rpb24gZ2V0Q2lyY2xlQ0lMYXRlc3RSZWxlYXNlVmVyc2lvbigpIHsKICBfQ0lSQ0xFQ0lfTEFURVNUX1JFTEVBU0VfVkVSU0lPTj0kKAogICAgY3VybCAtc0xJIC1vIC9kZXYvbnVsbCAtdyAnJXt1cmxfZWZmZWN0aXZlfScgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL0NpcmNsZUNJLVB1YmxpYy9jaXJjbGVjaS1jbGkvcmVsZWFzZXMvbGF0ZXN0LyAgfCAgICAgICBjdXQgLWQgInYiIC1mMikKfQpmdW5jdGlvbiBkb3dubG9hZENpcmNsZUNJKCkgewogIGN1cmwgLWZMU3MgaHR0cHM6Ly9jaXJjbGUuY2kvY2xpID4gL3RtcC9pbnN0YWxsLWNpcmNsZWNpLnNoCiAgY2htb2QgK3ggL3RtcC9pbnN0YWxsLWNpcmNsZWNpLnNoCiAgc3VkbyBERVNURElSPSIkMSIgVkVSU0lPTj0iJDIiIGJhc2ggL3RtcC9pbnN0YWxsLWNpcmNsZWNpLnNoID4gL2Rldi9udWxsCiAgcm0gLWYgL3RtcC9pbnN0YWxsLWNpcmNsZWNpLnNoCn0KZnVuY3Rpb24gbWFpbigpIHsKICBwcmludEluZGVudAogIGdldENpcmNsZUNJQmluYXJ5UGF0aAogIGdldENpcmNsZUNJTGF0ZXN0UmVsZWFzZVZlcnNpb24KICBpZiBbICIkX0NJUkNMRUNJX0JJTkFSWV9QQVRIIiA9ICIiIF07IHRoZW4KICAgIHByaW50ZiAiJXMgKHYlcykuLi4iICIkX01TR19JTlNUQUxMSU5HX0NJUkNMRUNJIiAiJF9DSVJDTEVDSV9MQVRFU1RfUkVMRUFTRV9WRVJTSU9OIgogICAgZG93bmxvYWRDaXJjbGVDSSAvdXNyL2JpbiAiJF9DSVJDTEVDSV9MQVRFU1RfUkVMRUFTRV9WRVJTSU9OIgogIGVsc2UKICAgIF9DSVJDTEVDSV9JTlNUQUxMRURfVkVSU0lPTj0kKAogICAgICAiJF9DSVJDTEVDSV9CSU5BUllfUEFUSCIgdmVyc2lvbiB8ICBjdXQgLWQnKycgLWYxKQogICAgaWYgWyAiJF9DSVJDTEVDSV9JTlNUQUxMRURfVkVSU0lPTiIgIT0gIiRfQ0lSQ0xFQ0lfTEFURVNUX1JFTEVBU0VfVkVSU0lPTiIgXTsgdGhlbgogICAgICBwcmludGYgIiVzICh2JXMiICIkX01TR19VUERBVElOR19DSVJDTEVDSSIgIiRfQ0lSQ0xFQ0lfSU5TVEFMTEVEX1ZFUlNJT04iCiAgICAgIHByaW50ZiAiIC0+IHYlcykuLi4iICIkX0NJUkNMRUNJX0xBVEVTVF9SRUxFQVNFX1ZFUlNJT04iCiAgICAgIHN1ZG8gcm0gLWYgIiRfQ0lSQ0xFQ0lfQklOQVJZX1BBVEgiCiAgICAgIGRvd25sb2FkQ2lyY2xlQ0kgL3Vzci9iaW4gIiRfQ0lSQ0xFQ0lfTEFURVNUX1JFTEVBU0VfVkVSU0lPTiIKICAgIGVsc2UKICAgICAgcHJpbnRmICIlcyAodiVzKSIgIiRfTVNHX0ZPVU5EX0NJUkNMRUNJX0lOU1RBTExFRCIgIiRfQ0lSQ0xFQ0lfSU5TVEFMTEVEX1ZFUlNJT04iCiAgICBmaTsKICBmaTsKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOwppZiBbICIkU0VUWCIgLWVxIDEgXTsgdGhlbiBzZXQgK3g7IGZp'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
