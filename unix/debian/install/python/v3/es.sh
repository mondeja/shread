#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfU0VUVElOR19VUF9QWTNfRUNPU1lTVEVNPSIiCl9NU0dfSU5TVEFMTElOR19CQVNFX1BBQ0tBR0U9IiIKX01TR19GT1VORF9QWTNfSU5TVEFMTEVEPSIiCl9NU0dfQ0hFQ0tJTkdfQURESVRJT05BTF9QWTNfUEFDS0FHRVM9IiIKX01TR19VUERBVElOR19HTE9CQUxfUFkzX0xJQlJBUklFUz0iIgpJTkRFTlRfU1RSSU5HPSIiCl9VUEdSQURFX1BZM19HTE9CQUxfTElCUz0xCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNvOiB1bml4L2RlYmlhbi9pbnN0YWxsL3B5dGhvbi92My8kX1NDUklQVF9GSUxFTkFNRSBbLWhdIFstaSBTVFJJTkddIFstLW5vLXVwZ3JhZGUtcHkzLWdsb2JhbC1saWJzXQoKICBJbnN0YWxscyBzb21lIFB5dGhvbjIgYW5kIFB5dGhvbjMgQVBUIHBhY2thZ2VzIGlmIGFyZSBub3QgaW5zdGFsbGVkOgoKICAtIGN1cmwKICAtIHB5dGhvbjMtZGV2CiAgLSBweXRob24zLXBpcAogIC0gcHl0aG9uMy1zZXR1cHRvb2xzCiAgLSBweXRob24zLXRlc3RyZXNvdXJjZXMKICAtIGxpYnhtbDItdXRpbHMKICAtIHB5dGhvbi1seG1sCiAgLSBweXRob24zLWx4bWwKICAtIHB5dGhvbi1udW1weQogIC0gcHl0aG9uMy1udW1weQoKICArIEluIFVidW50dSA+PSAxOCBpbnN0YWxscyBhbHNvOgogICAgLSBweXRob24zLWRpc3R1dGlscwogICsgSW4gVWJ1bnR1IDwgMjAgaW5zdGFsbHMgYWxzbzoKICAgIC0gcHl0aG9uLXBpcAogICAgLSBweXRob24tZGV2CiAgKyBJbiBVYnVudHUgPj0gMjAgaW5zdGFsbHMgYWxzbzoKICAgIC0gcHl0aG9uLWRldi1pcy1weXRob24yCgogIEFsc28sIGluc3RhbGxzIG9yIHVwZ3JhZGUgdXNpbmcgUElQIHNvbWUgUHl0aG9uMyBwYWNrYWdlcyBnbG9iYWxseSAodGhpcyBzdGVwCiAgY2FuIGJlIGlnbm9yZWQgdXNpbmcgJy0tbm8tdXBncmFkZS1weTMtZ2xvYmFsLWxpYnMnIG9wdGlvbik6CgogIC0gcGlwCiAgLSB2aXJ0dWFsZW52CiAgLSBzZXR1cHRvb2xzCiAgLSB0ZXN0cmVzb3VyY2VzCgpPcGNpb25lczoKICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4KICAtaSBTVFJJTkcsIC0taW5kZW50IFNUUklORyAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBzY3JpcHQgb3V0cHV0IHdpbGwgYmUgcHJlY2VkZWQgd2l0aCB0aGUgc3RyaW5nIGRlZmluZWQgaW4gdGhpcyBwYXJhbWV0ZXIuCiAgLS1uby11cGdyYWRlLXB5My1nbG9iYWwtbGlicyAgICAgIElnbm9yZXMgdGhlIGluc3RhbGxhdGlvbiBvciB1cGdyYWRlIG9mIFB5dGhvbjMgcGFja2FnZXMgZ2xvYmFsbHkgdXNpbmcgUElQLgoKSEVMUF9VU0FHRQogICAgZXhpdCAxCn0KZm9yIGFyZyBpbiAiJEAiOyBkbwogIGNhc2UgJGFyZyBpbgogICAgLWl8LS1pbmRlbnQpCiAgICBJTkRFTlRfU1RSSU5HPSIkMiIKICAgIHNoaWZ0IDIKICAgIDs7CiAgICAtaHwtLWhlbHApCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7ICAgIAogICAgLS1uby11cGdyYWRlLXB5My1nbG9iYWwtbGlicykKICAgIF9VUEdSQURFX1BZM19HTE9CQUxfTElCUz0wCiAgICBzaGlmdAogICAgOzsKICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGdldFVuaXhEaXN0cm8oKSB7CiAgaWYgWyAteiAiJFVOSVhfRElTVFJPIiBdIHx8IFsgLXogIiRVTklYX0RJU1RST19WRVJTSU9OX05VTUJFUl9NQUpPUiIgXTsgdGhlbgogICAgc291cmNlIDwoY3VybCAtc0wgaHR0cHM6Ly9tb25kZWphLmdpdGh1Yi5pby9zaHJlYWQvdW5peC9fL3V0aWwvZ2V0LWRpc3Ryby9lbi5zaCkKICBmaTsKfQpmdW5jdGlvbiBpbnN0YWxsTWFpblB5dGhvbjNBcHRQYWNrYWdlIHsKICBwcmludEluZGVudAogIFBZM19CSU5BUllfRklMRVBBVEg9IiQoY29tbWFuZCAtdiBweXRob24zKSIKICBpZiBbICIkUFkzX0JJTkFSWV9GSUxFUEFUSCIgPSAiIiBdOyB0aGVuCiAgICBfUFlUSE9OX1NUQUJMRV9QQUNLQUdFX1ZFUlNJT049JCgKICAgICAgcGFjbWFuIC1RaSBweXRob24zLWRldiB8IGdyZXAgVmVyc2lvbjogfCBjdXQgLWQnICcgLWYyKQogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfSU5TVEFMTElOR19CQVNFX1BBQ0tBR0UiCiAgICBpZiBbICIkX1BZVEhPTl9TVEFCTEVfUEFDS0FHRV9WRVJTSU9OIiAhPSAiIiBdOyB0aGVuCiAgCSAgcHJpbnRmICIgKHYlcykiICIkX1BZVEhPTl9TVEFCTEVfUEFDS0FHRV9WRVJTSU9OIgogICAgZmk7CiAgICBwcmludGYgIi4uLiIKICAgIHN1ZG8gcGFjbWFuIC1TIC0tIC15IHB5dGhvbjMtZGV2ID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICAgIF9QWVRIT05fVkVSU0lPTj0iJCgiJFBZM19CSU5BUllfRklMRVBBVEgiIC0tdmVyc2lvbiB8IGN1dCAtYzctMTIgfCB0ciAtZCAnICcpIgogIGVsc2UKICAgIF9QWVRIT05fVkVSU0lPTj0iJCgiJFBZM19CSU5BUllfRklMRVBBVEgiIC0tdmVyc2lvbiB8IGN1dCAtYzctMTIgfCB0ciAtZCAnICcpIgogIAlwcmludGYgIiAgJXMgKHYlcykiICIkX01TR19GT1VORF9QWTNfSU5TVEFMTEVEIiAiJF9QWVRIT05fVkVSU0lPTiIKICBmaTsKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpmdW5jdGlvbiBkaXNjb3Zlckluc3RhbGxhdGlvbkFwdFBhY2thZ2VzIHsKICBJTlNUQUxMQVRJT05fUEFDS0FHRVM9KAogICAgInB5dGhvbjMtZGV2IgogICAgInB5dGhvbjMtcGlwIgogICAgInB5dGhvbjMtc2V0dXB0b29scyIKICAgICJweXRob24zLXRlc3RyZXNvdXJjZXMiCiAgICAibGlieG1sMi11dGlscyIKICAgICJweXRob24tbHhtbCIKICAgICJweXRob24zLWx4bWwiCiAgICAicHl0aG9uLW51bXB5IgogICAgInB5dGhvbjMtbnVtcHkiCiAgKQogIGlmIFsgIiRVTklYX0RJU1RSTyIgPSAidWJ1bnR1IiBdOyB0aGVuCiAgICBpZiBbICIkVU5JWF9ESVNUUk9fVkVSU0lPTl9OVU1CRVJfTUFKT1IiIC1nZSAxOCBdOyB0aGVuCiAgICAgIElOU1RBTExBVElPTl9QQUNLQUdFUys9KAogICAgICAgICJweXRob24zLWRpc3R1dGlscyIKICAgICAgKQogICAgZmk7CiAgICBpZiBbICIkVU5JWF9ESVNUUk9fVkVSU0lPTl9OVU1CRVJfTUFKT1IiIC1sdCAyMCBdOyB0aGVuCiAgICAgIElOU1RBTExBVElPTl9QQUNLQUdFUys9KAogICAgICAgICJweXRob24tcGlwIgogICAgICAgICJweXRob24tZGV2IgogICAgICApCiAgICBlbHNlCiAgICAgIElOU1RBTExBVElPTl9QQUNLQUdFUys9KAogICAgICAgICJweXRob24tZGV2LWlzLXB5dGhvbjIiCiAgICAgICkKICAgIGZpOwogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxQeXRob25BZGRpdGlvbmFsQXB0UGFja2FnZXMgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzXG4iICIkX01TR19DSEVDS0lOR19BRERJVElPTkFMX1BZM19QQUNLQUdFUyIKICBmb3IgREVQIGluICIke0lOU1RBTExBVElPTl9QQUNLQUdFU1tAXX0iOyBkbwogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAgICVzIiAiJERFUCIKICAgIGlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSAiJERFUCIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgICAgc3VkbyBwYWNtYW4gLVMgLS0gLXkgIiRERVAiID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICAgIGZpOwogICAgX0RFUF9WRVJTSU9OPSQoYXB0LWNhY2hlIHBvbGljeSAiJERFUCIgfCBncmVwIC1QbyAiKFxkK1wuKStcZCsiIHwgaGVhZCAtbiAxKQogICAgaWYgWyAiJF9ERVBfVkVSU0lPTiIgIT0gIiIgXTsgdGhlbgogICAgICBwcmludGYgIiAodiVzKSIgIiRfREVQX1ZFUlNJT04iCiAgICBmaTsKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGRvbmUKfQpmdW5jdGlvbiBjb25maWd1cmVQSVAgewogIFVTRVJfSE9NRT0iJChnZXRlbnQgcGFzc3dkICIkU1VET19VU0VSIiB8IGN1dCAtZDogLWY2KSIKICBpZiBbIC1kICIkSE9NRS8uY2FjaGUvcGlwLyIgXTsgdGhlbgogICAgX1BJUF9DQUNIRV9GSUxFUEFUSD0iJFVTRVJfSE9NRS8uY2FjaGUvcGlwLyIKICAgIGlmIFsgLWYgIiRfUElQX0NBQ0hFX0ZJTEVQQVRIIiBdOyB0aGVuCiAgICAgIHN1ZG8gY2hvd24gLVIgIiRTVURPX1VTRVIiICIkX1BJUF9DQUNIRV9GSUxFUEFUSCIKICAgIGZpOwogIGZpOwogIGlmIFsgIiQoY29tbWFuZCAtdiBweXRob24yKSIgIT0gIiIgXTsgdGhlbgogICAgc3VkbyBweXRob24yIC1tIHBpcCBpbnN0YWxsIC1xcSBwaXA9PTIwLjAuMgogIGZpOwp9CmZ1bmN0aW9uIHVwZ3JhZGVHbG9iYWxMaWJyYXJpZXMgewogIGlmIFsgJF9VUEdSQURFX1BZM19HTE9CQUxfTElCUyAtZXEgMSBdOyB0aGVuCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzXG4iICIkX01TR19VUERBVElOR19HTE9CQUxfUFkzX0xJQlJBUklFUyIKICAgIEdMT0JBTF9SRUNPTU1FTkRFRF9MSUJSQVJJRVM9KAogICAgICAicGlwIgogICAgICAidmlydHVhbGVudiIKICAgICAgInNldHVwdG9vbHMiCiAgICAgICJ0ZXN0cmVzb3VyY2VzIgogICAgKQogICAgZm9yIExJQiBpbiAiJHtHTE9CQUxfUkVDT01NRU5ERURfTElCUkFSSUVTW0BdfSI7IGRvCiAgICAgIHByaW50SW5kZW50CiAgICAgIHByaW50ZiAiICAgICVzIiAiJExJQiIKICAgICAgX0dFVF9WRVJTSU9OX0VYRUNfU1RSPSIKaW1wb3J0IHN5czsKdHJ5OiBpbXBvcnQgJExJQiBhcyBsOwpleGNlcHQgSW1wb3J0RXJyb3IgYXMgZXJyOiBzeXMuZXhpdCg3NzcpOwpwcmludChsLl9fdmVyc2lvbl9fIGlmIGlzaW5zdGFuY2UobC5fX3ZlcnNpb25fXywgc3RyKSBlbHNlICAgJy4nLmpvaW4oW3N0cih2KSBmb3IgdiBpbiBsLl9fdmVyc2lvbl9fXVs6M10pLCBlbmQ9JycpOwogICIKICAgICAgX0xJQl9MT0NBTF9WRVJTSU9OPSIkKCIkUFkzX0JJTkFSWV9GSUxFUEFUSCIgLWMgIiRfR0VUX1ZFUlNJT05fRVhFQ19TVFIiKSIKICAgICAgX0xJQl9MT0NBTF9WRVJTSU9OX0VYSVRfQ09ERT0kPwogICAgICBpZiBbICRfTElCX0xPQ0FMX1ZFUlNJT05fRVhJVF9DT0RFIC1lcSA3NzcgXTsgdGhlbgogICAgICAJc3VkbyAtSCAiJFBZM19CSU5BUllfRklMRVBBVEgiIC1tIHBpcCBpbnN0YWxsIC1VIC0tcXVpZXQgIiRMSUIiCiAgICAgIGVsc2UKICAgICAgICBwcmludGYgIiAoIgogICAgICAgIGlmIFsgIiRfTElCX0xPQ0FMX1ZFUlNJT04iICE9ICIiIF07IHRoZW4KICAgICAgICAgIHByaW50ZiAidiVzIiAiJF9MSUJfTE9DQUxfVkVSU0lPTiIKICAgICAgICBmaTsKICAgICAgICBfTElCX0xBU1RfUFlQSV9WRVJTSU9OPSQoCiAgICAgICAgICB4bWxsaW50IC0taHRtbCAtLXhwYXRoICIvL2FbbGFzdCgpXS90ZXh0KCkgIiAgICAgICAgICAgICA8KGN1cmwgLXNMICJodHRwczovL3B5cGkub3JnL3NpbXBsZS8kTElCLyIpIHwgICAgICAgICAgICAgZ3JlcCAtUG8gIihcZCtcLikrXGQrXHcqIikKICAgICAgICAgIGlmIFsgIiRfTElCX0xBU1RfUFlQSV9WRVJTSU9OIiAhPSAiJF9MSUJfTE9DQUxfVkVSU0lPTiIgXTsgdGhlbgogICAgICAgICAgICBpZiBbICIkX0xJQl9MT0NBTF9WRVJTSU9OIiAhPSAiIiBdOyB0aGVuCiAgICAgICAgICAgICAgcHJpbnRmICIgLT4gIgogICAgICAgICAgICBmaTsKICAgICAgICAgICAgcHJpbnRmICJ2JXMpLi4uIiAiJF9MSUJfTEFTVF9QWVBJX1ZFUlNJT04iCiAgICAgICAgICAgIF9saWJfZXF1YWxfdmVyc2lvbj0iJExJQj09JF9MSUJfTEFTVF9QWVBJX1ZFUlNJT04iCiAgICAgICAgICAgIHN1ZG8gLUggIiRQWTNfQklOQVJZX0ZJTEVQQVRIIiAtbSBwaXAgaW5zdGFsbCAtVSAtcXEgIiRfbGliX2VxdWFsX3ZlcnNpb24iCiAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHByaW50ZiAiKSIKICAgICAgICAgIGZpOwogICAgICBmaTsKICAgICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgICBkb25lCiAgZmk7Cn0KZnVuY3Rpb24gbWFpbiB7CiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgZ2V0VW5peERpc3RybwogIHByaW50SW5kZW50CiAgcHJpbnRmICIlc1xuIiAiJF9NU0dfU0VUVElOR19VUF9QWTNfRUNPU1lTVEVNIgogIGluc3RhbGxNYWluUHl0aG9uM0FwdFBhY2thZ2UKICBkaXNjb3Zlckluc3RhbGxhdGlvbkFwdFBhY2thZ2VzCiAgaW5zdGFsbFB5dGhvbkFkZGl0aW9uYWxBcHRQYWNrYWdlcwogIGNvbmZpZ3VyZVBJUAogIHVwZ3JhZGVHbG9iYWxMaWJyYXJpZXMKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOw=='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
