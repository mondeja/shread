#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQUxSRUFEWV9JTlNUQUxMRUQ9InlhIHNlIGVuY3VlbnRyYSBpbnN0YWxhZG8iCl9NU0dfQ0hFQ0tJTkdfQVRPTT0iQ29tcHJvYmFuZG8gQXRvbSIKX01TR19FUlJPUl9PQlRBSU5JTkdfQVRPTV9QVUJMSUNfS0VZPSJPY3VycmnDsyB1biBlcnJvciBvYnRlbmllbmRvIGxhIGNsYXZlIHDDumJsaWNhIGRlIEF0b20iCl9NU0dfQURESU5HX1JFUE89IkHDsWFkaWVuZG8gcmVwb3NpdG9yaW8iCl9NU0dfVVBEQVRJTkdfUEFDS0FHRVM9IkFjdHVhbGl6YW5kbyBwYXF1ZXRlcy4uLiIKX01TR19BVE9NX0ZPVU5EPSJBdG9tIGVuY29udHJhZG8iCl9NU0dfUlVOTklOR19JTlNUQUxMQVRJT05fU0NSSVBUPSJFamVjdXRhbmRvIHNjcmlwdCBkZSBpbnN0YWxhY2nDs24uLi4iCl9NU0dfRVJST1JfSU5TVEFMTElOR19BVE9NPSJPY3VycmnDsyB1biBlcnJvciBpbnN0YWxhbmRvIEF0b20iCklOREVOVF9TVFJJTkc9IiIKU0VUWD0wCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvYXRvbS8kX1NDUklQVF9GSUxFTkFNRSBbLWhdIFstaSBTVFJJTkddIAoKICBJbnN0YWxhIEF0b20gdXNhbmRvIGVsIHJlcG9zaXRvcmlvIGh0dHBzOi8vcGFja2FnZWNsb3VkLmlvL0F0b21FZGl0b3IgY29tbyBmdWVudGUuCgpPcHRpb25zOgogIC1oLCAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0LgogIC1pIFNUUklORywgLS1pbmRlbnQgU1RSSU5HICAgICAgICBFYWNoIGxpbmUgb2YgdGhlIHNjcmlwdCBvdXRwdXQgd2lsbCBiZSBwcmVjZWRlZCB3aXRoIHRoZSBzdHJpbmcgZGVmaW5lZCBpbiB0aGlzIHBhcmFtZXRlci4KICAtLXNldC14ICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0cyB0aGUgLXggb3B0aW9uIGluIEJhc2ggdG8gcHJpbnQgb3V0IHRoZSBzdGF0ZW1lbnRzIGFzIHRoZXkgYXJlIGJlaW5nIGV4ZWN1dGVkLiBVc2VmdWwgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy4KSEVMUF9VU0FHRQogICAgZXhpdCAxCn0KZm9yIGFyZyBpbiAiJEAiOyBkbwogIGNhc2UgJGFyZyBpbgogICAgLWl8LS1pbmRlbnQpCiAgICBJTkRFTlRfU1RSSU5HPSIkMiIKICAgIHNoaWZ0IDIKICAgIDs7CiAgICAtaHwtLWhlbHApCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7ICAgIC0tc2V0LXgpCiAgICBTRVRYPTEKICAgIHNoaWZ0CiAgICA7OyAgICAgIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KaWYgWyAiJFNFVFgiIC1lcSAxIF07IHRoZW4gc2V0IC14OyBmaQpmdW5jdGlvbiBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQoKSB7CiAgaWYgWyAiJChjb21tYW5kIC12IHBhY21hbikiID0gIiIgXTsgdGhlbgogICAgdXJsPSJodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vZG93bmxvYWQvcGFjYXB0LyRfU0NSSVBUX0ZJTEVOQU1FIgogICAgY3VybCAtc0wgIiR1cmwiIHwgc3VkbyBiYXNoIC0gPiAvZGV2L251bGwKICBmaTsKfQpmdW5jdGlvbiBpbnN0YWxsU2NyaXB0RGVwZW5kZW5jaWVzKCkgewogIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZAogIElOU1RBTExBVElPTl9ERVBFTkRFTkNJRVM9KAogICAgIndnZXQiCiAgICAianEiCiAgICAiZ251cGcyIgogICkKICBmb3IgREVQIGluICIke0lOU1RBTExBVElPTl9ERVBFTkRFTkNJRVNbQF19IjsgZG8KICAgIGlmIFtbICIkKHN1ZG8gcGFjbWFuIC1RaSAiJERFUCIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgICAgc3VkbyBwYWNtYW4gLVMgLS0gLXkgIiRERVAiID4gL2Rldi9udWxsIHx8IGV4aXQgJD8KICAgIGZpOwogIGRvbmU7Cn0KZnVuY3Rpb24gc2lnbkF0b21HcGdLZXkoKSB7CiAgU0lHTl9BVE9NX0dQR19LRVlfU1RERVJSPSQoCiAgICB3Z2V0IC1xTyAtIGh0dHBzOi8vcGFja2FnZWNsb3VkLmlvL0F0b21FZGl0b3IvYXRvbS9ncGdrZXkgfCAgICAgc3VkbyBhcHQta2V5IGFkZCAtIDI+JjEgPiAvZGV2L251bGwpCiAgU0lHTl9BVE9NX0dQR19LRVlfRVhJVF9DT0RFPSQ/CiAgaWYgWyAkU0lHTl9BVE9NX0dQR19LRVlfRVhJVF9DT0RFIC1uZSAwIF07IHRoZW4KICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgIHByaW50ZiAiXG4lc1xuIiAiJF9NU0dfRVJST1JfT0JUQUlOSU5HX0FUT01fUFVCTElDX0tFWSIgPiYyCiAgICBwcmludGYgIiVzXG4iICIkU0lHTl9BVE9NX0dQR19LRVlfU1RERVJSIiA+JjIKICAgIGV4aXQgJFNJR05fQVRPTV9HUEdfS0VZX0VYSVRfQ09ERQogIGZpOwp9CmZ1bmN0aW9uIGFkZEF0b21SZXBvc2l0b3J5VG9Tb3VyY2VzKCkgewogIGlmIFsgISAtZiAiL2V0Yy9hcHQvc291cmNlcy5saXN0LmQvYXRvbS5saXN0IiBdOyB0aGVuCiAgICBBUkNIPSJhbWQ2NCIKICAgIGNhc2UgJCh1bmFtZSAtbSkgaW4KICAgICAgICBpMzg2KSAgIEFSQ0g9IjM4NiIgOzsKICAgICAgICBpNjg2KSAgIEFSQ0g9IjM4NiIgOzsKICAgICAgICB4ODZfNjQpIEFSQ0g9ImFtZDY0IiA7OwogICAgICAgIGFybSkgICAgZHBrZyAtLXByaW50LWFyY2hpdGVjdHVyZSB8IGdyZXAgLXEgImFybTY0IiAmJiBBUkNIPSJhcm02NCIgfHwgQVJDSD0iYXJtIiA7OwogICAgZXNhYwogICAgZWNobyAgICAgICAiZGViIFthcmNoPSR7QVJDSH1dIGh0dHBzOi8vcGFja2FnZWNsb3VkLmlvL0F0b21FZGl0b3IvYXRvbS9hbnkvIGFueSBtYWluIiAgICAgICB8IHN1ZG8gdGVlIC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL2F0b20ubGlzdAogIGZpOwp9CmZ1bmN0aW9uIHVwZGF0ZVBhY2thZ2VzKCkgewogIHN1ZG8gcGFjbWFuIHVwZGF0ZSA+IC9kZXYvbnVsbAp9CkFUT01fVkVSU0lPTj0iIgpmdW5jdGlvbiBnZXRBdG9tVmVyc2lvbigpIHsKICBBVE9NX1ZFUlNJT049IiQocGFjbWFuIC1TaSBhdG9tIHwgZ3JlcCBWZXJzaW9uOiB8IGhlYWQgLW4gMSB8IGN1dCAtZCAnICcgLWYyKSIKfQpmdW5jdGlvbiBpbnN0YWxsQXRvbSgpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiJXNcbiIgIiRfTVNHX0NIRUNLSU5HX0FUT00iCiAgaW5zdGFsbFNjcmlwdERlcGVuZGVuY2llcwogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzLi4uIiAiJF9NU0dfQURESU5HX1JFUE8iCiAgc2lnbkF0b21HcGdLZXkKICBhZGRBdG9tUmVwb3NpdG9yeVRvU291cmNlcwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzIiAiJF9NU0dfVVBEQVRJTkdfUEFDS0FHRVMiCiAgdXBkYXRlUGFja2FnZXMKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICBnZXRBdG9tVmVyc2lvbgogIGlmIFsgIiRBVE9NX1ZFUlNJT04iICE9ICIiIF07IHRoZW4KICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgJXMgKHYlcykiICIkX01TR19BVE9NX0ZPVU5EIiAiJEFUT01fVkVSU0lPTiIKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGZpOwogIHByaW50SW5kZW50CiAgcHJpbnRmICIgICVzIiAiJF9NU0dfUlVOTklOR19JTlNUQUxMQVRJT05fU0NSSVBUIgogIElOU1RBTExfQVRPTV9TVERFUlI9IiQoc3VkbyBwYWNtYW4gLVMgLS0gLXkgYXRvbSA+IC9kZXYvbnVsbCkiCiAgSU5TVEFMTF9BVE9NX0VYSVRfQ09ERT0kPwogIGlmIFsgIiRJTlNUQUxMX0FUT01fRVhJVF9DT0RFIiAtbmUgMCBdOyB0aGVuCiAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBwcmludGYgIlxuJXMiICIkX01TR19FUlJPUl9JTlNUQUxMSU5HX0FUT00iID4mMgogICAgaWYgWyAiJEFUT01fVkVSU0lPTiIgIT0gIiIgXTsgdGhlbgogICAgICBwcmludGYgIiAodiVzKSIgIiRBVE9NX1ZFUlNJT04iID4mMgogICAgZmk7CiAgICBwcmludGYgIjpcbiVzXG4iICIkSU5TVEFMTF9BVE9NX1NUREVSUiIgPiYyCiAgICBleGl0ICRJTlNUQUxMX0FUT01fRVhJVF9DT0RFCiAgZmk7CiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCn0KZnVuY3Rpb24gcHJpbnRBdG9tSW5zdGFsbGVkTXNnKCkgewogIHByaW50SW5kZW50CiAgQVRPTV9WRVJTSU9OPSQoCiAgICBhcG0gLXYgfCAgICAgc2VkIC1uIDRwIHwgICAgIGN1dCAtZCcgJyAtZjIgfCAgICAgc2VkIC1yICJzL1x4MUJcWyhbMC05XXsxLDJ9KDtbMC05XXsxLDJ9KT8pP1ttR0tdLy9nIikKICBwcmludGYgIkF0b20gdiVzICVzIiAiJEFUT01fVkVSU0lPTiIgIiRfTVNHX0FMUkVBRFlfSU5TVEFMTEVEIgogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgQVRPTV9CSU5BUllfUEFUSD0iJChjb21tYW5kIC12IGF0b20pIgogIGlmIFsgIiRBVE9NX0JJTkFSWV9QQVRIIiAhPSAiIiBdOyB0aGVuCiAgICBwcmludEF0b21JbnN0YWxsZWRNc2cKICBlbHNlCiAgICBpbnN0YWxsQXRvbQogIGZpOwp9CmZ1bmN0aW9uIGV4cG9ydFZhcmlhYmxlcygpIHsKICBzaWduQXRvbUdwZ0tleQogIGFkZEF0b21SZXBvc2l0b3J5VG9Tb3VyY2VzCiAgdXBkYXRlUGFja2FnZXMKICBnZXRBdG9tVmVyc2lvbgogIGV4cG9ydCBBVE9NX1ZFUlNJT04KfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOwppZiBbICIkU0VUWCIgLWVxIDEgXTsgdGhlbiBzZXQgK3g7IGZp'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
