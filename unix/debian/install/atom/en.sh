#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQUxSRUFEWV9JTlNUQUxMRUQ9ImlzIGFscmVhZHkgaW5zdGFsbGVkIgpfTVNHX0NIRUNLSU5HX0FUT009IkNoZWNraW5nIEF0b20uLi4iCl9NU0dfRVJST1JfT0JUQUlOSU5HX0FUT01fUFVCTElDX0tFWT0iQW4gZXJyb3IgaGFwcGVuIHJlcmlldmluZyBBdG9tIHB1YmxpYyBrZXk6IgpfTVNHX0FERElOR19SRVBPPSJBZGRpbmcgcmVwb3NpdG9yeS4uLiIKX01TR19VUERBVElOR19QQUNLQUdFUz0iVXBkYXRpbmcgcGFja2FnZXMuLi4iCl9NU0dfQVRPTV9GT1VORD0iQXRvbSBmb3VuZCIKX01TR19SVU5OSU5HX0lOU1RBTExBVElPTl9TQ1JJUFQ9IlJ1bm5pbmcgaW5zdGFsbGF0aW9uIHNjcmlwdC4uLiIKX01TR19FUlJPUl9JTlNUQUxMSU5HX0FUT009IkFuIGVycm9yIGhhcHBlbiBpbnN0YWxsaW5nIEF0b20iCklOREVOVF9TVFJJTkc9IiIKZnVuY3Rpb24gdXNhZ2UgewogICAgY2F0IDw8SEVMUF9VU0FHRQpVc2FnZTogdW5peC9kZWJpYW4vaW5zdGFsbC9hdG9tLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gCgogIEluc3RhbGxzIEF0b20gdXNpbmcgaHR0cHM6Ly9wYWNrYWdlY2xvdWQuaW8vQXRvbUVkaXRvciByZXBvc2l0b3J5IGFzIHNvdXJjZS4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIElOREVOVF9TVFJJTkc9IiQyIgogICAgc2hpZnQgMgogICAgOzsKICAgIC1ofC0taGVscCkKICAgIHNoaWZ0CiAgICB1c2FnZQogICAgOzsgICAgICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxTY3JpcHREZXBlbmRlbmNpZXMoKSB7CiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCiAgSU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFUz0oCiAgICAid2dldCIKICAgICJqcSIKICAgICJnbnVwZzIiCiAgKQogIGZvciBERVAgaW4gIiR7SU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFU1tAXX0iOyBkbwogICAgaWYgW1sgIiQoc3VkbyBwYWNtYW4gLVFpICIkREVQIiAyPiAvZGV2L251bGwgfCBncmVwIFN0YXR1cykiICE9ICJTdGF0dXM6IGluc3RhbGwgb2sgaW5zdGFsbGVkIiBdXTsgdGhlbgogICAgICBzdWRvIHBhY21hbiAtUyAtLSAteSAiJERFUCIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogICAgZmk7CiAgZG9uZTsKfQpmdW5jdGlvbiBzaWduQXRvbUdwZ0tleSgpIHsKICBTSUdOX0FUT01fR1BHX0tFWV9TVERFUlI9JCgKICAgIHdnZXQgLXFPIC0gaHR0cHM6Ly9wYWNrYWdlY2xvdWQuaW8vQXRvbUVkaXRvci9hdG9tL2dwZ2tleSB8ICAgICBzdWRvIGFwdC1rZXkgYWRkIC0gMj4mMSA+IC9kZXYvbnVsbCkKICBTSUdOX0FUT01fR1BHX0tFWV9FWElUX0NPREU9JD8KICBpZiBbICRTSUdOX0FUT01fR1BHX0tFWV9FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzXG4iICIkX01TR19FUlJPUl9PQlRBSU5JTkdfQVRPTV9QVUJMSUNfS0VZIiA+JjIKICAgIHByaW50ZiAiJXNcbiIgIiRTSUdOX0FUT01fR1BHX0tFWV9TVERFUlIiID4mMgogICAgZXhpdCAkU0lHTl9BVE9NX0dQR19LRVlfRVhJVF9DT0RFCiAgZmk7Cn0KZnVuY3Rpb24gYWRkQXRvbVJlcG9zaXRvcnlUb1NvdXJjZXMoKSB7CiAgaWYgWyAhIC1mICIvZXRjL2FwdC9zb3VyY2VzLmxpc3QuZC9hdG9tLmxpc3QiIF07IHRoZW4KICAgIEFSQ0g9ImFtZDY0IgogICAgY2FzZSAkKHVuYW1lIC1tKSBpbgogICAgICAgIGkzODYpICAgQVJDSD0iMzg2IiA7OwogICAgICAgIGk2ODYpICAgQVJDSD0iMzg2IiA7OwogICAgICAgIHg4Nl82NCkgQVJDSD0iYW1kNjQiIDs7CiAgICAgICAgYXJtKSAgICBkcGtnIC0tcHJpbnQtYXJjaGl0ZWN0dXJlIHwgZ3JlcCAtcSAiYXJtNjQiICYmIEFSQ0g9ImFybTY0IiB8fCBBUkNIPSJhcm0iIDs7CiAgICBlc2FjCiAgICBlY2hvICAgICAgICJkZWIgW2FyY2g9JHtBUkNIfV0gaHR0cHM6Ly9wYWNrYWdlY2xvdWQuaW8vQXRvbUVkaXRvci9hdG9tL2FueS8gYW55IG1haW4iICAgICAgIHwgc3VkbyB0ZWUgL2V0Yy9hcHQvc291cmNlcy5saXN0LmQvYXRvbS5saXN0CiAgZmk7Cn0KZnVuY3Rpb24gdXBkYXRlUGFja2FnZXMoKSB7CiAgc3VkbyBwYWNtYW4gdXBkYXRlID4gL2Rldi9udWxsCn0KQVRPTV9WRVJTSU9OPSIiCmZ1bmN0aW9uIGdldEF0b21WZXJzaW9uKCkgewogIEFUT01fVkVSU0lPTj0iJChwYWNtYW4gLVNpIGF0b20gfCBncmVwIFZlcnNpb246IHwgaGVhZCAtbiAxIHwgY3V0IC1kICcgJyAtZjIpIgp9CmZ1bmN0aW9uIGluc3RhbGxBdG9tKCkgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfQVRPTSIKICBpbnN0YWxsU2NyaXB0RGVwZW5kZW5jaWVzCiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiAgJXMuLi4iICIkX01TR19BRERJTkdfUkVQTyIKICBzaWduQXRvbUdwZ0tleQogIGFkZEF0b21SZXBvc2l0b3J5VG9Tb3VyY2VzCiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiAgJXMiICIkX01TR19VUERBVElOR19QQUNLQUdFUyIKICB1cGRhdGVQYWNrYWdlcwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGdldEF0b21WZXJzaW9uCiAgaWYgWyAiJEFUT01fVkVSU0lPTiIgIT0gIiIgXTsgdGhlbgogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyAodiVzKSIgIiRfTVNHX0FUT01fRk9VTkQiICIkQVRPTV9WRVJTSU9OIgogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZmk7CiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiAgJXMiICIkX01TR19SVU5OSU5HX0lOU1RBTExBVElPTl9TQ1JJUFQiCiAgSU5TVEFMTF9BVE9NX1NUREVSUj0iJChzdWRvIHBhY21hbiAtUyAtLSAteSBhdG9tID4gL2Rldi9udWxsKSIKICBJTlNUQUxMX0FUT01fRVhJVF9DT0RFPSQ/CiAgaWYgWyAiJElOU1RBTExfQVRPTV9FWElUX0NPREUiIC1uZSAwIF07IHRoZW4KICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgIHByaW50ZiAiXG4lcyIgIiRfTVNHX0VSUk9SX0lOU1RBTExJTkdfQVRPTSIgPiYyCiAgICBpZiBbICIkQVRPTV9WRVJTSU9OIiAhPSAiIiBdOyB0aGVuCiAgICAgIHByaW50ZiAiICh2JXMpIiAiJEFUT01fVkVSU0lPTiIgPiYyCiAgICBmaTsKICAgIHByaW50ZiAiOlxuJXNcbiIgIiRJTlNUQUxMX0FUT01fU1RERVJSIiA+JjIKICAgIGV4aXQgJElOU1RBTExfQVRPTV9FWElUX0NPREUKICBmaTsKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpmdW5jdGlvbiBwcmludEF0b21JbnN0YWxsZWRNc2coKSB7CiAgcHJpbnRJbmRlbnQKICBBVE9NX1ZFUlNJT049JCgKICAgIGFwbSAtdiB8ICAgICBzZWQgLW4gNHAgfCAgICAgY3V0IC1kJyAnIC1mMiB8ICAgICBzZWQgLXIgInMvXHgxQlxbKFswLTldezEsMn0oO1swLTldezEsMn0pPyk/W21HS10vL2ciKQogIHByaW50ZiAiQXRvbSB2JXMgJXMiICIkQVRPTV9WRVJTSU9OIiAiJF9NU0dfQUxSRUFEWV9JTlNUQUxMRUQiCiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCn0KZnVuY3Rpb24gbWFpbigpIHsKICBBVE9NX0JJTkFSWV9QQVRIPSIkKGNvbW1hbmQgLXYgYXRvbSkiCiAgaWYgWyAiJEFUT01fQklOQVJZX1BBVEgiICE9ICIiIF07IHRoZW4KICAgIHByaW50QXRvbUluc3RhbGxlZE1zZwogIGVsc2UKICAgIGluc3RhbGxBdG9tCiAgZmk7Cn0KZnVuY3Rpb24gZXhwb3J0VmFyaWFibGVzKCkgewogIHNpZ25BdG9tR3BnS2V5CiAgYWRkQXRvbVJlcG9zaXRvcnlUb1NvdXJjZXMKICB1cGRhdGVQYWNrYWdlcwogIGdldEF0b21WZXJzaW9uCiAgZXhwb3J0IEFUT01fVkVSU0lPTgp9CmlmIChyZXR1cm4gMCAyPi9kZXYvbnVsbCk7IHRoZW4KICBleHBvcnRWYXJpYWJsZXMKZWxzZQogIG1haW4KZmk7'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
