#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCl9NU0dfRVhFQ1VURURfQVNfU1VQRVJVU0VSPSJUaGlzIHNjcmlwdCBuZWVkcyB0byBiZSBleGVjdXRlZCBhcyBzdXBlcnVzZXIuIgpfTVNHX0FMUkVBRFlfSU5TVEFMTEVEPSJpcyBhbHJlYWR5IGluc3RhbGxlZCIKX01TR19DSEVDS0lOR19BVE9NPSJDaGVja2luZyBBdG9tLi4uIgpfTVNHX0VSUk9SX09CVEFJTklOR19BVE9NX1BVQkxJQ19LRVk9IkFuIGVycm9yIGhhcHBlbiByZXJpZXZpbmcgQXRvbSBwdWJsaWMga2V5OiIKX01TR19BRERJTkdfUkVQTz0iQWRkaW5nIHJlcG9zaXRvcnkuLi4iCl9NU0dfVVBEQVRJTkdfUEFDS0FHRVM9IlVwZGF0aW5nIHBhY2thZ2VzLi4uIgpfTVNHX0FUT01fRk9VTkQ9IkF0b20gZm91bmQiCl9NU0dfUlVOTklOR19JTlNUQUxMQVRJT05fU0NSSVBUPSJSdW5uaW5nIGluc3RhbGxhdGlvbiBzY3JpcHQuLi4iCl9NU0dfRVJST1JfSU5TVEFMTElOR19BVE9NPSJBbiBlcnJvciBoYXBwZW4gaW5zdGFsbGluZyBBdG9tIgpJTkRFTlRfU1RSSU5HPSIiCmZvciBhcmcgaW4gIiRAIjsgZG8KICBjYXNlICRhcmcgaW4KICAgIC0taW5kZW50KQogICAgc2hpZnQKICAgIElOREVOVF9TVFJJTkc9JDEKICAgIHNoaWZ0CiAgICA7OwogIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KZnVuY3Rpb24gc2lnbkF0b21HcGdLZXkoKSB7CiAgU0lHTl9BVE9NX0dQR19LRVlfU1RERVJSPSQoCiAgICB3Z2V0IC1xTyAtIGh0dHBzOi8vcGFja2FnZWNsb3VkLmlvL0F0b21FZGl0b3IvYXRvbS9ncGdrZXkgfCBcCiAgICBzdWRvIGFwdC1rZXkgYWRkIC0gMj4mMSA+IC9kZXYvbnVsbCkKICBTSUdOX0FUT01fR1BHX0tFWV9FWElUX0NPREU9JD8KICBpZiBbICRTSUdOX0FUT01fR1BHX0tFWV9FWElUX0NPREUgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzXG4iICIkX01TR19FUlJPUl9PQlRBSU5JTkdfQVRPTV9QVUJMSUNfS0VZIiA+JjIKICAgIHByaW50ZiAiJXNcbiIgIiRTSUdOX0FUT01fR1BHX0tFWV9TVERFUlIiID4mMgogICAgZXhpdCAkU0lHTl9BVE9NX0dQR19LRVlfRVhJVF9DT0RFCiAgZmk7Cn0KZnVuY3Rpb24gYWRkQXRvbVJlcG9zaXRvcnlUb1NvdXJjZXMoKSB7CiAgaWYgWyAhIC1mICIvZXRjL2FwdC9zb3VyY2VzLmxpc3QuZC9hdG9tLmxpc3QiIF07IHRoZW4KICAgIEFSQ0g9ImFtZDY0IgogICAgY2FzZSAkKHVuYW1lIC1tKSBpbgogICAgICAgIGkzODYpICAgQVJDSD0iMzg2IiA7OwogICAgICAgIGk2ODYpICAgQVJDSD0iMzg2IiA7OwogICAgICAgIHg4Nl82NCkgQVJDSD0iYW1kNjQiIDs7CiAgICAgICAgYXJtKSAgICBkcGtnIC0tcHJpbnQtYXJjaGl0ZWN0dXJlIHwgZ3JlcCAtcSAiYXJtNjQiICYmIEFSQ0g9ImFybTY0IiB8fCBBUkNIPSJhcm0iIDs7CiAgICBlc2FjCiAgICBlY2hvIFwKICAgICAgImRlYiBbYXJjaD0ke0FSQ0h9XSBodHRwczovL3BhY2thZ2VjbG91ZC5pby9BdG9tRWRpdG9yL2F0b20vYW55LyBhbnkgbWFpbiIgXAogICAgICB8IHN1ZG8gdGVlIC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL2F0b20ubGlzdAogIGZpOwp9CmZ1bmN0aW9uIHVwZGF0ZVBhY2thZ2VzKCkgewogIHN1ZG8gcGFjbWFuIHVwZGF0ZSA+IC9kZXYvbnVsbAp9CkFUT01fVkVSU0lPTj0iIgpmdW5jdGlvbiBnZXRBdG9tVmVyc2lvbigpIHsKICBBVE9NX1ZFUlNJT049IiQocGFjbWFuIC1TaSBhdG9tIHwgZ3JlcCBWZXJzaW9uOiB8IGhlYWQgLW4gMSB8IGN1dCAtZCAnICcgLWYyKSIKfQpmdW5jdGlvbiBpbnN0YWxsQXRvbSgpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiJXNcbiIgIiRfTVNHX0NIRUNLSU5HX0FUT00iCiAgaWYgWyAiJChjb21tYW5kIC12IHBhY21hbikiID0gIiIgXTsgdGhlbgogICAgaWYgWyAteiAiJF9TQ1JJUFRfRklMRU5BTUUiIF07IHRoZW4KICAgICAgZmlsZXBhdGg9InNyYy91bml4L18vZG93bmxvYWQvcGFjYXB0L21haW4uc2giCiAgICAgIGJhc2ggIiRmaWxlcGF0aCIgPiAvZGV2L251bGwKICAgIGVsc2UKICAgICAgdXJsPSJodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vZG93bmxvYWQvcGFjYXB0LyRfU0NSSVBUX0ZJTEVOQU1FIgogICAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogICAgZmk7CiAgZmk7CiAgSU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFUz0oCiAgICAid2dldCIKICAgICJqcSIKICAgICJnbnVwZzIiCiAgKQogIGZvciBERVAgaW4gIiR7SU5TVEFMTEFUSU9OX0RFUEVOREVOQ0lFU1tAXX0iOyBkbwogICAgaWYgW1sgIiQoc3VkbyBwYWNtYW4gLVFpICIkREVQIiAyPiAvZGV2L251bGwgfCBncmVwIFN0YXR1cykiICE9ICJTdGF0dXM6IGluc3RhbGwgb2sgaW5zdGFsbGVkIiBdXTsgdGhlbgogICAgICBzdWRvIHBhY21hbiAtUyAtLSAteSAiJERFUCIgPiAvZGV2L251bGwgfHwgZXhpdCAkPwogICAgZmk7CiAgZG9uZTsKICBwcmludEluZGVudAogIHByaW50ZiAiICAlcy4uLiIgIiRfTVNHX0FERElOR19SRVBPIgogIHNpZ25BdG9tR3BnS2V5CiAgYWRkQXRvbVJlcG9zaXRvcnlUb1NvdXJjZXMKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICBwcmludEluZGVudAogIHByaW50ZiAiICAlcyIgIiRfTVNHX1VQREFUSU5HX1BBQ0tBR0VTIgogIHVwZGF0ZVBhY2thZ2VzCiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZ2V0QXRvbVZlcnNpb24KICBpZiBbICIkQVRPTV9WRVJTSU9OIiAhPSAiIiBdOyB0aGVuCiAgICBwcmludEluZGVudAogICAgcHJpbnRmICIgICVzICh2JXMpIiAiJF9NU0dfQVRPTV9GT1VORCIgIiRBVE9NX1ZFUlNJT04iCiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICBmaTsKICBwcmludEluZGVudAogIHByaW50ZiAiICAlcyIgIiRfTVNHX1JVTk5JTkdfSU5TVEFMTEFUSU9OX1NDUklQVCIKICBJTlNUQUxMX0FUT01fU1RERVJSPSIkKHN1ZG8gcGFjbWFuIC1TIC0tIC15IGF0b20gPiAvZGV2L251bGwpIgogIElOU1RBTExfQVRPTV9FWElUX0NPREU9JD8KICBpZiBbICIkSU5TVEFMTF9BVE9NX0VYSVRfQ09ERSIgLW5lIDAgXTsgdGhlbgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgcHJpbnRmICJcbiVzIiAiJF9NU0dfRVJST1JfSU5TVEFMTElOR19BVE9NIiA+JjIKICAgIGlmIFsgIiRBVE9NX1ZFUlNJT04iICE9ICIiIF07IHRoZW4KICAgICAgcHJpbnRmICIgKHYlcykiICIkQVRPTV9WRVJTSU9OIiA+JjIKICAgIGZpOwogICAgcHJpbnRmICI6XG4lc1xuIiAiJElOU1RBTExfQVRPTV9TVERFUlIiID4mMgogICAgZXhpdCAkSU5TVEFMTF9BVE9NX0VYSVRfQ09ERQogIGZpOwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9CmZ1bmN0aW9uIHByaW50QXRvbUluc3RhbGxlZE1zZygpIHsKICBwcmludEluZGVudAogIEFUT01fVkVSU0lPTj0kKAogICAgYXBtIC12IHwgXAogICAgc2VkIC1uIDRwIHwgXAogICAgY3V0IC1kJyAnIC1mMiB8IFwKICAgIHNlZCAtciAicy9ceDFCXFsoWzAtOV17MSwyfSg7WzAtOV17MSwyfSk/KT9bbUdLXS8vZyIpCiAgcHJpbnRmICJBdG9tIHYlcyAlcyIgIiRBVE9NX1ZFUlNJT04iICIkX01TR19BTFJFQURZX0lOU1RBTExFRCIKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpmdW5jdGlvbiBtYWluKCkgewogIEFUT01fQklOQVJZX1BBVEg9IiQoY29tbWFuZCAtdiBhdG9tKSIKICBpZiBbICIkQVRPTV9CSU5BUllfUEFUSCIgIT0gIiIgXTsgdGhlbgogICAgcHJpbnRBdG9tSW5zdGFsbGVkTXNnCiAgZWxzZQogICAgaW5zdGFsbEF0b20KICBmaTsKfQpmdW5jdGlvbiBleHBvcnRWYXJpYWJsZXMoKSB7CiAgc2lnbkF0b21HcGdLZXkKICBhZGRBdG9tUmVwb3NpdG9yeVRvU291cmNlcwogIHVwZGF0ZVBhY2thZ2VzCiAgZ2V0QXRvbVZlcnNpb24KICBleHBvcnQgQVRPTV9WRVJTSU9OCn0KaWYgKHJldHVybiAwIDI+L2Rldi9udWxsKTsgdGhlbgogIGV4cG9ydFZhcmlhYmxlcwplbHNlCiAgaWYgW1sgJCgvdXNyL2Jpbi9pZCAtdSkgLW5lIDAgXV07IHRoZW4KICAgIHByaW50ZiAiJXNcbiIgIiRfTVNHX0VYRUNVVEVEX0FTX1NVUEVSVVNFUiIgPiYyCiAgICBleGl0IDEKICBmaTsKICBtYWluCmZpOwo='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
