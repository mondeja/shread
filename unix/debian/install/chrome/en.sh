#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQ0hFQ0tJTkdfRUNPU1lTVEVNPSJDaGVja2luZyBDaHJvbWUgZWNvc3lzdGVtLi4uIgpfTVNHX1VOQUJMRV9UT19JTlNUQUxMXzMyX0JJVFM9IklzIG5vdCBwb3NzaWJsZSB0byBpbnN0YWxsIEdvb2dsZSBDaHJvbWUgb24gMzIgYml0cyBzeXN0ZW1zLiIKX01TR19JTlNUQUxMSU5HX0dPT0dMRV9DSFJPTUU9Ikluc3RhbGxpbmcgR29vZ2xlIENocm9tZS4uLiIKX01TR19GT1VORF9DSFJPTUVfSU5TVEFMTEVEPSJHb29nbGUgQ2hyb21lIGZvdW5kIGluc3RhbGxlZCIKX01TR19JTlNUQUxMSU5HX0NIUk9NRURSSVZFUj0iSW5zdGFsbGluZyBjaHJvbWVkcml2ZXIiCl9NU0dfVVBEQVRJTkdfQ0hST01FRFJJVkVSPSJVcGRhdGluZyBjaHJvbWVkcml2ZXIiCl9NU0dfRk9VTkRfQ0hST01FRFJJVkVSX0lOU1RBTExFRD0iQ2hyb21lZHJpdmVyIGZvdW5kIGluc3RhbGxlZCIKSU5ERU5UX1NUUklORz0iIgpTRVRYPTAKX0NIUk9NRURSSVZFUl9QQVRIPSIvdXNyL2Jpbi9jaHJvbWVkcml2ZXIiCl9ET1dOTE9BRF9DSFJPTUVEUklWRVI9MQpmdW5jdGlvbiB1c2FnZSB7CiAgICBjYXQgPDxIRUxQX1VTQUdFClVzYWdlOiB1bml4L2RlYmlhbi9pbnN0YWxsL2Nocm9tZS8kX1NDUklQVF9GSUxFTkFNRSBbLWhdIFstaSBTVFJJTkddIFstZCBDSFJPTUVEUklWRVJfUEFUSF0KCiAgSW5zdGFsbHMgYW5kIHVwZ3JhZGUgQ2hyb21lIGFuZCBDaHJvbWVkcml2ZXIgcmV0cmlldmluZyBiaW5hcmllcyBmcm9tIG9maWNpYWwgc291cmNlcy4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC0tc2V0LXggICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRzIHRoZSAteCBvcHRpb24gaW4gQmFzaCB0byBwcmludCBvdXQgdGhlIHN0YXRlbWVudHMgYXMgdGhleSBhcmUgYmVpbmcgZXhlY3V0ZWQuIFVzZWZ1bCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgogIC1kIENIUk9NRURSSVZFUl9QQVRILCAtLWNocm9tZWRyaXZlci1wYXRoIENIUk9NRURSSVZFUl9QQVRICiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwZWNpZmllcyB3aGVyZSBiZSBzdG9yZWQgdGhlIGRvd25sb2FkZWQgJ2Nocm9tZWRyaXZlcicgYmluYXJ5LiBBcyBkZWZhdWx0IGF0ICckX0NIUk9NRURSSVZFUl9QQVRIJy4KICAtbiwgLS1uby1jaHJvbWVkcml2ZXIgICAgICAgICAgICAgSWYgcGFzc2VkLCBkb2VzIG5vdCBkb3dubG9hZCBub3IgdXBkYXRlcyBjaHJvbWVkcml2ZXIuCgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIElOREVOVF9TVFJJTkc9IiQyIgogICAgc2hpZnQgMgogICAgOzsKICAgIC1ofC0taGVscCkKICAgIHNoaWZ0CiAgICB1c2FnZQogICAgOzsgICAgLS1zZXQteCkKICAgIFNFVFg9MQogICAgc2hpZnQKICAgIDs7ICAgIAogICAgLWR8LS1jaHJvbWVkcml2ZXItcGF0aCkKICAgIHNoaWZ0CiAgICBfQ0hST01FRFJJVkVSX1BBVEg9IiQxIgogICAgc2hpZnQKICAgIDs7CiAgICAtbnwtLW5vLWNocm9tZWRyaXZlcikKICAgIF9ET1dOTE9BRF9DSFJPTUVEUklWRVI9MAogICAgc2hpZnQKICAgIDs7CiAgZXNhYwpkb25lCmZ1bmN0aW9uIHByaW50SW5kZW50KCkgewogIHByaW50ZiAiJXMiICIkSU5ERU5UX1NUUklORyIKfQppZiBbICIkU0VUWCIgLWVxIDEgXTsgdGhlbiBzZXQgLXg7IGZpCmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxTY3JpcHREZXBlbmRlbmNpZXMoKSB7CiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCn0KX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEg9IiIKZnVuY3Rpb24gZ2V0R29vZ2xlQ2hyb21lQmluYXJ5UGF0aCgpIHsKICBfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSD0iJChjb21tYW5kIC12IGdvb2dsZS1jaHJvbWUpIgogIGlmIFsgIiRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCIgPSAiIiBdOyB0aGVuCiAgICBfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSD0iJChjb21tYW5kIC12IGdvb2dsZS1jaHJvbWUtc3RhYmxlKSIKICBmaTsKfQpmdW5jdGlvbiBjaGVja1N5c3RlbUFyY2goKSB7CiAgaWYgW1sgIiQodW5hbWUgLW0pIiAhPSAieDg2XzY0IiBdXTsgdGhlbgogICAgcHJpbnRJbmRlbnQgPiYyCiAgICBwcmludGYgIiAgJXMiICIkX01TR19VTkFCTEVfVE9fSU5TVEFMTF8zMl9CSVRTIiA+JjIKICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgIGV4aXQgMQogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxHb29nbGVDaHJvbWUoKSB7CiAgcHJpbnRmICIgICVzIiAiJF9NU0dfSU5TVEFMTElOR19HT09HTEVfQ0hST01FIgogIGN1cmwgLXNMIGh0dHBzOi8vZGwuZ29vZ2xlLmNvbS9saW51eC9kaXJlY3QvZ29vZ2xlLWNocm9tZS1zdGFibGVfY3VycmVudF9hbWQ2NC5kZWIgICAgIC0tb3V0cHV0IC90bXAvZ29vZ2xlLWNocm9tZS1zdGFibGVfY3VycmVudF9hbWQ2NC5kZWIKICBzdWRvIHBhY21hbiAtUyAtLSAteSAvdG1wL2dvb2dsZS1jaHJvbWUtc3RhYmxlX2N1cnJlbnRfYW1kNjQuZGViID4gL2Rldi9udWxsCiAgc3VkbyBybSAtZiAvdG1wL2dvb2dsZS1jaHJvbWUtc3RhYmxlX2N1cnJlbnRfYW1kNjQuZGViCiAgZ2V0R29vZ2xlQ2hyb21lQmluYXJ5UGF0aAogIHByaW50ZiAiICh2JXMpIiAiJCgkX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEggLS12ZXJzaW9uIHwgY3V0IC1kJyAnIC1mMykiCiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCn0KQ0hST01FRFJJVkVSX1ZFUlNJT049IiIKZnVuY3Rpb24gZ2V0TGF0ZXN0Q2hyb21lZHJpdmVyVmVyc2lvbigpIHsKICBHT09HTEVfQ0hST01FX01BSk9SX1ZFUlNJT049IiQoIiRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCIgLS12ZXJzaW9uIHwgY3V0IC1kJyAnIC1mMyB8IGN1dCAtZCcuJyAtZjEpIgogIGN1cmwgLXNMIGh0dHBzOi8vY2hyb21lZHJpdmVyLnN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vICAgICAtLW91dHB1dCAvdG1wL2Nocm9tZWRyaXZlci12ZXJzaW9ucy54bWwKICBDSFJPTUVEUklWRVJfVkVSU0lPTj0kKGdyZXAgLVBvICI8S2V5PiRHT09HTEVfQ0hST01FX01BSk9SX1ZFUlNJT05cLipcZCpcLipcZCtcLipcZCpcL2Nocm9tZWRyaXZlcl9saW51eDY0XC56aXAiIC90bXAvY2hyb21lZHJpdmVyLXZlcnNpb25zLnhtbCB8CiAgICAgIGdyZXAgLVBvICIkR09PR0xFX0NIUk9NRV9NQUpPUl9WRVJTSU9OXC4qXGQqXC4qXGQrXC4qXGQqIiB8ICAgICAgIGhlYWQgLW4gMSkKICBzdWRvIHJtIC1mIC90bXAvY2hyb21lZHJpdmVyLXZlcnNpb25zLnhtbAp9Cl9DSFJPTUVEUklWRVJfQklOQVJZX1BBVEg9IiIKZnVuY3Rpb24gZ2V0Q2hyb21lZHJpdmVyQmluYXJ5UGF0aCgpIHsKICBfQ0hST01FRFJJVkVSX0JJTkFSWV9QQVRIPSIkKGNvbW1hbmQgLXYgY2hyb21lZHJpdmVyKSIKfQpmdW5jdGlvbiBpbnN0YWxsQ2hyb21lRHJpdmVyKCkgewogIGN1cmwgLXNMICAgICAiaHR0cHM6Ly9jaHJvbWVkcml2ZXIuc3RvcmFnZS5nb29nbGVhcGlzLmNvbS8kQ0hST01FRFJJVkVSX1ZFUlNJT04vY2hyb21lZHJpdmVyX2xpbnV4NjQuemlwIiAgICAgLS1vdXRwdXQgImNocm9tZWRyaXZlcl9saW51eDY0LnppcCIKICB1bnppcCAtcSBjaHJvbWVkcml2ZXJfbGludXg2NC56aXAKICBzdWRvIHJtIC1mIGNocm9tZWRyaXZlcl9saW51eDY0LnppcAogIHN1ZG8gcm0gLWYgIl9DSFJPTUVEUklWRVJfUEFUSCIKICBzdWRvIG12IC1mIGNocm9tZWRyaXZlciAiX0NIUk9NRURSSVZFUl9QQVRIIgp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiVzXG4iICIkX01TR19DSEVDS0lOR19FQ09TWVNURU0iCiAgZ2V0R29vZ2xlQ2hyb21lQmluYXJ5UGF0aAogIGlmIFsgIiRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCIgPSAiIiBdOyB0aGVuCiAgICBjaGVja1N5c3RlbUFyY2gKICAgIGluc3RhbGxHb29nbGVDaHJvbWUKICBlbHNlCiAgICBwcmludGYgIiAgJXMiICIkX01TR19GT1VORF9DSFJPTUVfSU5TVEFMTEVEIgogICAgcHJpbnRmICIgKHYlcykiICIkKCRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCAtLXZlcnNpb24gfCBjdXQgLWQnICcgLWYzKSIKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGZpOwogIGlmIFsgIiRfRE9XTkxPQURfQ0hST01FRFJJVkVSIiAtZXEgMSBdOyB0aGVuCiAgICBnZXRMYXRlc3RDaHJvbWVkcml2ZXJWZXJzaW9uCiAgICBnZXRDaHJvbWVkcml2ZXJCaW5hcnlQYXRoCiAgICBwcmludEluZGVudAogICAgaWYgWyAiJF9DSFJPTUVEUklWRVJfQklOQVJZX1BBVEgiID0gIiIgXTsgdGhlbgogICAgICBwcmludGYgIiAgJXMgKHYlcykuLi4iICIkX01TR19JTlNUQUxMSU5HX0NIUk9NRURSSVZFUiIgIiRDSFJPTUVEUklWRVJfVkVSU0lPTiIKICAgICAgaW5zdGFsbENocm9tZURyaXZlcgogICAgZWxzZQogICAgICBfQ0hST01FRFJJVkVSX0lOU1RBTExFRF9WRVJTSU9OPSIkKCIkX0NIUk9NRURSSVZFUl9CSU5BUllfUEFUSCIgLS12ZXJzaW9uIHwgY3V0IC1kJyAnIC1mMikiCiAgICAgIGlmIFsgIiRfQ0hST01FRFJJVkVSX0lOU1RBTExFRF9WRVJTSU9OIiAhPSAiJENIUk9NRURSSVZFUl9WRVJTSU9OIiBdOyB0aGVuCiAgICAgICAgcHJpbnRmICIgICVzICh2JXMiICIkX01TR19VUERBVElOR19DSFJPTUVEUklWRVIiICIkX0NIUk9NRURSSVZFUl9JTlNUQUxMRURfVkVSU0lPTiIKICAgICAgICBwcmludGYgIiAtPiB2JXMpLi4uIiAiJENIUk9NRURSSVZFUl9WRVJTSU9OIgogICAgICAgIGluc3RhbGxDaHJvbWVEcml2ZXIKICAgICAgZWxzZQogICAgICAgIHByaW50ZiAiICAlcyAodiVzKSIgIiRfTVNHX0ZPVU5EX0NIUk9NRURSSVZFUl9JTlNUQUxMRUQiICIkX0NIUk9NRURSSVZFUl9JTlNUQUxMRURfVkVSU0lPTiIKICAgICAgZmkKICAgIGZpOwogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZmk7Cn0KaWYgKHJldHVybiAwIDI+L2Rldi9udWxsKTsgdGhlbgogIGV4cG9ydFZhcmlhYmxlcwplbHNlCiAgbWFpbgpmaTsKaWYgWyAiJFNFVFgiIC1lcSAxIF07IHRoZW4gc2V0ICt4OyBmaQ=='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
