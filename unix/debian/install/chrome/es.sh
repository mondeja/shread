#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQ0hFQ0tJTkdfRUNPU1lTVEVNPSJDb21wcm9iYW5kbyBlY29zaXN0ZW1hIENocm9tZS4uLiIKX01TR19VTkFCTEVfVE9fSU5TVEFMTF8zMl9CSVRTPSJObyBlcyBwb3NpYmxlIGluc3RhbGFyIEdvb2dsZSBDaHJvbWUgZW4gc2lzdGVtYXMgZGUgMzIgYml0cy4iCl9NU0dfSU5TVEFMTElOR19HT09HTEVfQ0hST01FPSJJbnN0YWxhbmRvIEdvb2dsZSBDaHJvbWUuLi4iCl9NU0dfRk9VTkRfQ0hST01FX0lOU1RBTExFRD0iRW5jb250cmFkbyBHb29nbGUgQ2hyb21lIGluc3RhbGFkbyIKX01TR19JTlNUQUxMSU5HX0NIUk9NRURSSVZFUj0iSW5zdGFsYW5kbyBjaHJvbWVkcml2ZXIiCl9NU0dfVVBEQVRJTkdfQ0hST01FRFJJVkVSPSJBY3R1YWxpemFuZG8gY2hyb21lZHJpdmVyIgpfTVNHX0ZPVU5EX0NIUk9NRURSSVZFUl9JTlNUQUxMRUQ9IkVuY29udHJhZG8gY2hyb21lZHJpdmVyIGluc3RhbGFkbyIKSU5ERU5UX1NUUklORz0iIgpfQ0hST01FRFJJVkVSX1BBVEg9Ii91c3IvYmluL2Nocm9tZWRyaXZlciIKX0RPV05MT0FEX0NIUk9NRURSSVZFUj0xCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvY2hyb21lLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gWy1kIENIUk9NRURSSVZFUl9QQVRIXQoKICBJbnN0YWxscyBhbmQgdXBncmFkZSBDaHJvbWUgYW5kIENocm9tZWRyaXZlciByZXRyaWV2aW5nIGJpbmFyaWVzIGZyb20gb2ZpY2lhbCBzb3VyY2VzLgoKT3B0aW9uczoKICAtaCwgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4KICAtaSBTVFJJTkcsIC0taW5kZW50IFNUUklORyAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBzY3JpcHQgb3V0cHV0IHdpbGwgYmUgcHJlY2VkZWQgd2l0aCB0aGUgc3RyaW5nIGRlZmluZWQgaW4gdGhpcyBwYXJhbWV0ZXIuCiAgLWQgQ0hST01FRFJJVkVSX1BBVEgsIC0tY2hyb21lZHJpdmVyLXBhdGggQ0hST01FRFJJVkVSX1BBVEgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3BlY2lmaWVzIHdoZXJlIGJlIHN0b3JlZCBkb3dubG9hZGVkIGNocm9tZWRyaXZlciBiaW5hcnkuIEFzIGRlZmF1bHQgYXQgJyRfQ0hST01FRFJJVkVSX1BBVEgnLgogIC1uLCAtLW5vLWNocm9tZWRyaXZlciAgICAgICAgICAgICBJZiBwYXNzZWQsIGRvZXMgbm90IGRvd25sb2FkIG5vciB1cGRhdGVzIGNocm9tZWRyaXZlci4KCkhFTFBfVVNBR0UKICAgIGV4aXQgMQp9CmZvciBhcmcgaW4gIiRAIjsgZG8KICBjYXNlICRhcmcgaW4KICAgIC1pfC0taW5kZW50KQogICAgc2hpZnQKICAgIElOREVOVF9TVFJJTkc9IiQxIgogICAgc2hpZnQKICAgIDs7CiAgICAtaHwtLWhlbHApCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7ICAgIAogICAgLWR8LS1jaHJvbWVkcml2ZXItcGF0aCkKICAgIHNoaWZ0CiAgICBfQ0hST01FRFJJVkVSX1BBVEg9IiQxIgogICAgc2hpZnQKICAgIDs7CiAgICAtbnwtLW5vLWNocm9tZWRyaXZlcikKICAgIF9ET1dOTE9BRF9DSFJPTUVEUklWRVI9MAogICAgc2hpZnQKICAgIDs7CiAgICAqKQogICAgc2hpZnQKICAgIHVzYWdlCiAgICA7OwogIGVzYWMKZG9uZQpmdW5jdGlvbiBwcmludEluZGVudCgpIHsKICBwcmludGYgIiVzIiAiJElOREVOVF9TVFJJTkciCn0KZnVuY3Rpb24gaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkKCkgewogIGlmIFsgIiQoY29tbWFuZCAtdiBwYWNtYW4pIiA9ICIiIF07IHRoZW4KICAgIHVybD0iaHR0cHM6Ly9tb25kZWphLmdpdGh1Yi5pby9zaHJlYWQvdW5peC9fL2Rvd25sb2FkL3BhY2FwdC8kX1NDUklQVF9GSUxFTkFNRSIKICAgIGN1cmwgLXNMICIkdXJsIiB8IHN1ZG8gYmFzaCAtID4gL2Rldi9udWxsCiAgZmk7Cn0KZnVuY3Rpb24gaW5zdGFsbFNjcmlwdERlcGVuZGVuY2llcygpIHsKICBpbnN0YWxsUGFjbWFuSWZOb3RJbnN0YWxsZWQKfQpfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSD0iIgpmdW5jdGlvbiBnZXRHb29nbGVDaHJvbWVCaW5hcnlQYXRoKCkgewogIF9HT09HTEVfQ0hST01FX0JJTkFSWV9QQVRIPSIkKGNvbW1hbmQgLXYgZ29vZ2xlLWNocm9tZSkiCiAgaWYgWyAiJF9HT09HTEVfQ0hST01FX0JJTkFSWV9QQVRIIiA9ICIiIF07IHRoZW4KICAgIF9HT09HTEVfQ0hST01FX0JJTkFSWV9QQVRIPSIkKGNvbW1hbmQgLXYgZ29vZ2xlLWNocm9tZS1zdGFibGUpIgogIGZpOwp9CmZ1bmN0aW9uIGNoZWNrU3lzdGVtQXJjaCgpIHsKICBpZiBbWyAiJCh1bmFtZSAtbSkiICE9ICJ4ODZfNjQiIF1dOyB0aGVuCiAgICBwcmludEluZGVudCA+JjIKICAgIHByaW50ZiAiICAlcyIgIiRfTVNHX1VOQUJMRV9UT19JTlNUQUxMXzMyX0JJVFMiID4mMgogICAgcHJpbnRmICIgXGVbOTFtXHhFMlx4OUNceDk1XGVbMzltXG4iID4mMgogICAgZXhpdCAxCiAgZmk7Cn0KZnVuY3Rpb24gaW5zdGFsbEdvb2dsZUNocm9tZSgpIHsKICBwcmludGYgIiAgJXMiICIkX01TR19JTlNUQUxMSU5HX0dPT0dMRV9DSFJPTUUiCiAgY3VybCAtc0wgaHR0cHM6Ly9kbC5nb29nbGUuY29tL2xpbnV4L2RpcmVjdC9nb29nbGUtY2hyb21lLXN0YWJsZV9jdXJyZW50X2FtZDY0LmRlYiAgICAgLS1vdXRwdXQgL3RtcC9nb29nbGUtY2hyb21lLXN0YWJsZV9jdXJyZW50X2FtZDY0LmRlYgogIHN1ZG8gcGFjbWFuIC1TIC0tIC15IC90bXAvZ29vZ2xlLWNocm9tZS1zdGFibGVfY3VycmVudF9hbWQ2NC5kZWIgPiAvZGV2L251bGwKICBzdWRvIHJtIC1mIC90bXAvZ29vZ2xlLWNocm9tZS1zdGFibGVfY3VycmVudF9hbWQ2NC5kZWIKICBnZXRHb29nbGVDaHJvbWVCaW5hcnlQYXRoCiAgcHJpbnRmICIgKHYlcykiICIkKCRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCAtLXZlcnNpb24gfCBjdXQgLWQnICcgLWYzKSIKICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKfQpDSFJPTUVEUklWRVJfVkVSU0lPTj0iIgpmdW5jdGlvbiBnZXRMYXRlc3RDaHJvbWVkcml2ZXJWZXJzaW9uKCkgewogIEdPT0dMRV9DSFJPTUVfTUFKT1JfVkVSU0lPTj0iJCgiJF9HT09HTEVfQ0hST01FX0JJTkFSWV9QQVRIIiAtLXZlcnNpb24gfCBjdXQgLWQnICcgLWYzIHwgY3V0IC1kJy4nIC1mMSkiCiAgY3VybCAtc0wgaHR0cHM6Ly9jaHJvbWVkcml2ZXIuc3RvcmFnZS5nb29nbGVhcGlzLmNvbS8gICAgIC0tb3V0cHV0IC90bXAvY2hyb21lZHJpdmVyLXZlcnNpb25zLnhtbAogIENIUk9NRURSSVZFUl9WRVJTSU9OPSQoZ3JlcCAtUG8gIjxLZXk+JEdPT0dMRV9DSFJPTUVfTUFKT1JfVkVSU0lPTlwuKlxkKlwuKlxkK1wuKlxkKlwvY2hyb21lZHJpdmVyX2xpbnV4NjRcLnppcCIgL3RtcC9jaHJvbWVkcml2ZXItdmVyc2lvbnMueG1sIHwKICAgICAgZ3JlcCAtUG8gIiRHT09HTEVfQ0hST01FX01BSk9SX1ZFUlNJT05cLipcZCpcLipcZCtcLipcZCoiIHwgICAgICAgaGVhZCAtbiAxKQogIHN1ZG8gcm0gLWYgL3RtcC9jaHJvbWVkcml2ZXItdmVyc2lvbnMueG1sCn0KX0NIUk9NRURSSVZFUl9CSU5BUllfUEFUSD0iIgpmdW5jdGlvbiBnZXRDaHJvbWVkcml2ZXJCaW5hcnlQYXRoKCkgewogIF9DSFJPTUVEUklWRVJfQklOQVJZX1BBVEg9IiQoY29tbWFuZCAtdiBjaHJvbWVkcml2ZXIpIgp9CmZ1bmN0aW9uIGluc3RhbGxDaHJvbWVEcml2ZXIoKSB7CiAgY3VybCAtc0wgICAgICJodHRwczovL2Nocm9tZWRyaXZlci5zdG9yYWdlLmdvb2dsZWFwaXMuY29tLyRDSFJPTUVEUklWRVJfVkVSU0lPTi9jaHJvbWVkcml2ZXJfbGludXg2NC56aXAiICAgICAtLW91dHB1dCAiY2hyb21lZHJpdmVyX2xpbnV4NjQuemlwIgogIHVuemlwIC1xIGNocm9tZWRyaXZlcl9saW51eDY0LnppcAogIHN1ZG8gcm0gLWYgY2hyb21lZHJpdmVyX2xpbnV4NjQuemlwCiAgc3VkbyBybSAtZiAiX0NIUk9NRURSSVZFUl9QQVRIIgogIHN1ZG8gbXYgLWYgY2hyb21lZHJpdmVyICJfQ0hST01FRFJJVkVSX1BBVEgiCn0KZnVuY3Rpb24gbWFpbigpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiJXNcbiIgIiRfTVNHX0NIRUNLSU5HX0VDT1NZU1RFTSIKICBnZXRHb29nbGVDaHJvbWVCaW5hcnlQYXRoCiAgaWYgWyAiJF9HT09HTEVfQ0hST01FX0JJTkFSWV9QQVRIIiA9ICIiIF07IHRoZW4KICAgIGNoZWNrU3lzdGVtQXJjaAogICAgaW5zdGFsbEdvb2dsZUNocm9tZQogIGVsc2UKICAgIHByaW50ZiAiICAlcyIgIiRfTVNHX0ZPVU5EX0NIUk9NRV9JTlNUQUxMRUQiCiAgICBwcmludGYgIiAodiVzKSIgIiQoJF9HT09HTEVfQ0hST01FX0JJTkFSWV9QQVRIIC0tdmVyc2lvbiB8IGN1dCAtZCcgJyAtZjMpIgogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZmk7CiAgaWYgWyAiJF9ET1dOTE9BRF9DSFJPTUVEUklWRVIiIC1lcSAxIF07IHRoZW4KICAgIGdldExhdGVzdENocm9tZWRyaXZlclZlcnNpb24KICAgIGdldENocm9tZWRyaXZlckJpbmFyeVBhdGgKICAgIHByaW50SW5kZW50CiAgICBpZiBbICIkX0NIUk9NRURSSVZFUl9CSU5BUllfUEFUSCIgPSAiIiBdOyB0aGVuCiAgICAgIHByaW50ZiAiICAlcyAodiVzKS4uLiIgIiRfTVNHX0lOU1RBTExJTkdfQ0hST01FRFJJVkVSIiAiJENIUk9NRURSSVZFUl9WRVJTSU9OIgogICAgICBpbnN0YWxsQ2hyb21lRHJpdmVyCiAgICBlbHNlCiAgICAgIF9DSFJPTUVEUklWRVJfSU5TVEFMTEVEX1ZFUlNJT049IiQoIiRfQ0hST01FRFJJVkVSX0JJTkFSWV9QQVRIIiAtLXZlcnNpb24gfCBjdXQgLWQnICcgLWYyKSIKICAgICAgaWYgWyAiJF9DSFJPTUVEUklWRVJfSU5TVEFMTEVEX1ZFUlNJT04iICE9ICIkQ0hST01FRFJJVkVSX1ZFUlNJT04iIF07IHRoZW4KICAgICAgICBwcmludGYgIiAgJXMgKHYlcyIgIiRfTVNHX1VQREFUSU5HX0NIUk9NRURSSVZFUiIgIiRfQ0hST01FRFJJVkVSX0lOU1RBTExFRF9WRVJTSU9OIgogICAgICAgIHByaW50ZiAiIC0+IHYlcykuLi4iICIkQ0hST01FRFJJVkVSX1ZFUlNJT04iCiAgICAgICAgaW5zdGFsbENocm9tZURyaXZlcgogICAgICBlbHNlCiAgICAgICAgcHJpbnRmICIgICVzICh2JXMpIiAiJF9NU0dfRk9VTkRfQ0hST01FRFJJVkVSX0lOU1RBTExFRCIgIiRfQ0hST01FRFJJVkVSX0lOU1RBTExFRF9WRVJTSU9OIgogICAgICBmaQogICAgZmk7CiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICBmaTsKfQppZiAocmV0dXJuIDAgMj4vZGV2L251bGwpOyB0aGVuCiAgZXhwb3J0VmFyaWFibGVzCmVsc2UKICBtYWluCmZpOw=='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
