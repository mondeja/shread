#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQ0hFQ0tJTkdfRUNPU1lTVEVNPSIiCl9NU0dfVU5BQkxFX1RPX0lOU1RBTExfMzJfQklUUz0iIgpfTVNHX0lOU1RBTExJTkdfR09PR0xFX0NIUk9NRT0iIgpfTVNHX0ZPVU5EX0NIUk9NRV9JTlNUQUxMRUQ9IiIKX01TR19JTlNUQUxMSU5HX0NIUk9NRURSSVZFUj0iIgpfTVNHX1VQREFUSU5HX0NIUk9NRURSSVZFUj0iIgpfTVNHX0ZPVU5EX0NIUk9NRURSSVZFUl9JTlNUQUxMRUQ9IiIKSU5ERU5UX1NUUklORz0iIgpfQ0hST01FRFJJVkVSX1BBVEg9Ii91c3IvYmluL2Nocm9tZWRyaXZlciIKX0RPV05MT0FEX0NIUk9NRURSSVZFUj0xCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvY2hyb21lLyRfU0NSSVBUX0ZJTEVOQU1FIFstaF0gWy1pIFNUUklOR10gWy1kIENIUk9NRURSSVZFUl9QQVRIXQoKICAgSW5zdGFsbHMgYW5kIHVwZ3JhZGUgQ2hyb21lIGFuZCBDaHJvbWVkcml2ZXIgcmV0cmlldmluZyBiaW5hcmllcyBmcm9tIG9maWNpYWwgc291cmNlcy4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC1kIENIUk9NRURSSVZFUl9QQVRILCAtLWNocm9tZWRyaXZlci1wYXRoIENIUk9NRURSSVZFUl9QQVRICiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwZWNpZmllcyB3aGVyZSBiZSBzdG9yZWQgZG93bmxvYWRlZCBjaHJvbWVkcml2ZXIgYmluYXJ5LiBBcyBkZWZhdWx0IGF0ICckX0NIUk9NRURSSVZFUl9QQVRIJy4KICAtbiwgLS1uby1jaHJvbWVkcml2ZXIgICAgICAgICAgICAgSWYgcGFzc2VkLCBkb2VzIG5vdCBkb3dubG9hZCBub3IgdXBkYXRlcyBjaHJvbWVkcml2ZXIuCgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIElOREVOVF9TVFJJTkc9IiQyIgogICAgc2hpZnQgMgogICAgOzsKICAgIC1ofC0taGVscCkKICAgIHNoaWZ0CiAgICB1c2FnZQogICAgOzsgICAgCiAgICAtZHwtLWNocm9tZWRyaXZlci1wYXRoKQogICAgc2hpZnQKICAgIF9DSFJPTUVEUklWRVJfUEFUSD0iJDEiCiAgICBzaGlmdAogICAgOzsKICAgIC1ufC0tbm8tY2hyb21lZHJpdmVyKQogICAgX0RPV05MT0FEX0NIUk9NRURSSVZFUj0wCiAgICBzaGlmdAogICAgOzsKICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxTY3JpcHREZXBlbmRlbmNpZXMoKSB7CiAgaW5zdGFsbFBhY21hbklmTm90SW5zdGFsbGVkCn0KX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEg9IiIKZnVuY3Rpb24gZ2V0R29vZ2xlQ2hyb21lQmluYXJ5UGF0aCgpIHsKICBfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSD0iJChjb21tYW5kIC12IGdvb2dsZS1jaHJvbWUpIgogIGlmIFsgIiRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCIgPSAiIiBdOyB0aGVuCiAgICBfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSD0iJChjb21tYW5kIC12IGdvb2dsZS1jaHJvbWUtc3RhYmxlKSIKICBmaTsKfQpmdW5jdGlvbiBjaGVja1N5c3RlbUFyY2goKSB7CiAgaWYgW1sgIiQodW5hbWUgLW0pIiAhPSAieDg2XzY0IiBdXTsgdGhlbgogICAgcHJpbnRJbmRlbnQgPiYyCiAgICBwcmludGYgIiAgJXMiICIkX01TR19VTkFCTEVfVE9fSU5TVEFMTF8zMl9CSVRTIiA+JjIKICAgIHByaW50ZiAiIFxlWzkxbVx4RTJceDlDXHg5NVxlWzM5bVxuIiA+JjIKICAgIGV4aXQgMQogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxHb29nbGVDaHJvbWUoKSB7CiAgcHJpbnRmICIgICVzIiAiJF9NU0dfSU5TVEFMTElOR19HT09HTEVfQ0hST01FIgogIGN1cmwgLXNMIGh0dHBzOi8vZGwuZ29vZ2xlLmNvbS9saW51eC9kaXJlY3QvZ29vZ2xlLWNocm9tZS1zdGFibGVfY3VycmVudF9hbWQ2NC5kZWIgICAgIC0tb3V0cHV0IC90bXAvZ29vZ2xlLWNocm9tZS1zdGFibGVfY3VycmVudF9hbWQ2NC5kZWIKICBzdWRvIHBhY21hbiAtUyAtLSAteSAvdG1wL2dvb2dsZS1jaHJvbWUtc3RhYmxlX2N1cnJlbnRfYW1kNjQuZGViID4gL2Rldi9udWxsCiAgc3VkbyBybSAtZiAvdG1wL2dvb2dsZS1jaHJvbWUtc3RhYmxlX2N1cnJlbnRfYW1kNjQuZGViCiAgZ2V0R29vZ2xlQ2hyb21lQmluYXJ5UGF0aAogIHByaW50ZiAiICh2JXMpIiAiJCgkX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEggLS12ZXJzaW9uIHwgY3V0IC1kJyAnIC1mMykiCiAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCn0KQ0hST01FRFJJVkVSX1ZFUlNJT049IiIKZnVuY3Rpb24gZ2V0TGF0ZXN0Q2hyb21lZHJpdmVyVmVyc2lvbigpIHsKICBHT09HTEVfQ0hST01FX01BSk9SX1ZFUlNJT049IiQoIiRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCIgLS12ZXJzaW9uIHwgY3V0IC1kJyAnIC1mMyB8IGN1dCAtZCcuJyAtZjEpIgogIGN1cmwgLXNMIGh0dHBzOi8vY2hyb21lZHJpdmVyLnN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vICAgICAtLW91dHB1dCAvdG1wL2Nocm9tZWRyaXZlci12ZXJzaW9ucy54bWwKICBDSFJPTUVEUklWRVJfVkVSU0lPTj0kKGdyZXAgLVBvICI8S2V5PiRHT09HTEVfQ0hST01FX01BSk9SX1ZFUlNJT05cLipcZCpcLipcZCtcLipcZCpcL2Nocm9tZWRyaXZlcl9saW51eDY0XC56aXAiIC90bXAvY2hyb21lZHJpdmVyLXZlcnNpb25zLnhtbCB8CiAgICAgIGdyZXAgLVBvICIkR09PR0xFX0NIUk9NRV9NQUpPUl9WRVJTSU9OXC4qXGQqXC4qXGQrXC4qXGQqIiB8ICAgICAgIGhlYWQgLW4gMSkKICBzdWRvIHJtIC1mIC90bXAvY2hyb21lZHJpdmVyLXZlcnNpb25zLnhtbAp9Cl9DSFJPTUVEUklWRVJfQklOQVJZX1BBVEg9IiIKZnVuY3Rpb24gZ2V0Q2hyb21lZHJpdmVyQmluYXJ5UGF0aCgpIHsKICBfQ0hST01FRFJJVkVSX0JJTkFSWV9QQVRIPSIkKGNvbW1hbmQgLXYgY2hyb21lZHJpdmVyKSIKfQpmdW5jdGlvbiBpbnN0YWxsQ2hyb21lRHJpdmVyKCkgewogIGN1cmwgLXNMICAgICAiaHR0cHM6Ly9jaHJvbWVkcml2ZXIuc3RvcmFnZS5nb29nbGVhcGlzLmNvbS8kQ0hST01FRFJJVkVSX1ZFUlNJT04vY2hyb21lZHJpdmVyX2xpbnV4NjQuemlwIiAgICAgLS1vdXRwdXQgImNocm9tZWRyaXZlcl9saW51eDY0LnppcCIKICB1bnppcCAtcSBjaHJvbWVkcml2ZXJfbGludXg2NC56aXAKICBzdWRvIHJtIC1mIGNocm9tZWRyaXZlcl9saW51eDY0LnppcAogIHN1ZG8gcm0gLWYgIl9DSFJPTUVEUklWRVJfUEFUSCIKICBzdWRvIG12IC1mIGNocm9tZWRyaXZlciAiX0NIUk9NRURSSVZFUl9QQVRIIgp9CmZ1bmN0aW9uIG1haW4oKSB7CiAgcHJpbnRJbmRlbnQKICBwcmludGYgIiVzXG4iICIkX01TR19DSEVDS0lOR19FQ09TWVNURU0iCiAgZ2V0R29vZ2xlQ2hyb21lQmluYXJ5UGF0aAogIGlmIFsgIiRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCIgPSAiIiBdOyB0aGVuCiAgICBjaGVja1N5c3RlbUFyY2gKICAgIGluc3RhbGxHb29nbGVDaHJvbWUKICBlbHNlCiAgICBwcmludGYgIiAgJXMiICIkX01TR19GT1VORF9DSFJPTUVfSU5TVEFMTEVEIgogICAgcHJpbnRmICIgKHYlcykiICIkKCRfR09PR0xFX0NIUk9NRV9CSU5BUllfUEFUSCAtLXZlcnNpb24gfCBjdXQgLWQnICcgLWYzKSIKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGZpOwogIGlmIFsgIiRfRE9XTkxPQURfQ0hST01FRFJJVkVSIiAtZXEgMSBdOyB0aGVuCiAgICBnZXRMYXRlc3RDaHJvbWVkcml2ZXJWZXJzaW9uCiAgICBnZXRDaHJvbWVkcml2ZXJCaW5hcnlQYXRoCiAgICBwcmludEluZGVudAogICAgaWYgWyAiJF9DSFJPTUVEUklWRVJfQklOQVJZX1BBVEgiID0gIiIgXTsgdGhlbgogICAgICBwcmludGYgIiAgJXMgKHYlcykuLi4iICIkX01TR19JTlNUQUxMSU5HX0NIUk9NRURSSVZFUiIgIiRDSFJPTUVEUklWRVJfVkVSU0lPTiIKICAgICAgaW5zdGFsbENocm9tZURyaXZlcgogICAgZWxzZQogICAgICBfQ0hST01FRFJJVkVSX0lOU1RBTExFRF9WRVJTSU9OPSIkKCIkX0NIUk9NRURSSVZFUl9CSU5BUllfUEFUSCIgLS12ZXJzaW9uIHwgY3V0IC1kJyAnIC1mMikiCiAgICAgIGlmIFsgIiRfQ0hST01FRFJJVkVSX0lOU1RBTExFRF9WRVJTSU9OIiAhPSAiJENIUk9NRURSSVZFUl9WRVJTSU9OIiBdOyB0aGVuCiAgICAgICAgcHJpbnRmICIgICVzICh2JXMiICIkX01TR19VUERBVElOR19DSFJPTUVEUklWRVIiICIkX0NIUk9NRURSSVZFUl9JTlNUQUxMRURfVkVSU0lPTiIKICAgICAgICBwcmludGYgIiAtPiB2JXMpLi4uIiAiJENIUk9NRURSSVZFUl9WRVJTSU9OIgogICAgICAgIGluc3RhbGxDaHJvbWVEcml2ZXIKICAgICAgZWxzZQogICAgICAgIHByaW50ZiAiICAlcyAodiVzKSIgIiRfTVNHX0ZPVU5EX0NIUk9NRURSSVZFUl9JTlNUQUxMRUQiICIkX0NIUk9NRURSSVZFUl9JTlNUQUxMRURfVkVSU0lPTiIKICAgICAgZmkKICAgIGZpOwogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZmk7Cn0KaWYgKHJldHVybiAwIDI+L2Rldi9udWxsKTsgdGhlbgogIGV4cG9ydFZhcmlhYmxlcwplbHNlCiAgbWFpbgpmaTs='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
