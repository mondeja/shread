#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVzLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQ0hFQ0tJTkdfRUNPU1lTVEVNPSJDb21wcm9iYW5kbyBlY29zaXN0ZW1hIENocm9tZS4uLiIKX01TR19VTkFCTEVfVE9fSU5TVEFMTF8zMj0iTm8gZXMgcG9zaWJsZSBpbnN0YWxhciBHb29nbGUgQ2hyb21lIGVuIHNpc3RlbWFzIGRlIDMyIGJpdHMuIgpfTVNHX0lOU1RBTExJTkdfR09PR0xFX0NIUk9NRT0iSW5zdGFsYW5kbyBHb29nbGUgQ2hyb21lLi4uIgpfTVNHX0ZPVU5EX0NIUk9NRV9JTlNUQUxMRUQ9IkVuY29udHJhZG8gR29vZ2xlIENocm9tZSBpbnN0YWxhZG8iCl9NU0dfSU5TVEFMTElOR19DSFJPTUVEUklWRVI9Ikluc3RhbGFuZG8gY2hyb21lZHJpdmVyIgpfTVNHX1VQREFUSU5HX0NIUk9NRURSSVZFUj0iQWN0dWFsaXphbmRvIGNocm9tZWRyaXZlciIKX01TR19GT1VORF9DSFJPTUVEUklWRVJfSU5TVEFMTEVEPSJFbmNvbnRyYWRvIGNocm9tZWRyaXZlciBpbnN0YWxhZG8iCklOREVOVF9TVFJJTkc9IiIKX0NIUk9NRURSSVZFUl9QQVRIPSIvdXNyL2Jpbi9jaHJvbWVkcml2ZXIiCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHNyYy91bml4L2RlYmlhbi9pbnN0YWxsL2Nocm9tZSBbLWhdIFstaSBTVFJJTkddIFstZCBDSFJPTUVEUklWRVJfUEFUSF0KCiAgSW5zdGFsbHMgYW5kIHVwZ3JhZGUgQ2hyb21lIGFuZCBDaHJvbWVkcml2ZXIgcmV0cmlldmluZyBiaW5hcmllcyBmcm9tIG9maWNpYWwgc291cmNlcy4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC1kIENIUk9NRURSSVZFUl9QQVRILCAtLWNocm9tZWRyaXZlci1wYXRoIENIUk9NRURSSVZFUl9QQVRICiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwZWNpZmllcyB3aGVyZSBiZSBzdG9yZWQgZG93bmxvYWRlZCBjaHJvbWVkcml2ZXIgYmluYXJ5LiBBcyBkZWZhdWx0IGF0ICckX0NIUk9NRURSSVZFUl9QQVRIJy4KCkhFTFBfVVNBR0UKICAgIGV4aXQgMQp9CmZvciBhcmcgaW4gIiRAIjsgZG8KICBjYXNlICRhcmcgaW4KICAgIC1pfC0taW5kZW50KQogICAgc2hpZnQKICAgIElOREVOVF9TVFJJTkc9IiQxIgogICAgc2hpZnQKICAgIDs7CiAgICAtaHwtLWhlbHApCiAgICBzaGlmdAogICAgdXNhZ2UKICAgIDs7CiAgICAtZHwtLWNocm9tZWRyaXZlci1wYXRoKQogICAgc2hpZnQKICAgIF9DSFJPTUVEUklWRVJfUEFUSD0iJDEiCiAgICBzaGlmdAogICAgOzsKICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICBpZiBbIC16ICIkX1NDUklQVF9GSUxFTkFNRSIgXTsgdGhlbgogICAgICBmaWxlcGF0aD0ic3JjL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvbWFpbi5zaCIKICAgICAgYmFzaCAiJGZpbGVwYXRoIiA+IC9kZXYvbnVsbAogICAgZWxzZQogICAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICAgIGN1cmwgLXNMICIkdXJsIiB8IHN1ZG8gYmFzaCAtID4gL2Rldi9udWxsCiAgICBmaTsKICBmaTsKfQpmdW5jdGlvbiBpbnN0YWxsU2NyaXB0RGVwZW5kZW5jaWVzKCkgewogIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZAp9Cl9HT09HTEVfQ0hST01FX0JJTkFSWV9QQVRIPSIiCmZ1bmN0aW9uIGdldEdvb2dsZUNocm9tZUJpbmFyeVBhdGgoKSB7CiAgX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEg9IiQoY29tbWFuZCAtdiBnb29nbGUtY2hyb21lKSIKICBpZiBbICIkX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEgiID0gIiIgXTsgdGhlbgogICAgX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEg9IiQoY29tbWFuZCAtdiBnb29nbGUtY2hyb21lLXN0YWJsZSkiCiAgZmk7Cn0KZnVuY3Rpb24gY2hlY2tTeXN0ZW1BcmNoKCkgewogIGlmIFtbICIkKHVuYW1lIC1tKSIgIT0gIng4Nl82NCIgXV07IHRoZW4KICAgIHByaW50SW5kZW50ID4mMgogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfVU5BQkxFX1RPX0lOU1RBTExfMzJfQklUUyIgPiYyCiAgICBwcmludGYgIiBcZVs5MW1ceEUyXHg5Q1x4OTVcZVszOW1cbiIgPiYyCiAgICBleGl0IDEKICBmaTsKfQpmdW5jdGlvbiBpbnN0YWxsR29vZ2xlQ2hyb21lKCkgewogIHByaW50ZiAiICAlcyIgIiRfTVNHX0lOU1RBTExJTkdfR09PR0xFX0NIUk9NRSIKICBjdXJsIC1zTCBodHRwczovL2RsLmdvb2dsZS5jb20vbGludXgvZGlyZWN0L2dvb2dsZS1jaHJvbWUtc3RhYmxlX2N1cnJlbnRfYW1kNjQuZGViICAgICAtLW91dHB1dCAvdG1wL2dvb2dsZS1jaHJvbWUtc3RhYmxlX2N1cnJlbnRfYW1kNjQuZGViCiAgc3VkbyBwYWNtYW4gLVMgLS0gLXkgL3RtcC9nb29nbGUtY2hyb21lLXN0YWJsZV9jdXJyZW50X2FtZDY0LmRlYiA+IC9kZXYvbnVsbAogIHN1ZG8gcm0gLWYgL3RtcC9nb29nbGUtY2hyb21lLXN0YWJsZV9jdXJyZW50X2FtZDY0LmRlYgogIGdldEdvb2dsZUNocm9tZUJpbmFyeVBhdGgKICBwcmludGYgIiAodiVzKSIgIiQoJF9HT09HTEVfQ0hST01FX0JJTkFSWV9QQVRIIC0tdmVyc2lvbiB8IGN1dCAtZCcgJyAtZjMpIgogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9CkNIUk9NRURSSVZFUl9WRVJTSU9OPSIiCmZ1bmN0aW9uIGdldExhdGVzdENocm9tZWRyaXZlclZlcnNpb24oKSB7CiAgR09PR0xFX0NIUk9NRV9NQUpPUl9WRVJTSU9OPSIkKCIkX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEgiIC0tdmVyc2lvbiB8IGN1dCAtZCcgJyAtZjMgfCBjdXQgLWQnLicgLWYxKSIKICBjdXJsIC1zTCBodHRwczovL2Nocm9tZWRyaXZlci5zdG9yYWdlLmdvb2dsZWFwaXMuY29tLyAgICAgLS1vdXRwdXQgL3RtcC9jaHJvbWVkcml2ZXItdmVyc2lvbnMueG1sCiAgQ0hST01FRFJJVkVSX1ZFUlNJT049JChncmVwIC1QbyAiPEtleT4kR09PR0xFX0NIUk9NRV9NQUpPUl9WRVJTSU9OXC4qXGQqXC4qXGQrXC4qXGQqXC9jaHJvbWVkcml2ZXJfbGludXg2NFwuemlwIiAvdG1wL2Nocm9tZWRyaXZlci12ZXJzaW9ucy54bWwgfAogICAgICBncmVwIC1QbyAiJEdPT0dMRV9DSFJPTUVfTUFKT1JfVkVSU0lPTlwuKlxkKlwuKlxkK1wuKlxkKiIgfCAgICAgICBoZWFkIC1uIDEpCiAgc3VkbyBybSAtZiAvdG1wL2Nocm9tZWRyaXZlci12ZXJzaW9ucy54bWwKfQpfQ0hST01FRFJJVkVSX0JJTkFSWV9QQVRIPSIiCmZ1bmN0aW9uIGdldENocm9tZWRyaXZlckJpbmFyeVBhdGgoKSB7CiAgX0NIUk9NRURSSVZFUl9CSU5BUllfUEFUSD0iJChjb21tYW5kIC12IGNocm9tZWRyaXZlcikiCn0KZnVuY3Rpb24gaW5zdGFsbENocm9tZURyaXZlcigpIHsKICBjdXJsIC1zTCAgICAgImh0dHBzOi8vY2hyb21lZHJpdmVyLnN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vJENIUk9NRURSSVZFUl9WRVJTSU9OL2Nocm9tZWRyaXZlcl9saW51eDY0LnppcCIgICAgIC0tb3V0cHV0ICJjaHJvbWVkcml2ZXJfbGludXg2NC56aXAiCiAgdW56aXAgLXEgY2hyb21lZHJpdmVyX2xpbnV4NjQuemlwCiAgc3VkbyBybSAtZiBjaHJvbWVkcml2ZXJfbGludXg2NC56aXAKICBzdWRvIHJtIC1mICJfQ0hST01FRFJJVkVSX1BBVEgiCiAgc3VkbyBtdiAtZiBjaHJvbWVkcml2ZXIgIl9DSFJPTUVEUklWRVJfUEFUSCIKfQpmdW5jdGlvbiBtYWluKCkgewogIHByaW50SW5kZW50CiAgcHJpbnRmICIlc1xuIiAiJF9NU0dfQ0hFQ0tJTkdfRUNPU1lTVEVNIgogIGdldEdvb2dsZUNocm9tZUJpbmFyeVBhdGgKICBpZiBbICIkX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEgiID0gIiIgXTsgdGhlbgogICAgY2hlY2tTeXN0ZW1BcmNoCiAgICBpbnN0YWxsR29vZ2xlQ2hyb21lCiAgZWxzZQogICAgcHJpbnRmICIgICVzIiAiJF9NU0dfRk9VTkRfQ0hST01FX0lOU1RBTExFRCIKICAgIHByaW50ZiAiICh2JXMpIiAiJCgkX0dPT0dMRV9DSFJPTUVfQklOQVJZX1BBVEggLS12ZXJzaW9uIHwgY3V0IC1kJyAnIC1mMykiCiAgICBwcmludGYgIiBcZVs5Mm1ceEUyXHg5Q1x4OTRcZVszOW1cbiIKICBmaTsKICBnZXRMYXRlc3RDaHJvbWVkcml2ZXJWZXJzaW9uCiAgZ2V0Q2hyb21lZHJpdmVyQmluYXJ5UGF0aAogIHByaW50SW5kZW50CiAgaWYgWyAiJF9DSFJPTUVEUklWRVJfQklOQVJZX1BBVEgiID0gIiIgXTsgdGhlbgogICAgcHJpbnRmICIgICVzICh2JXMpLi4uIiAiJF9NU0dfSU5TVEFMTElOR19DSFJPTUVEUklWRVIiICIkQ0hST01FRFJJVkVSX1ZFUlNJT04iCiAgICBpbnN0YWxsQ2hyb21lRHJpdmVyCiAgZWxzZQogICAgX0NIUk9NRURSSVZFUl9JTlNUQUxMRURfVkVSU0lPTj0iJCgiJF9DSFJPTUVEUklWRVJfQklOQVJZX1BBVEgiIC0tdmVyc2lvbiB8IGN1dCAtZCcgJyAtZjIpIgogICAgaWYgWyAiJF9DSFJPTUVEUklWRVJfSU5TVEFMTEVEX1ZFUlNJT04iICE9ICIkQ0hST01FRFJJVkVSX1ZFUlNJT04iIF07IHRoZW4KICAgICAgcHJpbnRmICIgICVzICh2JXMiICIkX01TR19VUERBVElOR19DSFJPTUVEUklWRVIiICIkX0NIUk9NRURSSVZFUl9JTlNUQUxMRURfVkVSU0lPTiIKICAgICAgcHJpbnRmICIgLT4gdiVzKS4uLiIgIiRDSFJPTUVEUklWRVJfVkVSU0lPTiIKICAgICAgaW5zdGFsbENocm9tZURyaXZlcgogICAgZWxzZQogICAgICBwcmludGYgIiAgJXMgKHYlcykiICIkX01TR19GT1VORF9DSFJPTUVEUklWRVJfSU5TVEFMTEVEIiAiJF9DSFJPTUVEUklWRVJfSU5TVEFMTEVEX1ZFUlNJT04iCiAgICBmaQogIGZpOwogIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgp9CmlmIChyZXR1cm4gMCAyPi9kZXYvbnVsbCk7IHRoZW4KICBleHBvcnRWYXJpYWJsZXMKZWxzZQogIG1haW4KZmk7'
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
