#!/bin/bash
H='IyEvYmluL2Jhc2gKIyAtKi0gRU5DT0RJTkc6IFVURi04IC0qLQpfU0NSSVBUX0ZJTEVOQU1FPWVuLnNoCiMhL2Jpbi9iYXNoCl9NU0dfQ0hFQ0tJTkdfTU9aSUxMQV9FQ09TWVNURU09IkNoZWNraW5nIE1vemlsbGEgZWNvc3lzdGVtLi4uIgpfTVNHX0ZPVU5EX01PWklMTEFfRklSRUZPWF9JTlNUQUxMRUQ9Ik1vemlsbGEgRmlyZWZveCBmb3VuZCBpbnN0YWxsZWQgaW4gdGhlIHN5c3RlbSIKX01TR19JTlNUQUxMSU5HX01PWklMTEFfRklSRUZPWF9QQUNLQUdFUz0iSW5zdGFsbGluZyBNb3ppbGxhIEZpcmVmb3ggcGFja2FnZXMiCl9NU0dfRk9VTkRfQ0hFQ0tPRFJJVkVSX0lOU1RBTExFRD0iR2Vja29kcml2ZXIgZm91bmQgaW5zdGFsbGVkIGluIHRoZSBzeXN0ZW0iCl9NU0dfSU5TVEFMTElOR19HRUNLT0RSSVZFUj0iSW5zdGFsbGluZyBnZWNrb2RyaXZlci4uLiIKSU5ERU5UX1NUUklORz0iIgpfSU5TVEFMTF9HRUNLT0RSSVZFUj0xCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEhFTFBfVVNBR0UKVXNhZ2U6IHVuaXgvZGViaWFuL2luc3RhbGwvZmlyZWZveC8kX1NDUklQVF9GSUxFTkFNRSBbLWhdIFstaSBTVFJJTkddIFstbl0KCiAgSW5zdGFsbHMgTW96aWxsYSBGaXJlZm94IGFuZCBnZWNrb2RyaXZlci4KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXQuCiAgLWkgU1RSSU5HLCAtLWluZGVudCBTVFJJTkcgICAgICAgIEVhY2ggbGluZSBvZiB0aGUgc2NyaXB0IG91dHB1dCB3aWxsIGJlIHByZWNlZGVkIHdpdGggdGhlIHN0cmluZyBkZWZpbmVkIGluIHRoaXMgcGFyYW1ldGVyLgogIC1uLCAtLW5vLWdlY2tvZHJpdmVyICAgICAgICAgICAgICBJZiBwYXNzZWQsIGRvZXNuJ3QgaW5zdGFsbHMgZ2Vja29kcml2ZXIuCgpIRUxQX1VTQUdFCiAgICBleGl0IDEKfQpmb3IgYXJnIGluICIkQCI7IGRvCiAgY2FzZSAkYXJnIGluCiAgICAtaXwtLWluZGVudCkKICAgIHNoaWZ0CiAgICBJTkRFTlRfU1RSSU5HPSIkMSIKICAgIHNoaWZ0CiAgICA7OwogICAgLWh8LS1oZWxwKQogICAgc2hpZnQKICAgIHVzYWdlCiAgICA7OyAgICAKICAgIC1ufC0tbm8tZ2Vja29kcml2ZXIpCiAgICBfSU5TVEFMTF9HRUNLT0RSSVZFUj0wCiAgICBzaGlmdAogICAgOzsKICBlc2FjCmRvbmUKZnVuY3Rpb24gcHJpbnRJbmRlbnQoKSB7CiAgcHJpbnRmICIlcyIgIiRJTkRFTlRfU1RSSU5HIgp9CmZ1bmN0aW9uIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZCgpIHsKICBpZiBbICIkKGNvbW1hbmQgLXYgcGFjbWFuKSIgPSAiIiBdOyB0aGVuCiAgICB1cmw9Imh0dHBzOi8vbW9uZGVqYS5naXRodWIuaW8vc2hyZWFkL3VuaXgvXy9kb3dubG9hZC9wYWNhcHQvJF9TQ1JJUFRfRklMRU5BTUUiCiAgICBjdXJsIC1zTCAiJHVybCIgfCBzdWRvIGJhc2ggLSA+IC9kZXYvbnVsbAogIGZpOwp9CmZ1bmN0aW9uIGdldFVuaXhEaXN0cm8oKSB7CiAgaWYgWyAteiAiJFVOSVhfRElTVFJPIiBdOyB0aGVuCiAgICBzb3VyY2UgPChjdXJsIC1zTCBodHRwczovL21vbmRlamEuZ2l0aHViLmlvL3NocmVhZC91bml4L18vdXRpbC9nZXQtZGlzdHJvL2VuLnNoKQogIGZpOwp9CmZ1bmN0aW9uIGluc3RhbGxNb3ppbGxhRmlyZWZveCgpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiICAlcyIgIiRfTVNHX0lOU1RBTExJTkdfTU9aSUxMQV9GSVJFRk9YX1BBQ0tBR0VTIgogIF9NT1pJTExBX0ZJUkVGT1hfUEFDS0FHRV9OQU1FPSJmaXJlZm94IgogIGlmIFsgIiRVTklYX0RJU1RSTyIgPSAiZGViaWFuIiBdOyB0aGVuCiAgICBfTU9aSUxMQV9GSVJFRk9YX1BBQ0tBR0VfTkFNRT0iZmlyZWZveC1lc3IiCiAgZmk7CiAgX0ZJUkVGT1hfTEFURVNUX1ZFUlNJT049JChwYWNtYW4gLVFpICIkX01PWklMTEFfRklSRUZPWF9QQUNLQUdFX05BTUUiICAgICB8IGdyZXAgVmVyc2lvbjogfCBjdXQgLWQnICcgLWYyIHwgY3V0IC1kJysnIC1mMSkKICBwcmludGYgIiAodiVzKS4uLlxuIiAiJF9GSVJFRk9YX0xBVEVTVF9WRVJTSU9OIgogIF9NT1pJTExBX0ZJUkVGT1hfUEFDS0FHRVM9KCIkX01PWklMTEFfRklSRUZPWF9QQUNLQUdFX05BTUUiKQogIGlmIFsgIiRVTklYX0RJU1RSTyIgPSAiZGViaWFuIiBdOyB0aGVuCiAgICBfTU9aSUxMQV9GSVJFRk9YX1BBQ0tBR0VTKz0oImZpcmVmb3gtZXNyLWwxMG4tZXMtZXMiKQogIGZpOwogIGZvciBQQUNLQUdFIGluICIke19NT1pJTExBX0ZJUkVGT1hfUEFDS0FHRVNbQF19IjsgZG8KICAgIHByaW50SW5kZW50CiAgICBwcmludGYgIiAgICAlcyIgIiRQQUNLQUdFIgogICAgaWYgW1sgIiQoc3VkbyBwYWNtYW4gLVFpICIkUEFDS0FHRSIgMj4gL2Rldi9udWxsIHwgZ3JlcCBTdGF0dXMpIiAhPSAiU3RhdHVzOiBpbnN0YWxsIG9rIGluc3RhbGxlZCIgXV07IHRoZW4KICAgICAgc3VkbyBwYWNtYW4gLVMgLS0gLXkgIiRQQUNLQUdFIiA+IC9kZXYvbnVsbCB8fCBleGl0ICQ/CiAgICBmaTsKICAgIHByaW50ZiAiIFxlWzkybVx4RTJceDlDXHg5NFxlWzM5bVxuIgogIGRvbmUKfQpmdW5jdGlvbiBpbnN0YWxsR2Vja29kcml2ZXIoKSB7CiAgcHJpbnRmICIgICVzIiAiJF9NU0dfSU5TVEFMTElOR19HRUNLT0RSSVZFUiIKICBzdWRvIHBhY21hbiAtUyAtLSAteSBmaXJlZm94LWdlY2tvZHJpdmVyID4gL2Rldi9udWxsCn0KZnVuY3Rpb24gbWFpbigpIHsKICBwcmludEluZGVudAogIHByaW50ZiAiJXNcbiIgIiRfTVNHX0NIRUNLSU5HX01PWklMTEFfRUNPU1lTVEVNIgogIGluc3RhbGxQYWNtYW5JZk5vdEluc3RhbGxlZAogIGdldFVuaXhEaXN0cm8KICBpZiBjb21tYW5kIC12IGZpcmVmb3ggJj4gL2Rldi9udWxsOyB0aGVuCiAgICBfTU9aSUxMQV9GSVJFRk9YX1ZFUlNJT049JCgKICAgICAgc3VkbyAtdSAiJFNVRE9fVVNFUiIgZmlyZWZveCAtLXZlcnNpb24gfCBjdXQgLWQnICcgLWYzKQogICAgcHJpbnRJbmRlbnQKICAgIHByaW50ZiAiICAlcyAodiVzKSIgIiRfTVNHX0ZPVU5EX01PWklMTEFfRklSRUZPWF9JTlNUQUxMRUQiICIkX01PWklMTEFfRklSRUZPWF9WRVJTSU9OIgogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZWxzZQogICAgaW5zdGFsbE1vemlsbGFGaXJlZm94CiAgZmk7CiAgaWYgWyAkX0lOU1RBTExfR0VDS09EUklWRVIgLWVxIDEgXSAmJiBbICIkVU5JWF9ESVNUUk8iICE9ICJkZWJpYW4iIF07IHRoZW4KICAgIF9HRUNLT0RSSVZFUl9QQVRIPSIkKGNvbW1hbmQgLXYgZ2Vja29kcml2ZXIpIgogICAgaWYgWyAiJF9HRUNLT0RSSVZFUl9QQVRIIiAhPSAiIiBdOyB0aGVuCiAgICAgIHByaW50SW5kZW50CiAgICAgIHByaW50ZiAiICAlcyIgIiRfTVNHX0ZPVU5EX0NIRUNLT0RSSVZFUl9JTlNUQUxMRUQiCiAgICAgIHByaW50ZiAiICh2JXMpIiAiJChnZWNrb2RyaXZlciAtLXZlcnNpb24gfCBoZWFkIC1uMSB8IGN1dCAtZCcgJyAtZjIpIgogICAgZWxzZQogICAgICBpbnN0YWxsR2Vja29kcml2ZXIKICAgIGZpOwogICAgcHJpbnRmICIgXGVbOTJtXHhFMlx4OUNceDk0XGVbMzltXG4iCiAgZmk7Cn0KaWYgKHJldHVybiAwIDI+L2Rldi9udWxsKTsgdGhlbgogIGV4cG9ydFZhcmlhYmxlcwplbHNlCiAgbWFpbgpmaTs='
if (return 0 2>/dev/null); then
  source <(printf "%s" "$H" | base64 -d)
else
  echo "$(echo "$H" | base64 -d)" | bash -s -- "$@"
fi;
